{"text_id": 1100000, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100001, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100002, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100003, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100004, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100005, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100006, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100007, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100008, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100009, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100010, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100011, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100012, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100013, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100014, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100015, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100016, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100017, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100018, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100019, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100020, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100021, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100022, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100023, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100024, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100025, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100026, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100027, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100028, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100029, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100030, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100031, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100032, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100033, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100034, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100035, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100036, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100037, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100038, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100039, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100040, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100041, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100042, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100043, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100044, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100045, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100046, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100047, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100048, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100049, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100050, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100051, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100052, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100053, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100054, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100055, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100056, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100057, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100058, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100059, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100060, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100061, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100062, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100063, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100064, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100065, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100066, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100067, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100068, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100069, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100070, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100071, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100072, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100073, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100074, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100075, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100076, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100077, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100078, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100079, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100080, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100081, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100082, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100083, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100084, "text": "as_integer_ratio(self, /): Return integer ratio."}
{"text_id": 1100085, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100086, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100087, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100088, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100089, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100090, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100091, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100092, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100093, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100094, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100095, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100096, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100097, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100098, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100099, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100100, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100101, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100102, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100103, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100104, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100105, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100106, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100107, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100108, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100109, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100110, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100111, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100112, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100113, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100114, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100115, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100116, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100117, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100118, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100119, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100120, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100121, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100122, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100123, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100124, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100125, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100126, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100127, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100128, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100129, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100130, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100131, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100132, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100133, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100134, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100135, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100136, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100137, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100138, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100139, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100140, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100141, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100142, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100143, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100144, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100145, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100146, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100147, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100148, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100149, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100150, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100151, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100152, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100153, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100154, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100155, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100156, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100157, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100158, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100159, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100160, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100161, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100162, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100163, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100164, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100165, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100166, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100167, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100168, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100169, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100170, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100171, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100172, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100173, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100174, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100175, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100176, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100177, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100178, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100179, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100180, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100181, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100182, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100183, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100184, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100185, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100186, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100187, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100188, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100189, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100190, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100191, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100192, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100193, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100194, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100195, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100196, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100197, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100198, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100199, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100200, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100201, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100202, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100203, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100204, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100205, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100206, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100207, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100208, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100209, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100210, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100211, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100212, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100213, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100214, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100215, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100216, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100217, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100218, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100219, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100220, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100221, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100222, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100223, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100224, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100225, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100226, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100227, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100228, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100229, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100230, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100231, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100232, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100233, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100234, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100235, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100236, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100237, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100238, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100239, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100240, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100241, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100242, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100243, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100244, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100245, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100246, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100247, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100248, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100249, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100250, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100251, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100252, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100253, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100254, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100255, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100256, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100257, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100258, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100259, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100260, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100261, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100262, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100263, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100264, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100265, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100266, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100267, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100268, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100269, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100270, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100271, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100272, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100273, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100274, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100275, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100276, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100277, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100278, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100279, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100280, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100281, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100282, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100283, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100284, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100285, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100286, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100287, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100288, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100289, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100290, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100291, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100292, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100293, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100294, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100295, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100296, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100297, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100298, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100299, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100300, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100301, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100302, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100303, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100304, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100305, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100306, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100307, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100308, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100309, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100310, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100311, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100312, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100313, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100314, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100315, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100316, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100317, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100318, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100319, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100320, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100321, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100322, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100323, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100324, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100325, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100326, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100327, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100328, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100329, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100330, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100331, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100332, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100333, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100334, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100335, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100336, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100337, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100338, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100339, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100340, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100341, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100342, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100343, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100344, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100345, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100346, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100347, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100348, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100349, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100350, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100351, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100352, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100353, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100354, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100355, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100356, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100357, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100358, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100359, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100360, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100361, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100362, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100363, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100364, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100365, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100366, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100367, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100368, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100369, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100370, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100371, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100372, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100373, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100374, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100375, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100376, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100377, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100378, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100379, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100380, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100381, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100382, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100383, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100384, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100385, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100386, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100387, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100388, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100389, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100390, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100391, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100392, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100393, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100394, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100395, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100396, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100397, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100398, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100399, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100400, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100401, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100402, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100403, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100404, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100405, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100406, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100407, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100408, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100409, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100410, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100411, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100412, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100413, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100414, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100415, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100416, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100417, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100418, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100419, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100420, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100421, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100422, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100423, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100424, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100425, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100426, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100427, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100428, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100429, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100430, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100431, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100432, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100433, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100434, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100435, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100436, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100437, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100438, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100439, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100440, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100441, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100442, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100443, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100444, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100445, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100446, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100447, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100448, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100449, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100450, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100451, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100452, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100453, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100454, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100455, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100456, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100457, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100458, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100459, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100460, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100461, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100462, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100463, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100464, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100465, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100466, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100467, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100468, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100469, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100470, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100471, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100472, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100473, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100474, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100475, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100476, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100477, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100478, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100479, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100480, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100481, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100482, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100483, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100484, "text": "as_integer_ratio(self, /): Return integer ratio."}
{"text_id": 1100485, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100486, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100487, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100488, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100489, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100490, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100491, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100492, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100493, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100494, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100495, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100496, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100497, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100498, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100499, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100500, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100501, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100502, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100503, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100504, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100505, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100506, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100507, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100508, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100509, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100510, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100511, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100512, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100513, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100514, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100515, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100516, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100517, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100518, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100519, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100520, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100521, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100522, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100523, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100524, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100525, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100526, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100527, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100528, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100529, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100530, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100531, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100532, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100533, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100534, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100535, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100536, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100537, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100538, "text": "as_integer_ratio(): Return integer ratio."}
{"text_id": 1100539, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100540, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100541, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100542, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100543, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100544, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100545, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100546, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100547, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100548, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100549, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100550, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100551, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100552, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100553, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100554, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100555, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100556, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100557, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100558, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100559, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100560, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100561, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100562, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100563, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100564, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100565, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100566, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100567, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100568, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100569, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100570, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100571, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100572, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100573, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100574, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100575, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100576, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100577, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100578, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100579, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100580, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100581, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100582, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100583, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100584, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100585, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100586, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100587, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100588, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100589, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100590, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100591, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100592, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100593, "text": "conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise."}
{"text_id": 1100594, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100595, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100596, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100597, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100598, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100599, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100600, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100601, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100602, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100603, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100604, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100605, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100606, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100607, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100608, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100609, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100610, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100611, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100612, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100613, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100614, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100615, "text": "conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise."}
{"text_id": 1100616, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100617, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100618, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100619, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100620, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100621, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100622, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100623, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100624, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100625, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100626, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100627, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100628, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100629, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100630, "text": "conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise."}
{"text_id": 1100631, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100632, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100633, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100634, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100635, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100636, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100637, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100638, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100639, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100640, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100641, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100642, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100643, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100644, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100645, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100646, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100647, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100648, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100649, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100650, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100651, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100652, "text": "conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise."}
{"text_id": 1100653, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100654, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100655, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100656, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100657, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100658, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100659, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100660, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100661, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100662, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100663, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100664, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100665, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100666, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100667, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100668, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100669, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100670, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100671, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100672, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100673, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100674, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100675, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100676, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100677, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100678, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100679, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100680, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100681, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100682, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100683, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100684, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100685, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100686, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100687, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100688, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100689, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100690, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100691, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100692, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100693, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100694, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100695, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100696, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100697, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100698, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100699, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100700, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100701, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100702, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100703, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100704, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100705, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100706, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100707, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100708, "text": "conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise."}
{"text_id": 1100709, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100710, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100711, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100712, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100713, "text": "conjugate(): Return self, the complex conjugate of any float."}
{"text_id": 1100714, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100715, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100716, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100717, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100718, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100719, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100720, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100721, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100722, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100723, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100724, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100725, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100726, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100727, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100728, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100729, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100730, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100731, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100732, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100733, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100734, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100735, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100736, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100737, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100738, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100739, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100740, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100741, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100742, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100743, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100744, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100745, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100746, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100747, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100748, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100749, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100750, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100751, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100752, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100753, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100754, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100755, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100756, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100757, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100758, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100759, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100760, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100761, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100762, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100763, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100764, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100765, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100766, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100767, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100768, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100769, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100770, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100771, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100772, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100773, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100774, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100775, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100776, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100777, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100778, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100779, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100780, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100781, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100782, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100783, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100784, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100785, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100786, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100787, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100788, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100789, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100790, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100791, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100792, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100793, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100794, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100795, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100796, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100797, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100798, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100799, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100800, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100801, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100802, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100803, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100804, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100805, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100806, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100807, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100808, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100809, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100810, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100811, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100812, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100813, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100814, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100815, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100816, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100817, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100818, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100819, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100820, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100821, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100822, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100823, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100824, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100825, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100826, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100827, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100828, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100829, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100830, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100831, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100832, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100833, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100834, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100835, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100836, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100837, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100838, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100839, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100840, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100841, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100842, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100843, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100844, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100845, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100846, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100847, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100848, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100849, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100850, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100851, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100852, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100853, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100854, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100855, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100856, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100857, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100858, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100859, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100860, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100861, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100862, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100863, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100864, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100865, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100866, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100867, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100868, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100869, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100870, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100871, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100872, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100873, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100874, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100875, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100876, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100877, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100878, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100879, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100880, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100881, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100882, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100883, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100884, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100885, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100886, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100887, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100888, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100889, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100890, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100891, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100892, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100893, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100894, "text": "fromhex(string, /): Create a bytes object from a string of hexadecimal numbers."}
{"text_id": 1100895, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100896, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100897, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100898, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100899, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100900, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100901, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100902, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100903, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100904, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100905, "text": "fromhex(string, /): Create a floating-point number from a hexadecimal string."}
{"text_id": 1100906, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100907, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100908, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100909, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100910, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100911, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100912, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100913, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100914, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100915, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100916, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100917, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100918, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100919, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100920, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100921, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100922, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100923, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100924, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100925, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100926, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100927, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100928, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100929, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100930, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100931, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100932, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100933, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100934, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100935, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100936, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100937, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100938, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100939, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100940, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100941, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100942, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100943, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100944, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100945, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100946, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100947, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100948, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100949, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100950, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100951, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100952, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100953, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100954, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100955, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100956, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100957, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100958, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100959, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100960, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100961, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100962, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100963, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100964, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100965, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100966, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100967, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100968, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100969, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100970, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100971, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100972, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100973, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100974, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100975, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100976, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100977, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100978, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100979, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100980, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100981, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100982, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100983, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100984, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100985, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100986, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100987, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100988, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100989, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100990, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100991, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100992, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100993, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100994, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100995, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100996, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100997, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100998, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1100999, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101000, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101001, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101002, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101003, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101004, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101005, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101006, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101007, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101008, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101009, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101010, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101011, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101012, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101013, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101014, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101015, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101016, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101017, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101018, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101019, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101020, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101021, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101022, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101023, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101024, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101025, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101026, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101027, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101028, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101029, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101030, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101031, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101032, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101033, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101034, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101035, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101036, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101037, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101038, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101039, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101040, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101041, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101042, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101043, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101044, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101045, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101046, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101047, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101048, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101049, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101050, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101051, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101052, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101053, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101054, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101055, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101056, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101057, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101058, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101059, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101060, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101061, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101062, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101063, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101064, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101065, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101066, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101067, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101068, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101069, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101070, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101071, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101072, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101073, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101074, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101075, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101076, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101077, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101078, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101079, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101080, "text": "hex(self, /): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101081, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101082, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101083, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101084, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101085, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101086, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101087, "text": "hex(): Return a hexadecimal representation of a floating-point number."}
{"text_id": 1101088, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101089, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101090, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101091, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101092, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101093, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101094, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101095, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101096, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101097, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101098, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101099, "text": "imag(val): Return the imaginary part of the complex argument."}
{"text_id": 1101100, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101101, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101102, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101103, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101104, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101105, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101106, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101107, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101108, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101109, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101110, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101111, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101112, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101113, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101114, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101115, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101116, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101117, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101118, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101119, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101120, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101121, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101122, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101123, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101124, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101125, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101126, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101127, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101128, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101129, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101130, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101131, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101132, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101133, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101134, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101135, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101136, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101137, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101138, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101139, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101140, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101141, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101142, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101143, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101144, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101145, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101146, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101147, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101148, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101149, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101150, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101151, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101152, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101153, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101154, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101155, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101156, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101157, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101158, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101159, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101160, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101161, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101162, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101163, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101164, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101165, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101166, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101167, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101168, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101169, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101170, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101171, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101172, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101173, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101174, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101175, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101176, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101177, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101178, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101179, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101180, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101181, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101182, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101183, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101184, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101185, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101186, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101187, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101188, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101189, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101190, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101191, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101192, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101193, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101194, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101195, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101196, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101197, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101198, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101199, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101200, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101201, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101202, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101203, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101204, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101205, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101206, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101207, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101208, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101209, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101210, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101211, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101212, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101213, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101214, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101215, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101216, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101217, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101218, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101219, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101220, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101221, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101222, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101223, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101224, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101225, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101226, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101227, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101228, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101229, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101230, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101231, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101232, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101233, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101234, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101235, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101236, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101237, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101238, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101239, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101240, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101241, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101242, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101243, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101244, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101245, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101246, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101247, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101248, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101249, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101250, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101251, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101252, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101253, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101254, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101255, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101256, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101257, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101258, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101259, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101260, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101261, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101262, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101263, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101264, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101265, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101266, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101267, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101268, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101269, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101270, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101271, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101272, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101273, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101274, "text": "is_integer(self, /): Return True if the float is an integer."}
{"text_id": 1101275, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101276, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101277, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101278, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101279, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101280, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101281, "text": "is_integer(): Return True if the float is an integer."}
{"text_id": 1101282, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101283, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101284, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101285, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101286, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101287, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101288, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101289, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101290, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101291, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101292, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101293, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101294, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101295, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101296, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101297, "text": "real(val): Return the real part of the complex argument."}
{"text_id": 1101298, "text": "abs(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1101299, "text": "abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101300, "text": "abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101301, "text": "abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101302, "text": "abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101303, "text": "abs(self, *args, **kwargs): Convenience fluent method for :py:func:`abs`."}
{"text_id": 1101304, "text": "abs(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1101305, "text": "abs(self, *args, **kwargs): Convenience fluent method for :py:func:`abs`."}
{"text_id": 1101306, "text": "abs(self, *args, **kwargs): Convenience fluent method for :py:func:`abs`."}
{"text_id": 1101307, "text": "abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101308, "text": "absolute(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1101309, "text": "absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101310, "text": "absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101311, "text": "absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101312, "text": "absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101313, "text": "absolute(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1101314, "text": "absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise."}
{"text_id": 1101315, "text": "add(x1, x2, out=None, **kwargs): Add arguments element-wise."}
{"text_id": 1101316, "text": "add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode."}
{"text_id": 1101317, "text": "add(a, b, *args, **kwargs): add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise."}
{"text_id": 1101318, "text": "add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode."}
{"text_id": 1101319, "text": "add(a, b, *args, **kwargs): add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise."}
{"text_id": 1101320, "text": "add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode."}
{"text_id": 1101321, "text": "add(a, b, *args, **kwargs): add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise."}
{"text_id": 1101322, "text": "add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode."}
{"text_id": 1101323, "text": "add(a, b, *args, **kwargs): add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise."}
{"text_id": 1101324, "text": "add(x1, x2, out=None, **kwargs): Add arguments element-wise."}
{"text_id": 1101325, "text": "add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode."}
{"text_id": 1101326, "text": "add(a, b, *args, **kwargs): add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Add arguments element-wise."}
{"text_id": 1101327, "text": "all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101328, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101329, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101330, "text": "all(a, *args, **params): all(self, axis=None, out=None, keepdims=<no value>) Returns True if all elements evaluate to True."}
{"text_id": 1101331, "text": "all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True."}
{"text_id": 1101332, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101333, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101334, "text": "all(a, *args, **params): all(self, axis=None, out=None, keepdims=<no value>) Returns True if all elements evaluate to True."}
{"text_id": 1101335, "text": "all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True."}
{"text_id": 1101336, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101337, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101338, "text": "all(a, *args, **params): all(self, axis=None, out=None, keepdims=<no value>) Returns True if all elements evaluate to True."}
{"text_id": 1101339, "text": "all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True."}
{"text_id": 1101340, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101341, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101342, "text": "all(a, *args, **params): all(self, axis=None, out=None, keepdims=<no value>) Returns True if all elements evaluate to True."}
{"text_id": 1101343, "text": "all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True."}
{"text_id": 1101344, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101345, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101346, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101347, "text": "all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True."}
{"text_id": 1101348, "text": "all(a, *args, **params): all(self, axis=None, out=None, keepdims=<no value>) Returns True if all elements evaluate to True."}
{"text_id": 1101349, "text": "all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True."}
{"text_id": 1101350, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101351, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101352, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101353, "text": "allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101354, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101355, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101356, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101357, "text": "allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101358, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101359, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101360, "text": "allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101361, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101362, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101363, "text": "allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101364, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101365, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101366, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101367, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101368, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101369, "text": "allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101370, "text": "allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08): Returns True if two arrays are element-wise equal within a tolerance."}
{"text_id": 1101371, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101372, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101373, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101374, "text": "alltrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1101375, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101376, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101377, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101378, "text": "alltrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1101379, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101380, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101381, "text": "alltrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1101382, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101383, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101384, "text": "alltrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1101385, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101386, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101387, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101388, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101389, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101390, "text": "alltrue(*args, **kwargs): Check if all elements of input array are true."}
{"text_id": 1101391, "text": "alltrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1101392, "text": "amax(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101393, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101394, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101395, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101396, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101397, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101398, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101399, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101400, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101401, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101402, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101403, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101404, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101405, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101406, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101407, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101408, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101409, "text": "amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1101410, "text": "amin(a, axis=None, keepdims=False, out=None): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101411, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101412, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101413, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101414, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101415, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101416, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101417, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101418, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101419, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101420, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101421, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101422, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101423, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101424, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101425, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101426, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101427, "text": "amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1101428, "text": "any(a, axis=None, keepdims=False, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101429, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101430, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101431, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101432, "text": "any(a, *args, **params): any(self, axis=None, out=None, keepdims=<no value>) Returns True if any of the elements of `a` evaluate to True."}
{"text_id": 1101433, "text": "any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101434, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101435, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101436, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101437, "text": "any(a, *args, **params): any(self, axis=None, out=None, keepdims=<no value>) Returns True if any of the elements of `a` evaluate to True."}
{"text_id": 1101438, "text": "any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101439, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101440, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101441, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101442, "text": "any(a, *args, **params): any(self, axis=None, out=None, keepdims=<no value>) Returns True if any of the elements of `a` evaluate to True."}
{"text_id": 1101443, "text": "any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101444, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101445, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101446, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101447, "text": "any(a, *args, **params): any(self, axis=None, out=None, keepdims=<no value>) Returns True if any of the elements of `a` evaluate to True."}
{"text_id": 1101448, "text": "any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101449, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101450, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101451, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101452, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101453, "text": "any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101454, "text": "any(a, *args, **params): any(self, axis=None, out=None, keepdims=<no value>) Returns True if any of the elements of `a` evaluate to True."}
{"text_id": 1101455, "text": "any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True."}
{"text_id": 1101456, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101457, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101458, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101459, "text": "append(a, b, axis=None): Append values to the end of an array."}
{"text_id": 1101460, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101461, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101462, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101463, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101464, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101465, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101466, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101467, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101468, "text": "append(a, b, axis=None): Append values to the end of an array."}
{"text_id": 1101469, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101470, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101471, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101472, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101473, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101474, "text": "append(a, b, axis=None): Append values to the end of an array."}
{"text_id": 1101475, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101476, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101477, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101478, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101479, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101480, "text": "append(a, b, axis=None): Append values to the end of an array."}
{"text_id": 1101481, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101482, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101483, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101484, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101485, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101486, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101487, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101488, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101489, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101490, "text": "append(self, v, /): Append new value v to the end of the array."}
{"text_id": 1101491, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101492, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101493, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101494, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101495, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101496, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101497, "text": "append(object, /): Append object to the end of the list."}
{"text_id": 1101498, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101499, "text": "append(arr, values, axis=None): Append values to the end of an array."}
{"text_id": 1101500, "text": "append(a, b, axis=None): Append values to the end of an array."}
{"text_id": 1101501, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101502, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101503, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101504, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101505, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101506, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101507, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101508, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101509, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101510, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101511, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101512, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101513, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101514, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101515, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101516, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101517, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101518, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101519, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101520, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101521, "text": "apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis."}
{"text_id": 1101522, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101523, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101524, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101525, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101526, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101527, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101528, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101529, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101530, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101531, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101532, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101533, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101534, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101535, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101536, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101537, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101538, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101539, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101540, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101541, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101542, "text": "apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes."}
{"text_id": 1101543, "text": "arange(start, stop=None, step=1, dtype=None, ctx=None): Return evenly spaced values within a given interval."}
{"text_id": 1101544, "text": "arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval."}
{"text_id": 1101545, "text": "arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval."}
{"text_id": 1101546, "text": "arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval."}
{"text_id": 1101547, "text": "arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval."}
{"text_id": 1101548, "text": "arange(start, stop=None, step=1, dtype=None, ctx=None): Return evenly spaced values within a given interval."}
{"text_id": 1101549, "text": "arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval."}
{"text_id": 1101550, "text": "arccos(x, out=None, **kwargs): Trigonometric inverse cosine, element-wise."}
{"text_id": 1101551, "text": "arccos(x): Compute the inverse cosine of x."}
{"text_id": 1101552, "text": "arccos(a, *args, **kwargs): arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise."}
{"text_id": 1101553, "text": "arccos(x): Compute the inverse cosine of x."}
{"text_id": 1101554, "text": "arccos(a, *args, **kwargs): arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise."}
{"text_id": 1101555, "text": "arccos(x): Compute the inverse cosine of x."}
{"text_id": 1101556, "text": "arccos(a, *args, **kwargs): arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise."}
{"text_id": 1101557, "text": "arccos(x): Compute the inverse cosine of x."}
{"text_id": 1101558, "text": "arccos(a, *args, **kwargs): arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise."}
{"text_id": 1101559, "text": "arccos(self, *args, **kwargs): Convenience fluent method for :py:func:`arccos`."}
{"text_id": 1101560, "text": "arccos(x, out=None, **kwargs): Trigonometric inverse cosine, element-wise."}
{"text_id": 1101561, "text": "arccos(self, *args, **kwargs): Convenience fluent method for :py:func:`arccos`."}
{"text_id": 1101562, "text": "arccos(self, *args, **kwargs): Convenience fluent method for :py:func:`arccos`."}
{"text_id": 1101563, "text": "arccos(x): Compute the inverse cosine of x."}
{"text_id": 1101564, "text": "arccos(a, *args, **kwargs): arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse cosine, element-wise."}
{"text_id": 1101565, "text": "arccosh(x, out=None, **kwargs): Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101566, "text": "arccosh(a, *args, **kwargs): arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101567, "text": "arccosh(a, *args, **kwargs): arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101568, "text": "arccosh(a, *args, **kwargs): arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101569, "text": "arccosh(a, *args, **kwargs): arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101570, "text": "arccosh(self, *args, **kwargs): Convenience fluent method for :py:func:`arccosh`."}
{"text_id": 1101571, "text": "arccosh(x, out=None, **kwargs): Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101572, "text": "arccosh(self, *args, **kwargs): Convenience fluent method for :py:func:`arccosh`."}
{"text_id": 1101573, "text": "arccosh(self, *args, **kwargs): Convenience fluent method for :py:func:`arccosh`."}
{"text_id": 1101574, "text": "arccosh(a, *args, **kwargs): arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101575, "text": "arcsin(x, out=None, **kwargs): Inverse sine, element-wise."}
{"text_id": 1101576, "text": "arcsin(x): Compute the inverse sine of x."}
{"text_id": 1101577, "text": "arcsin(a, *args, **kwargs): arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise."}
{"text_id": 1101578, "text": "arcsin(x): Compute the inverse sine of x."}
{"text_id": 1101579, "text": "arcsin(a, *args, **kwargs): arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise."}
{"text_id": 1101580, "text": "arcsin(x): Compute the inverse sine of x."}
{"text_id": 1101581, "text": "arcsin(a, *args, **kwargs): arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise."}
{"text_id": 1101582, "text": "arcsin(x): Compute the inverse sine of x."}
{"text_id": 1101583, "text": "arcsin(a, *args, **kwargs): arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise."}
{"text_id": 1101584, "text": "arcsin(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsin`."}
{"text_id": 1101585, "text": "arcsin(x, out=None, **kwargs): Inverse sine, element-wise."}
{"text_id": 1101586, "text": "arcsin(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsin`."}
{"text_id": 1101587, "text": "arcsin(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsin`."}
{"text_id": 1101588, "text": "arcsin(x): Compute the inverse sine of x."}
{"text_id": 1101589, "text": "arcsin(a, *args, **kwargs): arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse sine, element-wise."}
{"text_id": 1101590, "text": "arcsinh(x, out=None, **kwargs): Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101591, "text": "arcsinh(a, *args, **kwargs): arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise."}
{"text_id": 1101592, "text": "arcsinh(a, *args, **kwargs): arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise."}
{"text_id": 1101593, "text": "arcsinh(a, *args, **kwargs): arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise."}
{"text_id": 1101594, "text": "arcsinh(a, *args, **kwargs): arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise."}
{"text_id": 1101595, "text": "arcsinh(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsinh`."}
{"text_id": 1101596, "text": "arcsinh(x, out=None, **kwargs): Inverse hyperbolic cosine, element-wise."}
{"text_id": 1101597, "text": "arcsinh(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsinh`."}
{"text_id": 1101598, "text": "arcsinh(self, *args, **kwargs): Convenience fluent method for :py:func:`arcsinh`."}
{"text_id": 1101599, "text": "arcsinh(a, *args, **kwargs): arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic sine element-wise."}
{"text_id": 1101600, "text": "arctan(x, out=None, **kwargs): Trigonometric inverse tangent, element-wise."}
{"text_id": 1101601, "text": "arctan(a, *args, **kwargs): arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise."}
{"text_id": 1101602, "text": "arctan(a, *args, **kwargs): arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise."}
{"text_id": 1101603, "text": "arctan(a, *args, **kwargs): arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise."}
{"text_id": 1101604, "text": "arctan(a, *args, **kwargs): arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise."}
{"text_id": 1101605, "text": "arctan(self, *args, **kwargs): Convenience fluent method for :py:func:`arctan`."}
{"text_id": 1101606, "text": "arctan(x, out=None, **kwargs): Trigonometric inverse tangent, element-wise."}
{"text_id": 1101607, "text": "arctan(self, *args, **kwargs): Convenience fluent method for :py:func:`arctan`."}
{"text_id": 1101608, "text": "arctan(self, *args, **kwargs): Convenience fluent method for :py:func:`arctan`."}
{"text_id": 1101609, "text": "arctan(a, *args, **kwargs): arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric inverse tangent, element-wise."}
{"text_id": 1101610, "text": "arctan2(x1, x2, out=None, **kwargs): Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101611, "text": "arctan2(a, b, *args, **kwargs): arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101612, "text": "arctan2(a, b, *args, **kwargs): arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101613, "text": "arctan2(a, b, *args, **kwargs): arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101614, "text": "arctan2(a, b, *args, **kwargs): arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101615, "text": "arctan2(x1, x2, out=None, **kwargs): Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101616, "text": "arctan2(a, b, *args, **kwargs): arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly."}
{"text_id": 1101617, "text": "arctanh(x, out=None, **kwargs): Inverse hyperbolic tangent, element-wise."}
{"text_id": 1101618, "text": "arctanh(x): Compute the inverse hyperbolic tangent of `x`."}
{"text_id": 1101619, "text": "arctanh(a, *args, **kwargs): arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise."}
{"text_id": 1101620, "text": "arctanh(x): Compute the inverse hyperbolic tangent of `x`."}
{"text_id": 1101621, "text": "arctanh(a, *args, **kwargs): arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise."}
{"text_id": 1101622, "text": "arctanh(x): Compute the inverse hyperbolic tangent of `x`."}
{"text_id": 1101623, "text": "arctanh(a, *args, **kwargs): arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise."}
{"text_id": 1101624, "text": "arctanh(x): Compute the inverse hyperbolic tangent of `x`."}
{"text_id": 1101625, "text": "arctanh(a, *args, **kwargs): arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise."}
{"text_id": 1101626, "text": "arctanh(self, *args, **kwargs): Convenience fluent method for :py:func:`arctanh`."}
{"text_id": 1101627, "text": "arctanh(x, out=None, **kwargs): Inverse hyperbolic tangent, element-wise."}
{"text_id": 1101628, "text": "arctanh(self, *args, **kwargs): Convenience fluent method for :py:func:`arctanh`."}
{"text_id": 1101629, "text": "arctanh(self, *args, **kwargs): Convenience fluent method for :py:func:`arctanh`."}
{"text_id": 1101630, "text": "arctanh(x): Compute the inverse hyperbolic tangent of `x`."}
{"text_id": 1101631, "text": "arctanh(a, *args, **kwargs): arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Inverse hyperbolic tangent element-wise."}
{"text_id": 1101632, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101633, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101634, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101635, "text": "argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis."}
{"text_id": 1101636, "text": "argmax(self, axis=None, out=None): Indexes of the maximum values along an axis."}
{"text_id": 1101637, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101638, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101639, "text": "argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis."}
{"text_id": 1101640, "text": "argmax(self, axis=None, out=None): Indexes of the maximum values along an axis."}
{"text_id": 1101641, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101642, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101643, "text": "argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis."}
{"text_id": 1101644, "text": "argmax(self, axis=None, out=None): Indexes of the maximum values along an axis."}
{"text_id": 1101645, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101646, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101647, "text": "argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis."}
{"text_id": 1101648, "text": "argmax(self, axis=None, out=None): Indexes of the maximum values along an axis."}
{"text_id": 1101649, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101650, "text": "argmax(self, *args, **kwargs): Convenience fluent method for :py:func:`argmax`."}
{"text_id": 1101651, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101652, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101653, "text": "argmax(self, axis=None, out=None): Return indices of the maximum values along the given axis."}
{"text_id": 1101654, "text": "argmax(self, axis=None, out=None): Return indices of the maximum values along the given axis."}
{"text_id": 1101655, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101656, "text": "argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis."}
{"text_id": 1101657, "text": "argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis."}
{"text_id": 1101658, "text": "argmax(self, axis=None, out=None): Indexes of the maximum values along an axis."}
{"text_id": 1101659, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101660, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101661, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101662, "text": "argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis."}
{"text_id": 1101663, "text": "argmin(self, axis=None, out=None): Indexes of the minimum values along an axis."}
{"text_id": 1101664, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101665, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101666, "text": "argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis."}
{"text_id": 1101667, "text": "argmin(self, axis=None, out=None): Indexes of the minimum values along an axis."}
{"text_id": 1101668, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101669, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101670, "text": "argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis."}
{"text_id": 1101671, "text": "argmin(self, axis=None, out=None): Indexes of the minimum values along an axis."}
{"text_id": 1101672, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101673, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101674, "text": "argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis."}
{"text_id": 1101675, "text": "argmin(self, axis=None, out=None): Indexes of the minimum values along an axis."}
{"text_id": 1101676, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101677, "text": "argmin(self, *args, **kwargs): Convenience fluent method for :py:func:`argmin`."}
{"text_id": 1101678, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101679, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101680, "text": "argmin(self, axis=None, out=None): Return indices of the minium values along the given axis."}
{"text_id": 1101681, "text": "argmin(self, axis=None, out=None): Return indices of the minium values along the given axis."}
{"text_id": 1101682, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101683, "text": "argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis."}
{"text_id": 1101684, "text": "argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis."}
{"text_id": 1101685, "text": "argmin(self, axis=None, out=None): Indexes of the minimum values along an axis."}
{"text_id": 1101686, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101687, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101688, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101689, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101690, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101691, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101692, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101693, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101694, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101695, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101696, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101697, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101698, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101699, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101700, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101701, "text": "argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword."}
{"text_id": 1101702, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101703, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101704, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101705, "text": "argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None): Return an ndarray of indices that sort the array along the specified axis."}
{"text_id": 1101706, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101707, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101708, "text": "argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None): Return an ndarray of indices that sort the array along the specified axis."}
{"text_id": 1101709, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101710, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101711, "text": "argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None): Return an ndarray of indices that sort the array along the specified axis."}
{"text_id": 1101712, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101713, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101714, "text": "argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None): Return an ndarray of indices that sort the array along the specified axis."}
{"text_id": 1101715, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101716, "text": "argsort(self, *args, **kwargs): Convenience fluent method for :py:func:`argsort`."}
{"text_id": 1101717, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101718, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101719, "text": "argsort(self, axis=-1, kind=None, order=None): Convenience fluent method for :py:func:`argsort`."}
{"text_id": 1101720, "text": "argsort(self, axis=-1, kind=None, order=None): Convenience fluent method for :py:func:`argsort`."}
{"text_id": 1101721, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101722, "text": "argsort(a, axis=-1, kind=None, order=None): Returns the indices that would sort an array."}
{"text_id": 1101723, "text": "argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None): Return an ndarray of indices that sort the array along the specified axis."}
{"text_id": 1101724, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101725, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101726, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101727, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101728, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101729, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101730, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101731, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101732, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101733, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101734, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101735, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101736, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101737, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101738, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101739, "text": "argwhere(a): Find the indices of array elements that are non-zero, grouped by element."}
{"text_id": 1101740, "text": "around(x, decimals=0, out=None, **kwargs): around(x, decimals=0, out=None) Evenly round to the given number of decimals."}
{"text_id": 1101741, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101742, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101743, "text": "around(a, *args, **kwargs): Round an array to the given number of decimals."}
{"text_id": 1101744, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101745, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101746, "text": "around(a, *args, **kwargs): Round an array to the given number of decimals."}
{"text_id": 1101747, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101748, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101749, "text": "around(a, *args, **kwargs): Round an array to the given number of decimals."}
{"text_id": 1101750, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101751, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101752, "text": "around(a, *args, **kwargs): Round an array to the given number of decimals."}
{"text_id": 1101753, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101754, "text": "around(x, decimals=0, out=None, **kwargs): around(x, decimals=0, out=None) Evenly round to the given number of decimals."}
{"text_id": 1101755, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101756, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101757, "text": "around(a, decimals=0, out=None): Evenly round to the given number of decimals."}
{"text_id": 1101758, "text": "around(a, *args, **kwargs): Round an array to the given number of decimals."}
{"text_id": 1101759, "text": "array(object, dtype=None, ctx=None): Create an array."}
{"text_id": 1101760, "text": "array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`."}
{"text_id": 1101761, "text": "array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values."}
{"text_id": 1101762, "text": "array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects."}
{"text_id": 1101763, "text": "array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`."}
{"text_id": 1101764, "text": "array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values."}
{"text_id": 1101765, "text": "array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects."}
{"text_id": 1101766, "text": "array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`."}
{"text_id": 1101767, "text": "array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values."}
{"text_id": 1101768, "text": "array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects."}
{"text_id": 1101769, "text": "array(object, dtype=None, ctx=None): Create an array."}
{"text_id": 1101770, "text": "array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`."}
{"text_id": 1101771, "text": "array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values."}
{"text_id": 1101772, "text": "array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects."}
{"text_id": 1101773, "text": "array(object, dtype=None, ctx=None): Create an array."}
{"text_id": 1101774, "text": "array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`."}
{"text_id": 1101775, "text": "array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values."}
{"text_id": 1101776, "text": "array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects."}
{"text_id": 1101777, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101778, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101779, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101780, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101781, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101782, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101783, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101784, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101785, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101786, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101787, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101788, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101789, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101790, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101791, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101792, "text": "array_equal(a1, a2, equal_nan=False): True if two arrays have the same shape and elements, False otherwise."}
{"text_id": 1101793, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101794, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101795, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101796, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101797, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101798, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101799, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101800, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101801, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101802, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101803, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101804, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101805, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101806, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101807, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101808, "text": "array_equiv(a1, a2): Returns True if input arrays are shape consistent and all elements equal."}
{"text_id": 1101809, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101810, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101811, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101812, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101813, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101814, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101815, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101816, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101817, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101818, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101819, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101820, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101821, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101822, "text": "array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1101823, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101824, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101825, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101826, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101827, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101828, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101829, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101830, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101831, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101832, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101833, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101834, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101835, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101836, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101837, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101838, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101839, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101840, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101841, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101842, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101843, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101844, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101845, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101846, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101847, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101848, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101849, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101850, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101851, "text": "bit_length(self, /): Number of bits necessary to represent self in binary."}
{"text_id": 1101852, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101853, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101854, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101855, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101856, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101857, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101858, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101859, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101860, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101861, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101862, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101863, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101864, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101865, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101866, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101867, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101868, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101869, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101870, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101871, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101872, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101873, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101874, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101875, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101876, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101877, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101878, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101879, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101880, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101881, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101882, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101883, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101884, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101885, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101886, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101887, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101888, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101889, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101890, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101891, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101892, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101893, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101894, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101895, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101896, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101897, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101898, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101899, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101900, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101901, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101902, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101903, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101904, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101905, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101906, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101907, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101908, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101909, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101910, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101911, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101912, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101913, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101914, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101915, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101916, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101917, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101918, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101919, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101920, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101921, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101922, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101923, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101924, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101925, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101926, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101927, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101928, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101929, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101930, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101931, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101932, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101933, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101934, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101935, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101936, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101937, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101938, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101939, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101940, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101941, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101942, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101943, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101944, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101945, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101946, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101947, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101948, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101949, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101950, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101951, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101952, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101953, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101954, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101955, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101956, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101957, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101958, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101959, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101960, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101961, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101962, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101963, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101964, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101965, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101966, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101967, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101968, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101969, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101970, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101971, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101972, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101973, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101974, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101975, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101976, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101977, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101978, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101979, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101980, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101981, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101982, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101983, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101984, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101985, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101986, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101987, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101988, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101989, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101990, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101991, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101992, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101993, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101994, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101995, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101996, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101997, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101998, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1101999, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102000, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102001, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102002, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102003, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102004, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102005, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102006, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102007, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102008, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102009, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102010, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102011, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102012, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102013, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102014, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102015, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102016, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102017, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102018, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102019, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102020, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102021, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102022, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102023, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102024, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102025, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102026, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102027, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102028, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102029, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102030, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102031, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102032, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102033, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102034, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102035, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102036, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102037, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102038, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102039, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102040, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102041, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102042, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102043, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102044, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102045, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102046, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102047, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102048, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102049, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102050, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102051, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102052, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102053, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102054, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102055, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102056, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102057, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102058, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102059, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102060, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102061, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102062, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102063, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102064, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102065, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102066, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102067, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102068, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102069, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102070, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102071, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102072, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102073, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102074, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102075, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102076, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102077, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102078, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102079, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102080, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102081, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102082, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102083, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102084, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102085, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102086, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102087, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102088, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102089, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102090, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102091, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102092, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102093, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102094, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102095, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102096, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102097, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102098, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102099, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102100, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102101, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102102, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102103, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102104, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102105, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102106, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102107, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102108, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102109, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102110, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102111, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102112, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102113, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102114, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102115, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102116, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102117, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102118, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102119, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102120, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102121, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102122, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102123, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102124, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102125, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102126, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102127, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102128, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102129, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102130, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102131, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102132, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102133, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102134, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102135, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102136, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102137, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102138, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102139, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102140, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102141, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102142, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102143, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102144, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102145, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102146, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102147, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102148, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102149, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102150, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102151, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102152, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102153, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102154, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102155, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102156, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102157, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102158, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102159, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102160, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102161, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102162, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102163, "text": "bit_length(self, /): Number of bits necessary to represent self in binary."}
{"text_id": 1102164, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102165, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102166, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102167, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102168, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102169, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102170, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102171, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102172, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102173, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102174, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102175, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102176, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102177, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102178, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102179, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102180, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102181, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102182, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102183, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102184, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102185, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102186, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102187, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102188, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102189, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102190, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102191, "text": "bit_length(): Number of bits necessary to represent self in binary."}
{"text_id": 1102192, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102193, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102194, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102195, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102196, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102197, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102198, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102199, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102200, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102201, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102202, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102203, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102204, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102205, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102206, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102207, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102208, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102209, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102210, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102211, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102212, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102213, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102214, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102215, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102216, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102217, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102218, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102219, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102220, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102221, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102222, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102223, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102224, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102225, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102226, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102227, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102228, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102229, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102230, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102231, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102232, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102233, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102234, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102235, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102236, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102237, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102238, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102239, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102240, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102241, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102242, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102243, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102244, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102245, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102246, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102247, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102248, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102249, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102250, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102251, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102252, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102253, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102254, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102255, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102256, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102257, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102258, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102259, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102260, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102261, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102262, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102263, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102264, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102265, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102266, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102267, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102268, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102269, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102270, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102271, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102272, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102273, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102274, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102275, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102276, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102277, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102278, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102279, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102280, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102281, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102282, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102283, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102284, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102285, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102286, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102287, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102288, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102289, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102290, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102291, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102292, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102293, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102294, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102295, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102296, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102297, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102298, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102299, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102300, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102301, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102302, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102303, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102304, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102305, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102306, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102307, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102308, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102309, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102310, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102311, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102312, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102313, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102314, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102315, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102316, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102317, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102318, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102319, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102320, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102321, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102322, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102323, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102324, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102325, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102326, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102327, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102328, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102329, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102330, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102331, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102332, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102333, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102334, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102335, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102336, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102337, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102338, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102339, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102340, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102341, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102342, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102343, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102344, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102345, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102346, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102347, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102348, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102349, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102350, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102351, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102352, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102353, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102354, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102355, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102356, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102357, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102358, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102359, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102360, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102361, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102362, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102363, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102364, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102365, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102366, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102367, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102368, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102369, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102370, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102371, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102372, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102373, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102374, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102375, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102376, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102377, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102378, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102379, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102380, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102381, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102382, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102383, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102384, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102385, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102386, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102387, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102388, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102389, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102390, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102391, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102392, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102393, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102394, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102395, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102396, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102397, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102398, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102399, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102400, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102401, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102402, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102403, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102404, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102405, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102406, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102407, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102408, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102409, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102410, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102411, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102412, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102413, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102414, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102415, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102416, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102417, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102418, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102419, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102420, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102421, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102422, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102423, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102424, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102425, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102426, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102427, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102428, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102429, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102430, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102431, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102432, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102433, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102434, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102435, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102436, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102437, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102438, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102439, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102440, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102441, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102442, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102443, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102444, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102445, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102446, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102447, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102448, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102449, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102450, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102451, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102452, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102453, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102454, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102455, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102456, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102457, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102458, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102459, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102460, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102461, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102462, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102463, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102464, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102465, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102466, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102467, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102468, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102469, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102470, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102471, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102472, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102473, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102474, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102475, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102476, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102477, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102478, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102479, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102480, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102481, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102482, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102483, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102484, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102485, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102486, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102487, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102488, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102489, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102490, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102491, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102492, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102493, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102494, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102495, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102496, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102497, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102498, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102499, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102500, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102501, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102502, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102503, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102504, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102505, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102506, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102507, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102508, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102509, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102510, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102511, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102512, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102513, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102514, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102515, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102516, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102517, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102518, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102519, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102520, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102521, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102522, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102523, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102524, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102525, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102526, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102527, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102528, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102529, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102530, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102531, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102532, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102533, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102534, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102535, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102536, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102537, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102538, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102539, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102540, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102541, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102542, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102543, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102544, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102545, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102546, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102547, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102548, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102549, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102550, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102551, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102552, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102553, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102554, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102555, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102556, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102557, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102558, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102559, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102560, "text": "from_bytes(bytes, byteorder, *, signed=False): Return the integer represented by the given array of bytes."}
{"text_id": 1102561, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102562, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102563, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102564, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102565, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102566, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102567, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102568, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102569, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102570, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102571, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102572, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102573, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102574, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102575, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102576, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102577, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102578, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102579, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102580, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102581, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102582, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102583, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102584, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102585, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102586, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102587, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102588, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102589, "text": "to_bytes(self, /, length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102590, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102591, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102592, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102593, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102594, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102595, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102596, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102597, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102598, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102599, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102600, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102601, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102602, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102603, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102604, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102605, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102606, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102607, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102608, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102609, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102610, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102611, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102612, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102613, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102614, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102615, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102616, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102617, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102618, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102619, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102620, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102621, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102622, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102623, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102624, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102625, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102626, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102627, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102628, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102629, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102630, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102631, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102632, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102633, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102634, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102635, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102636, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102637, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102638, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102639, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102640, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102641, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102642, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102643, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102644, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102645, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102646, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102647, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102648, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102649, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102650, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102651, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102652, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102653, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102654, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102655, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102656, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102657, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102658, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102659, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102660, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102661, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102662, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102663, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102664, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102665, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102666, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102667, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102668, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102669, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102670, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102671, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102672, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102673, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102674, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102675, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102676, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102677, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102678, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102679, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102680, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102681, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102682, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102683, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102684, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102685, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102686, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102687, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102688, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102689, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102690, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102691, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102692, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102693, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102694, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102695, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102696, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102697, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102698, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102699, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102700, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102701, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102702, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102703, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102704, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102705, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102706, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102707, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102708, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102709, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102710, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102711, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102712, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102713, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102714, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102715, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102716, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102717, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102718, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102719, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102720, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102721, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102722, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102723, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102724, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102725, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102726, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102727, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102728, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102729, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102730, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102731, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102732, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102733, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102734, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102735, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102736, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102737, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102738, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102739, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102740, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102741, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102742, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102743, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102744, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102745, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102746, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102747, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102748, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102749, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102750, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102751, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102752, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102753, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102754, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102755, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102756, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102757, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102758, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102759, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102760, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102761, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102762, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102763, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102764, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102765, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102766, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102767, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102768, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102769, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102770, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102771, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102772, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102773, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102774, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102775, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102776, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102777, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102778, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102779, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102780, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102781, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102782, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102783, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102784, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102785, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102786, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102787, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102788, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102789, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102790, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102791, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102792, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102793, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102794, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102795, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102796, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102797, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102798, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102799, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102800, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102801, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102802, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102803, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102804, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102805, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102806, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102807, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102808, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102809, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102810, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102811, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102812, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102813, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102814, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102815, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102816, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102817, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102818, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102819, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102820, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102821, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102822, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102823, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102824, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102825, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102826, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102827, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102828, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102829, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102830, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102831, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102832, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102833, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102834, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102835, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102836, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102837, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102838, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102839, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102840, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102841, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102842, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102843, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102844, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102845, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102846, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102847, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102848, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102849, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102850, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102851, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102852, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102853, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102854, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102855, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102856, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102857, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102858, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102859, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102860, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102861, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102862, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102863, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102864, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102865, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102866, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102867, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102868, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102869, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102870, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102871, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102872, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102873, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102874, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102875, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102876, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102877, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102878, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102879, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102880, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102881, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102882, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102883, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102884, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102885, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102886, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102887, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102888, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102889, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102890, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102891, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102892, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102893, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102894, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102895, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102896, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102897, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102898, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102899, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102900, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102901, "text": "to_bytes(self, /, length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102902, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102903, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102904, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102905, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102906, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102907, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102908, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102909, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102910, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102911, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102912, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102913, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102914, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102915, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102916, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102917, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102918, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102919, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102920, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102921, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102922, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102923, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102924, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102925, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102926, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102927, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102928, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102929, "text": "to_bytes(length, byteorder, *, signed=False): Return an array of bytes representing an integer."}
{"text_id": 1102930, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102931, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102932, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102933, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102934, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102935, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102936, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102937, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102938, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102939, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102940, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102941, "text": "AxisError(axis, ndim=None, msg_prefix=None): Axis supplied was invalid."}
{"text_id": 1102942, "text": "astype(self, dtype, copy=True): Returns a copy of the array after casting to a specified type."}
{"text_id": 1102943, "text": "astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type."}
{"text_id": 1102944, "text": "astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type."}
{"text_id": 1102945, "text": "byteswap(self, /): Byteswap all items of the array."}
{"text_id": 1102946, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102947, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102948, "text": "capitalize(a): Return a copy of `a` with only the first character of each element capitalized."}
{"text_id": 1102949, "text": "capitalize(self): Return a copy of `self` with only the first character of each element capitalized."}
{"text_id": 1102950, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102951, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102952, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102953, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102954, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102955, "text": "capitalize(a): Return a copy of `a` with only the first character of each element capitalized."}
{"text_id": 1102956, "text": "capitalize(self): Return a copy of `self` with only the first character of each element capitalized."}
{"text_id": 1102957, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102958, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102959, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102960, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102961, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102962, "text": "capitalize(a): Return a copy of `a` with only the first character of each element capitalized."}
{"text_id": 1102963, "text": "capitalize(self): Return a copy of `self` with only the first character of each element capitalized."}
{"text_id": 1102964, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102965, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102966, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102967, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102968, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102969, "text": "capitalize(a): Return a copy of `a` with only the first character of each element capitalized."}
{"text_id": 1102970, "text": "capitalize(self): Return a copy of `self` with only the first character of each element capitalized."}
{"text_id": 1102971, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102972, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102973, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102974, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102975, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102976, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102977, "text": "capitalize(a): Return a copy of `a` with only the first character of each element capitalized."}
{"text_id": 1102978, "text": "capitalize(self): Return a copy of `self` with only the first character of each element capitalized."}
{"text_id": 1102979, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102980, "text": "capitalize(): Return a capitalized version of the string."}
{"text_id": 1102981, "text": "capitalize(self, /): Return a capitalized version of the string."}
{"text_id": 1102982, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1102983, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102984, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102985, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1102986, "text": "center(a, width, fillchar=' '): Return a copy of `a` with its elements centered in a string of length `width`."}
{"text_id": 1102987, "text": "center(self, width, fillchar=' '): Return a copy of `self` with its elements centered in a string of length `width`."}
{"text_id": 1102988, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102989, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102990, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102991, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1102992, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102993, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102994, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1102995, "text": "center(a, width, fillchar=' '): Return a copy of `a` with its elements centered in a string of length `width`."}
{"text_id": 1102996, "text": "center(self, width, fillchar=' '): Return a copy of `self` with its elements centered in a string of length `width`."}
{"text_id": 1102997, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102998, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1102999, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103000, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103001, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103002, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103003, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103004, "text": "center(a, width, fillchar=' '): Return a copy of `a` with its elements centered in a string of length `width`."}
{"text_id": 1103005, "text": "center(self, width, fillchar=' '): Return a copy of `self` with its elements centered in a string of length `width`."}
{"text_id": 1103006, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103007, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103008, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103009, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103010, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103011, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103012, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103013, "text": "center(a, width, fillchar=' '): Return a copy of `a` with its elements centered in a string of length `width`."}
{"text_id": 1103014, "text": "center(self, width, fillchar=' '): Return a copy of `self` with its elements centered in a string of length `width`."}
{"text_id": 1103015, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103016, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103017, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103018, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103019, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103020, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103021, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103022, "text": "center(self, width, fillchar=b' ', /): Return a centered string of length width."}
{"text_id": 1103023, "text": "center(a, width, fillchar=' '): Return a copy of `a` with its elements centered in a string of length `width`."}
{"text_id": 1103024, "text": "center(self, width, fillchar=' '): Return a copy of `self` with its elements centered in a string of length `width`."}
{"text_id": 1103025, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103026, "text": "center(width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103027, "text": "center(self, width, fillchar=' ', /): Return a centered string of length width."}
{"text_id": 1103028, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103029, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103030, "text": "choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices."}
{"text_id": 1103031, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103032, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103033, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103034, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103035, "text": "choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices."}
{"text_id": 1103036, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103037, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103038, "text": "choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices."}
{"text_id": 1103039, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103040, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103041, "text": "choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices."}
{"text_id": 1103042, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103043, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103044, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103045, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103046, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103047, "text": "choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from."}
{"text_id": 1103048, "text": "choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices."}
{"text_id": 1103049, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103050, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103051, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103052, "text": "clip(a, a_min, a_max, out=None): clip(a, a_min, a_max, out=None) Clip (limit) the values in an array."}
{"text_id": 1103053, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103054, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103055, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103056, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103057, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103058, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103059, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103060, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103061, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103062, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103063, "text": "clip(self, *args, **kwargs): Convenience fluent method for :py:func:`clip`."}
{"text_id": 1103064, "text": "clip(a, a_min, a_max, out=None): clip(a, a_min, a_max, out=None) Clip (limit) the values in an array."}
{"text_id": 1103065, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103066, "text": "clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max]."}
{"text_id": 1103067, "text": "clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max]."}
{"text_id": 1103068, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103069, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103070, "text": "clip(a, a_min, a_max, out=None, **kwargs): Clip (limit) the values in an array."}
{"text_id": 1103071, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103072, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103073, "text": "compress(a, *args, **params): compress(self, condition, axis=None, out=None) Return `a` where condition is ``True``."}
{"text_id": 1103074, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103075, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103076, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103077, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103078, "text": "compress(a, *args, **params): compress(self, condition, axis=None, out=None) Return `a` where condition is ``True``."}
{"text_id": 1103079, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103080, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103081, "text": "compress(a, *args, **params): compress(self, condition, axis=None, out=None) Return `a` where condition is ``True``."}
{"text_id": 1103082, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103083, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103084, "text": "compress(a, *args, **params): compress(self, condition, axis=None, out=None) Return `a` where condition is ``True``."}
{"text_id": 1103085, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103086, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103087, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103088, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103089, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103090, "text": "compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis."}
{"text_id": 1103091, "text": "compress(a, *args, **params): compress(self, condition, axis=None, out=None) Return `a` where condition is ``True``."}
{"text_id": 1103092, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103093, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103094, "text": "copy(a, *args, **params): copy(self, *args, **params) a."}
{"text_id": 1103095, "text": "copy(a, out=None): Return an array copy of the given object."}
{"text_id": 1103096, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103097, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103098, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103099, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103100, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103101, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103102, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103103, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103104, "text": "copy(a, *args, **params): copy(self, *args, **params) a."}
{"text_id": 1103105, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103106, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103107, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103108, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103109, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103110, "text": "copy(a, *args, **params): copy(self, *args, **params) a."}
{"text_id": 1103111, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103112, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103113, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103114, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103115, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103116, "text": "copy(a, *args, **params): copy(self, *args, **params) a."}
{"text_id": 1103117, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103118, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103119, "text": "copy(self): Makes a copy of this ``NDArray``, keeping the same context."}
{"text_id": 1103120, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103121, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103122, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103123, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103124, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103125, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103126, "text": "copy(self, order='C'): Return a coyp of the array, keeping the same context."}
{"text_id": 1103127, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103128, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103129, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103130, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103131, "text": "copy(self, order='C'): Return a coyp of the array, keeping the same context."}
{"text_id": 1103132, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103133, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103134, "text": "copy(): Return a shallow copy of the list."}
{"text_id": 1103135, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103136, "text": "copy(a, order='K', subok=False): Return an array copy of the given object."}
{"text_id": 1103137, "text": "copy(a, *args, **params): copy(self, *args, **params) a."}
{"text_id": 1103138, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103139, "text": "count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103140, "text": "count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103141, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103142, "text": "count(a, *args, **params): count(self, axis=None, keepdims=<no value>) Count the non-masked elements of the array along the given axis."}
{"text_id": 1103143, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103144, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103145, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103146, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103147, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103148, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103149, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103150, "text": "count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103151, "text": "count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103152, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103153, "text": "count(a, *args, **params): count(self, axis=None, keepdims=<no value>) Count the non-masked elements of the array along the given axis."}
{"text_id": 1103154, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103155, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103156, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103157, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103158, "text": "count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103159, "text": "count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103160, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103161, "text": "count(a, *args, **params): count(self, axis=None, keepdims=<no value>) Count the non-masked elements of the array along the given axis."}
{"text_id": 1103162, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103163, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103164, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103165, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103166, "text": "count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103167, "text": "count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103168, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103169, "text": "count(a, *args, **params): count(self, axis=None, keepdims=<no value>) Count the non-masked elements of the array along the given axis."}
{"text_id": 1103170, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103171, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103172, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103173, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103174, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103175, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103176, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103177, "text": "count(self, v, /): Return number of occurrences of v in the array."}
{"text_id": 1103178, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103179, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103180, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103181, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103182, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103183, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103184, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103185, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103186, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103187, "text": "count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103188, "text": "count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`]."}
{"text_id": 1103189, "text": "count(value, /): Return number of occurrences of value."}
{"text_id": 1103190, "text": "count(a, *args, **params): count(self, axis=None, keepdims=<no value>) Count the non-masked elements of the array along the given axis."}
{"text_id": 1103191, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103192, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103193, "text": "cumprod(a, *args, **params): cumprod(self, axis=None, dtype=None, out=None) Return the cumulative product of the array elements over the given axis."}
{"text_id": 1103194, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103195, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103196, "text": "cumprod(a, *args, **params): cumprod(self, axis=None, dtype=None, out=None) Return the cumulative product of the array elements over the given axis."}
{"text_id": 1103197, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103198, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103199, "text": "cumprod(a, *args, **params): cumprod(self, axis=None, dtype=None, out=None) Return the cumulative product of the array elements over the given axis."}
{"text_id": 1103200, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103201, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103202, "text": "cumprod(a, *args, **params): cumprod(self, axis=None, dtype=None, out=None) Return the cumulative product of the array elements over the given axis."}
{"text_id": 1103203, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103204, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103205, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103206, "text": "cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis."}
{"text_id": 1103207, "text": "cumprod(a, *args, **params): cumprod(self, axis=None, dtype=None, out=None) Return the cumulative product of the array elements over the given axis."}
{"text_id": 1103208, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103209, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103210, "text": "cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis."}
{"text_id": 1103211, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103212, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103213, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103214, "text": "cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis."}
{"text_id": 1103215, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103216, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103217, "text": "cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis."}
{"text_id": 1103218, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103219, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103220, "text": "cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis."}
{"text_id": 1103221, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103222, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103223, "text": "cumsum(self, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along the given axis."}
{"text_id": 1103224, "text": "cumsum(self, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along the given axis."}
{"text_id": 1103225, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103226, "text": "cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis."}
{"text_id": 1103227, "text": "cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis."}
{"text_id": 1103228, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103229, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103230, "text": "decode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1103231, "text": "decode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1103232, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103233, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103234, "text": "decode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1103235, "text": "decode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1103236, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103237, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103238, "text": "decode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1103239, "text": "decode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1103240, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103241, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103242, "text": "decode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1103243, "text": "decode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1103244, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103245, "text": "decode(self, /, encoding='utf-8', errors='strict'): Decode the bytes using the codec registered for encoding."}
{"text_id": 1103246, "text": "decode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1103247, "text": "decode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1103248, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103249, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103250, "text": "diagonal(a, *args, **params): diagonal(self, *args, **params) a."}
{"text_id": 1103251, "text": "diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i."}
{"text_id": 1103252, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103253, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103254, "text": "diagonal(a, *args, **params): diagonal(self, *args, **params) a."}
{"text_id": 1103255, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103256, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103257, "text": "diagonal(a, *args, **params): diagonal(self, *args, **params) a."}
{"text_id": 1103258, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103259, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103260, "text": "diagonal(a, *args, **params): diagonal(self, *args, **params) a."}
{"text_id": 1103261, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103262, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103263, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103264, "text": "diagonal(a, offset=0, axis1=0, axis2=1): Return specified diagonals."}
{"text_id": 1103265, "text": "diagonal(a, *args, **params): diagonal(self, *args, **params) a."}
{"text_id": 1103266, "text": "endswith(a, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`."}
{"text_id": 1103267, "text": "endswith(self, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` ends with `suffix`, otherwise `False`."}
{"text_id": 1103268, "text": "endswith(a, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`."}
{"text_id": 1103269, "text": "endswith(self, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` ends with `suffix`, otherwise `False`."}
{"text_id": 1103270, "text": "endswith(a, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`."}
{"text_id": 1103271, "text": "endswith(self, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` ends with `suffix`, otherwise `False`."}
{"text_id": 1103272, "text": "endswith(a, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`."}
{"text_id": 1103273, "text": "endswith(self, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` ends with `suffix`, otherwise `False`."}
{"text_id": 1103274, "text": "endswith(a, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`."}
{"text_id": 1103275, "text": "endswith(self, suffix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` ends with `suffix`, otherwise `False`."}
{"text_id": 1103276, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103277, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103278, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103279, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103280, "text": "expandtabs(a, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103281, "text": "expandtabs(self, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103282, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103283, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103284, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103285, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103286, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103287, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103288, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103289, "text": "expandtabs(a, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103290, "text": "expandtabs(self, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103291, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103292, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103293, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103294, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103295, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103296, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103297, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103298, "text": "expandtabs(a, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103299, "text": "expandtabs(self, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103300, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103301, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103302, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103303, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103304, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103305, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103306, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103307, "text": "expandtabs(a, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103308, "text": "expandtabs(self, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103309, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103310, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103311, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103312, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103313, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103314, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103315, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103316, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103317, "text": "expandtabs(a, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103318, "text": "expandtabs(self, tabsize=8): Return a copy of each string element where all tab characters are replaced by one or more spaces."}
{"text_id": 1103319, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103320, "text": "expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103321, "text": "expandtabs(self, /, tabsize=8): Return a copy where all tab characters are expanded using spaces."}
{"text_id": 1103322, "text": "find(a, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103323, "text": "find(self, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103324, "text": "find(a, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103325, "text": "find(self, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103326, "text": "find(a, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103327, "text": "find(self, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103328, "text": "find(a, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103329, "text": "find(self, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103330, "text": "find(a, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103331, "text": "find(self, sub, start=0, end=None): For each element, return the lowest index in the string where substring `sub` is found."}
{"text_id": 1103332, "text": "flatten(self, order='C'): Return a flattened copy of the matrix."}
{"text_id": 1103333, "text": "flatten(self, order='C'): Return a flattened copy of the matrix."}
{"text_id": 1103334, "text": "flatten(self, order='C'): Return a flattened copy of the matrix."}
{"text_id": 1103335, "text": "flatten(self, order='C'): Return a flattened copy of the matrix."}
{"text_id": 1103336, "text": "flatten(self, inplace=False): Flatten this array without altering any data."}
{"text_id": 1103337, "text": "flatten(self, order='C'): Return a copy of the array collapsed into one dimension."}
{"text_id": 1103338, "text": "flatten(self, order='C'): Return a copy of the array collapsed into one dimension."}
{"text_id": 1103339, "text": "flatten(self, order='C'): Return a flattened copy of the matrix."}
{"text_id": 1103340, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103341, "text": "index(a, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103342, "text": "index(self, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103343, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103344, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103345, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103346, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103347, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103348, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103349, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103350, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103351, "text": "index(a, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103352, "text": "index(self, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103353, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103354, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103355, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103356, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103357, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103358, "text": "index(a, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103359, "text": "index(self, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103360, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103361, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103362, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103363, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103364, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103365, "text": "index(a, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103366, "text": "index(self, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103367, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103368, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103369, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103370, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103371, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103372, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103373, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103374, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103375, "text": "index(self, v, /): Return index of first occurrence of v in the array."}
{"text_id": 1103376, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103377, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103378, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103379, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103380, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103381, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103382, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103383, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103384, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103385, "text": "index(a, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103386, "text": "index(self, sub, start=0, end=None): Like `find`, but raises `ValueError` when the substring is not found."}
{"text_id": 1103387, "text": "index(value, start=0, stop=9223372036854775807, /): Return first index of value."}
{"text_id": 1103388, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103389, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103390, "text": "isalnum(a): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103391, "text": "isalnum(self): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103392, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103393, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103394, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103395, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103396, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103397, "text": "isalnum(a): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103398, "text": "isalnum(self): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103399, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103400, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103401, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103402, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103403, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103404, "text": "isalnum(a): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103405, "text": "isalnum(self): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103406, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103407, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103408, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103409, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103410, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103411, "text": "isalnum(a): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103412, "text": "isalnum(self): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103413, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103414, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103415, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103416, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103417, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103418, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103419, "text": "isalnum(a): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103420, "text": "isalnum(self): Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise."}
{"text_id": 1103421, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103422, "text": "isalnum(): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103423, "text": "isalnum(self, /): Return True if the string is an alpha-numeric string, False otherwise."}
{"text_id": 1103424, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103425, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103426, "text": "isalpha(a): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103427, "text": "isalpha(self): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103428, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103429, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103430, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103431, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103432, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103433, "text": "isalpha(a): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103434, "text": "isalpha(self): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103435, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103436, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103437, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103438, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103439, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103440, "text": "isalpha(a): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103441, "text": "isalpha(self): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103442, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103443, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103444, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103445, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103446, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103447, "text": "isalpha(a): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103448, "text": "isalpha(self): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103449, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103450, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103451, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103452, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103453, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103454, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103455, "text": "isalpha(a): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103456, "text": "isalpha(self): Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise."}
{"text_id": 1103457, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103458, "text": "isalpha(): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103459, "text": "isalpha(self, /): Return True if the string is an alphabetic string, False otherwise."}
{"text_id": 1103460, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103461, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103462, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103463, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103464, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103465, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103466, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103467, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103468, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103469, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103470, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103471, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103472, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103473, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103474, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103475, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103476, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103477, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103478, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103479, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103480, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103481, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103482, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103483, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103484, "text": "isascii(): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103485, "text": "isascii(self, /): Return True if all characters in the string are ASCII, False otherwise."}
{"text_id": 1103486, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103487, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103488, "text": "isdigit(a): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103489, "text": "isdigit(self): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103490, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103491, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103492, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103493, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103494, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103495, "text": "isdigit(a): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103496, "text": "isdigit(self): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103497, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103498, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103499, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103500, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103501, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103502, "text": "isdigit(a): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103503, "text": "isdigit(self): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103504, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103505, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103506, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103507, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103508, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103509, "text": "isdigit(a): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103510, "text": "isdigit(self): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103511, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103512, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103513, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103514, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103515, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103516, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103517, "text": "isdigit(a): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103518, "text": "isdigit(self): Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise."}
{"text_id": 1103519, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103520, "text": "isdigit(): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103521, "text": "isdigit(self, /): Return True if the string is a digit string, False otherwise."}
{"text_id": 1103522, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103523, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103524, "text": "islower(a): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103525, "text": "islower(self): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103526, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103527, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103528, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103529, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103530, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103531, "text": "islower(a): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103532, "text": "islower(self): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103533, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103534, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103535, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103536, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103537, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103538, "text": "islower(a): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103539, "text": "islower(self): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103540, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103541, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103542, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103543, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103544, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103545, "text": "islower(a): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103546, "text": "islower(self): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103547, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103548, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103549, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103550, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103551, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103552, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103553, "text": "islower(a): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103554, "text": "islower(self): Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise."}
{"text_id": 1103555, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103556, "text": "islower(): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103557, "text": "islower(self, /): Return True if the string is a lowercase string, False otherwise."}
{"text_id": 1103558, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103559, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103560, "text": "isspace(a): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103561, "text": "isspace(self): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103562, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103563, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103564, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103565, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103566, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103567, "text": "isspace(a): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103568, "text": "isspace(self): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103569, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103570, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103571, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103572, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103573, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103574, "text": "isspace(a): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103575, "text": "isspace(self): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103576, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103577, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103578, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103579, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103580, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103581, "text": "isspace(a): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103582, "text": "isspace(self): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103583, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103584, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103585, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103586, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103587, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103588, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103589, "text": "isspace(a): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103590, "text": "isspace(self): Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise."}
{"text_id": 1103591, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103592, "text": "isspace(): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103593, "text": "isspace(self, /): Return True if the string is a whitespace string, False otherwise."}
{"text_id": 1103594, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103595, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103596, "text": "istitle(a): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103597, "text": "istitle(self): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103598, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103599, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103600, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103601, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103602, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103603, "text": "istitle(a): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103604, "text": "istitle(self): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103605, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103606, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103607, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103608, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103609, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103610, "text": "istitle(a): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103611, "text": "istitle(self): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103612, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103613, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103614, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103615, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103616, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103617, "text": "istitle(a): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103618, "text": "istitle(self): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103619, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103620, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103621, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103622, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103623, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103624, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103625, "text": "istitle(a): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103626, "text": "istitle(self): Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise."}
{"text_id": 1103627, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103628, "text": "istitle(): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103629, "text": "istitle(self, /): Return True if the string is a title-cased string, False otherwise."}
{"text_id": 1103630, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103631, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103632, "text": "isupper(a): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103633, "text": "isupper(self): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103634, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103635, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103636, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103637, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103638, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103639, "text": "isupper(a): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103640, "text": "isupper(self): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103641, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103642, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103643, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103644, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103645, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103646, "text": "isupper(a): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103647, "text": "isupper(self): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103648, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103649, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103650, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103651, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103652, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103653, "text": "isupper(a): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103654, "text": "isupper(self): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103655, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103656, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103657, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103658, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103659, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103660, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103661, "text": "isupper(a): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103662, "text": "isupper(self): Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise."}
{"text_id": 1103663, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103664, "text": "isupper(): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103665, "text": "isupper(self, /): Return True if the string is an uppercase string, False otherwise."}
{"text_id": 1103666, "text": "item(self, *args): Copy an element of an array to a standard Python scalar and return it."}
{"text_id": 1103667, "text": "item(self, *args): Copy an element of an array to a standard Python scalar and return it."}
{"text_id": 1103668, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103669, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103670, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103671, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103672, "text": "join(sep, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103673, "text": "join(self, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103674, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103675, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103676, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103677, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103678, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103679, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103680, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103681, "text": "join(sep, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103682, "text": "join(self, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103683, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103684, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103685, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103686, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103687, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103688, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103689, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103690, "text": "join(sep, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103691, "text": "join(self, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103692, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103693, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103694, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103695, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103696, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103697, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103698, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103699, "text": "join(sep, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103700, "text": "join(self, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103701, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103702, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103703, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103704, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103705, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103706, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103707, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103708, "text": "join(self, iterable_of_bytes, /): Concatenate any number of bytes objects."}
{"text_id": 1103709, "text": "join(sep, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103710, "text": "join(self, seq): Return a string which is the concatenation of the strings in the sequence `seq`."}
{"text_id": 1103711, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103712, "text": "join(iterable, /): Concatenate any number of strings."}
{"text_id": 1103713, "text": "join(self, iterable, /): Concatenate any number of strings."}
{"text_id": 1103714, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103715, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103716, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103717, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103718, "text": "ljust(a, width, fillchar=' '): Return an array with the elements of `a` left-justified in a string of length `width`."}
{"text_id": 1103719, "text": "ljust(self, width, fillchar=' '): Return an array with the elements of `self` left-justified in a string of length `width`."}
{"text_id": 1103720, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103721, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103722, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103723, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103724, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103725, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103726, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103727, "text": "ljust(a, width, fillchar=' '): Return an array with the elements of `a` left-justified in a string of length `width`."}
{"text_id": 1103728, "text": "ljust(self, width, fillchar=' '): Return an array with the elements of `self` left-justified in a string of length `width`."}
{"text_id": 1103729, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103730, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103731, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103732, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103733, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103734, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103735, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103736, "text": "ljust(a, width, fillchar=' '): Return an array with the elements of `a` left-justified in a string of length `width`."}
{"text_id": 1103737, "text": "ljust(self, width, fillchar=' '): Return an array with the elements of `self` left-justified in a string of length `width`."}
{"text_id": 1103738, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103739, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103740, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103741, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103742, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103743, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103744, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103745, "text": "ljust(a, width, fillchar=' '): Return an array with the elements of `a` left-justified in a string of length `width`."}
{"text_id": 1103746, "text": "ljust(self, width, fillchar=' '): Return an array with the elements of `self` left-justified in a string of length `width`."}
{"text_id": 1103747, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103748, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103749, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103750, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103751, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103752, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103753, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103754, "text": "ljust(self, width, fillchar=b' ', /): Return a left-justified string of length width."}
{"text_id": 1103755, "text": "ljust(a, width, fillchar=' '): Return an array with the elements of `a` left-justified in a string of length `width`."}
{"text_id": 1103756, "text": "ljust(self, width, fillchar=' '): Return an array with the elements of `self` left-justified in a string of length `width`."}
{"text_id": 1103757, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103758, "text": "ljust(width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103759, "text": "ljust(self, width, fillchar=' ', /): Return a left-justified string of length width."}
{"text_id": 1103760, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103761, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103762, "text": "lower(a): Return an array with the elements converted to lowercase."}
{"text_id": 1103763, "text": "lower(self): Return an array with the elements of `self` converted to lowercase."}
{"text_id": 1103764, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103765, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103766, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103767, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103768, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103769, "text": "lower(a): Return an array with the elements converted to lowercase."}
{"text_id": 1103770, "text": "lower(self): Return an array with the elements of `self` converted to lowercase."}
{"text_id": 1103771, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103772, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103773, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103774, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103775, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103776, "text": "lower(a): Return an array with the elements converted to lowercase."}
{"text_id": 1103777, "text": "lower(self): Return an array with the elements of `self` converted to lowercase."}
{"text_id": 1103778, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103779, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103780, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103781, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103782, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103783, "text": "lower(a): Return an array with the elements converted to lowercase."}
{"text_id": 1103784, "text": "lower(self): Return an array with the elements of `self` converted to lowercase."}
{"text_id": 1103785, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103786, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103787, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103788, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103789, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103790, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103791, "text": "lower(a): Return an array with the elements converted to lowercase."}
{"text_id": 1103792, "text": "lower(self): Return an array with the elements of `self` converted to lowercase."}
{"text_id": 1103793, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103794, "text": "lower(): Return a copy of the string converted to lowercase."}
{"text_id": 1103795, "text": "lower(self, /): Return a copy of the string converted to lowercase."}
{"text_id": 1103796, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103797, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103798, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103799, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103800, "text": "lstrip(a, chars=None): For each element in `a`, return a copy with the leading characters removed."}
{"text_id": 1103801, "text": "lstrip(self, chars=None): For each element in `self`, return a copy with the leading characters removed."}
{"text_id": 1103802, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103803, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103804, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103805, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103806, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103807, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103808, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103809, "text": "lstrip(a, chars=None): For each element in `a`, return a copy with the leading characters removed."}
{"text_id": 1103810, "text": "lstrip(self, chars=None): For each element in `self`, return a copy with the leading characters removed."}
{"text_id": 1103811, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103812, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103813, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103814, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103815, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103816, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103817, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103818, "text": "lstrip(a, chars=None): For each element in `a`, return a copy with the leading characters removed."}
{"text_id": 1103819, "text": "lstrip(self, chars=None): For each element in `self`, return a copy with the leading characters removed."}
{"text_id": 1103820, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103821, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103822, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103823, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103824, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103825, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103826, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103827, "text": "lstrip(a, chars=None): For each element in `a`, return a copy with the leading characters removed."}
{"text_id": 1103828, "text": "lstrip(self, chars=None): For each element in `self`, return a copy with the leading characters removed."}
{"text_id": 1103829, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103830, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103831, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103832, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103833, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103834, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103835, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103836, "text": "lstrip(self, bytes=None, /): Strip leading bytes contained in the argument."}
{"text_id": 1103837, "text": "lstrip(a, chars=None): For each element in `a`, return a copy with the leading characters removed."}
{"text_id": 1103838, "text": "lstrip(self, chars=None): For each element in `self`, return a copy with the leading characters removed."}
{"text_id": 1103839, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103840, "text": "lstrip(chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103841, "text": "lstrip(self, chars=None, /): Return a copy of the string with leading whitespace removed."}
{"text_id": 1103842, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103843, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103844, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103845, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103846, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103847, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103848, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103849, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103850, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103851, "text": "maketrans(frm, to, /): Return a translation table useable for the bytes or bytearray translate method."}
{"text_id": 1103852, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103853, "text": "max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the maximum along a given axis."}
{"text_id": 1103854, "text": "max(self, axis=None, out=None): Return the maximum value along an axis."}
{"text_id": 1103855, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103856, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103857, "text": "max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the maximum along a given axis."}
{"text_id": 1103858, "text": "max(self, axis=None, out=None): Return the maximum value along an axis."}
{"text_id": 1103859, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103860, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103861, "text": "max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the maximum along a given axis."}
{"text_id": 1103862, "text": "max(self, axis=None, out=None): Return the maximum value along an axis."}
{"text_id": 1103863, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103864, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103865, "text": "max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the maximum along a given axis."}
{"text_id": 1103866, "text": "max(self, axis=None, out=None): Return the maximum value along an axis."}
{"text_id": 1103867, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103868, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103869, "text": "max(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103870, "text": "max(self, *args, **kwargs): Convenience fluent method for :py:func:`max`."}
{"text_id": 1103871, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103872, "text": "max(self, axis=None, out=None, keepdims=False): Return the maximum along a given axis."}
{"text_id": 1103873, "text": "max(self, axis=None, out=None, keepdims=False): Return the maximum along a given axis."}
{"text_id": 1103874, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103875, "text": "max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the maximum along a given axis."}
{"text_id": 1103876, "text": "max(self, axis=None, out=None): Return the maximum value along an axis."}
{"text_id": 1103877, "text": "max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the maximum of an array or maximum along an axis."}
{"text_id": 1103878, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103879, "text": "mean(a, *args, **params): mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) Returns the average of the array elements along given axis."}
{"text_id": 1103880, "text": "mean(self, axis=None, dtype=None, out=None): Returns the average of the matrix elements along the given axis."}
{"text_id": 1103881, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103882, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103883, "text": "mean(a, *args, **params): mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) Returns the average of the array elements along given axis."}
{"text_id": 1103884, "text": "mean(self, axis=None, dtype=None, out=None): Returns the average of the matrix elements along the given axis."}
{"text_id": 1103885, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103886, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103887, "text": "mean(a, *args, **params): mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) Returns the average of the array elements along given axis."}
{"text_id": 1103888, "text": "mean(self, axis=None, dtype=None, out=None): Returns the average of the matrix elements along the given axis."}
{"text_id": 1103889, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103890, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103891, "text": "mean(a, *args, **params): mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) Returns the average of the array elements along given axis."}
{"text_id": 1103892, "text": "mean(self, axis=None, dtype=None, out=None): Returns the average of the matrix elements along the given axis."}
{"text_id": 1103893, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103894, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103895, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103896, "text": "mean(self, *args, **kwargs): Convenience fluent method for :py:func:`mean`."}
{"text_id": 1103897, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103898, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103899, "text": "mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis."}
{"text_id": 1103900, "text": "mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis."}
{"text_id": 1103901, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103902, "text": "mean(a, *args, **params): mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) Returns the average of the array elements along given axis."}
{"text_id": 1103903, "text": "mean(self, axis=None, dtype=None, out=None): Returns the average of the matrix elements along the given axis."}
{"text_id": 1103904, "text": "mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>): Compute the arithmetic mean along the specified axis."}
{"text_id": 1103905, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103906, "text": "min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis."}
{"text_id": 1103907, "text": "min(self, axis=None, out=None): Return the minimum value along an axis."}
{"text_id": 1103908, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103909, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103910, "text": "min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis."}
{"text_id": 1103911, "text": "min(self, axis=None, out=None): Return the minimum value along an axis."}
{"text_id": 1103912, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103913, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103914, "text": "min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis."}
{"text_id": 1103915, "text": "min(self, axis=None, out=None): Return the minimum value along an axis."}
{"text_id": 1103916, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103917, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103918, "text": "min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis."}
{"text_id": 1103919, "text": "min(self, axis=None, out=None): Return the minimum value along an axis."}
{"text_id": 1103920, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103921, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103922, "text": "min(a, axis=None, keepdims=False, out=None): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103923, "text": "min(self, *args, **kwargs): Convenience fluent method for :py:func:`min`."}
{"text_id": 1103924, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103925, "text": "min(self, axis=None, out=None, keepdims=False): Convenience fluent method for :py:func:`min`."}
{"text_id": 1103926, "text": "min(self, axis=None, out=None, keepdims=False): Convenience fluent method for :py:func:`min`."}
{"text_id": 1103927, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103928, "text": "min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis."}
{"text_id": 1103929, "text": "min(self, axis=None, out=None): Return the minimum value along an axis."}
{"text_id": 1103930, "text": "min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis."}
{"text_id": 1103931, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103932, "text": "ndim(obj): Return the number of dimensions of an array."}
{"text_id": 1103933, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103934, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103935, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103936, "text": "ndim(obj): Return the number of dimensions of an array."}
{"text_id": 1103937, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103938, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103939, "text": "ndim(obj): Return the number of dimensions of an array."}
{"text_id": 1103940, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103941, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103942, "text": "ndim(obj): Return the number of dimensions of an array."}
{"text_id": 1103943, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103944, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103945, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103946, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103947, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103948, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103949, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103950, "text": "ndim(obj): Return the number of dimensions of an array."}
{"text_id": 1103951, "text": "ndim(a): Return the number of dimensions of an array."}
{"text_id": 1103952, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103953, "text": "nonzero(a, *args, **params): nonzero(self) Return the indices of unmasked elements that are not zero."}
{"text_id": 1103954, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103955, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103956, "text": "nonzero(a, *args, **params): nonzero(self) Return the indices of unmasked elements that are not zero."}
{"text_id": 1103957, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103958, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103959, "text": "nonzero(a, *args, **params): nonzero(self) Return the indices of unmasked elements that are not zero."}
{"text_id": 1103960, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103961, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103962, "text": "nonzero(a, *args, **params): nonzero(self) Return the indices of unmasked elements that are not zero."}
{"text_id": 1103963, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103964, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103965, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103966, "text": "nonzero(self): Return the indices of the elements that are non-zero."}
{"text_id": 1103967, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103968, "text": "nonzero(self): Return the indices of the elements that are non-zero."}
{"text_id": 1103969, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103970, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103971, "text": "nonzero(a, *args, **params): nonzero(self) Return the indices of unmasked elements that are not zero."}
{"text_id": 1103972, "text": "nonzero(a): Return the indices of the elements that are non-zero."}
{"text_id": 1103973, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1103974, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103975, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103976, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1103977, "text": "partition(a, sep): Partition each element in `a` around `sep`."}
{"text_id": 1103978, "text": "partition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1103979, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1103980, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103981, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103982, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1103983, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103984, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1103985, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103986, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103987, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1103988, "text": "partition(a, sep): Partition each element in `a` around `sep`."}
{"text_id": 1103989, "text": "partition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1103990, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1103991, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103992, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103993, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1103994, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103995, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1103996, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1103997, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103998, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1103999, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104000, "text": "partition(a, sep): Partition each element in `a` around `sep`."}
{"text_id": 1104001, "text": "partition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104002, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104003, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104004, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104005, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104006, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104007, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104008, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104009, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104010, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104011, "text": "partition(a, sep): Partition each element in `a` around `sep`."}
{"text_id": 1104012, "text": "partition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104013, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104014, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104015, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104016, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104017, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104018, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104019, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104020, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104021, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104022, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104023, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104024, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104025, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104026, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104027, "text": "partition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104028, "text": "partition(a, sep): Partition each element in `a` around `sep`."}
{"text_id": 1104029, "text": "partition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104030, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104031, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104032, "text": "partition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104033, "text": "partition(a, kth, axis=-1, kind='introselect', order=None): Return a partitioned copy of an array."}
{"text_id": 1104034, "text": "partition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104035, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104036, "text": "prod(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1104037, "text": "prod(iterable, /, *, start=1): Calculate the product of all the elements in the input iterable."}
{"text_id": 1104038, "text": "prod(self, axis=None, dtype=None, out=None): Return the product of the array elements over the given axis."}
{"text_id": 1104039, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104040, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104041, "text": "prod(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1104042, "text": "prod(iterable, /, *, start=1): Calculate the product of all the elements in the input iterable."}
{"text_id": 1104043, "text": "prod(self, axis=None, dtype=None, out=None): Return the product of the array elements over the given axis."}
{"text_id": 1104044, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104045, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104046, "text": "prod(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1104047, "text": "prod(iterable, /, *, start=1): Calculate the product of all the elements in the input iterable."}
{"text_id": 1104048, "text": "prod(self, axis=None, dtype=None, out=None): Return the product of the array elements over the given axis."}
{"text_id": 1104049, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104050, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104051, "text": "prod(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1104052, "text": "prod(iterable, /, *, start=1): Calculate the product of all the elements in the input iterable."}
{"text_id": 1104053, "text": "prod(self, axis=None, dtype=None, out=None): Return the product of the array elements over the given axis."}
{"text_id": 1104054, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104055, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104056, "text": "prod(self, *args, **kwargs): Convenience fluent method for :py:func:`prod`."}
{"text_id": 1104057, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104058, "text": "prod(self, axis=None, dtype=None, out=None, keepdims=False): Return the product of the array elements over the given axis."}
{"text_id": 1104059, "text": "prod(self, axis=None, dtype=None, out=None, keepdims=False): Return the product of the array elements over the given axis."}
{"text_id": 1104060, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis."}
{"text_id": 1104061, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104062, "text": "prod(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1104063, "text": "prod(iterable, /, *, start=1): Calculate the product of all the elements in the input iterable."}
{"text_id": 1104064, "text": "prod(self, axis=None, dtype=None, out=None): Return the product of the array elements over the given axis."}
{"text_id": 1104065, "text": "prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the product of array elements over a given axis."}
{"text_id": 1104066, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104067, "text": "ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return (maximum - minimum) along the given dimension (i."}
{"text_id": 1104068, "text": "ptp(self, axis=None, out=None): Peak-to-peak (maximum - minimum) value along the given axis."}
{"text_id": 1104069, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104070, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104071, "text": "ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return (maximum - minimum) along the given dimension (i."}
{"text_id": 1104072, "text": "ptp(self, axis=None, out=None): Peak-to-peak (maximum - minimum) value along the given axis."}
{"text_id": 1104073, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104074, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104075, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104076, "text": "ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return (maximum - minimum) along the given dimension (i."}
{"text_id": 1104077, "text": "ptp(self, axis=None, out=None): Peak-to-peak (maximum - minimum) value along the given axis."}
{"text_id": 1104078, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104079, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104080, "text": "ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return (maximum - minimum) along the given dimension (i."}
{"text_id": 1104081, "text": "ptp(self, axis=None, out=None): Peak-to-peak (maximum - minimum) value along the given axis."}
{"text_id": 1104082, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104083, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104084, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104085, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104086, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104087, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104088, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104089, "text": "ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return (maximum - minimum) along the given dimension (i."}
{"text_id": 1104090, "text": "ptp(self, axis=None, out=None): Peak-to-peak (maximum - minimum) value along the given axis."}
{"text_id": 1104091, "text": "ptp(a, axis=None, out=None, keepdims=<no value>): Range of values (maximum - minimum) along an axis."}
{"text_id": 1104092, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104093, "text": "put(a, indices, values, mode='raise'): Set storage-indexed locations to corresponding values."}
{"text_id": 1104094, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104095, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104096, "text": "put(a, indices, values, mode='raise'): Set storage-indexed locations to corresponding values."}
{"text_id": 1104097, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104098, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104099, "text": "put(a, indices, values, mode='raise'): Set storage-indexed locations to corresponding values."}
{"text_id": 1104100, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104101, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104102, "text": "put(a, indices, values, mode='raise'): Set storage-indexed locations to corresponding values."}
{"text_id": 1104103, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104104, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104105, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104106, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104107, "text": "put(a, indices, values, mode='raise'): Set storage-indexed locations to corresponding values."}
{"text_id": 1104108, "text": "put(a, ind, v, mode='raise'): Replaces specified elements of an array with given values."}
{"text_id": 1104109, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104110, "text": "ravel(a, *args, **params): ravel(self, order='C') Returns a 1D version of self, as a view."}
{"text_id": 1104111, "text": "ravel(self, order='C'): Return a flattened matrix."}
{"text_id": 1104112, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104113, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104114, "text": "ravel(a, *args, **params): ravel(self, order='C') Returns a 1D version of self, as a view."}
{"text_id": 1104115, "text": "ravel(self, order='C'): Return a flattened matrix."}
{"text_id": 1104116, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104117, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104118, "text": "ravel(a, *args, **params): ravel(self, order='C') Returns a 1D version of self, as a view."}
{"text_id": 1104119, "text": "ravel(self, order='C'): Return a flattened matrix."}
{"text_id": 1104120, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104121, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104122, "text": "ravel(a, *args, **params): ravel(self, order='C') Returns a 1D version of self, as a view."}
{"text_id": 1104123, "text": "ravel(self, order='C'): Return a flattened matrix."}
{"text_id": 1104124, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104125, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104126, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104127, "text": "ravel(x, order='C'): ravel(x) Return a contiguous flattened array."}
{"text_id": 1104128, "text": "ravel(x, order='C'): ravel(x) Return a contiguous flattened array."}
{"text_id": 1104129, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104130, "text": "ravel(a, *args, **params): ravel(self, order='C') Returns a 1D version of self, as a view."}
{"text_id": 1104131, "text": "ravel(self, order='C'): Return a flattened matrix."}
{"text_id": 1104132, "text": "ravel(a, order='C'): Return a contiguous flattened array."}
{"text_id": 1104133, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104134, "text": "repeat(a, *args, **params): repeat(self, *args, **params) a."}
{"text_id": 1104135, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104136, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104137, "text": "repeat(a, *args, **params): repeat(self, *args, **params) a."}
{"text_id": 1104138, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104139, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104140, "text": "repeat(a, *args, **params): repeat(self, *args, **params) a."}
{"text_id": 1104141, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104142, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104143, "text": "repeat(a, *args, **params): repeat(self, *args, **params) a."}
{"text_id": 1104144, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104145, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104146, "text": "repeat(self, *args, **kwargs): Convenience fluent method for :py:func:`repeat`."}
{"text_id": 1104147, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104148, "text": "repeat(self, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104149, "text": "repeat(self, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104150, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104151, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104152, "text": "repeat(a, *args, **params): repeat(self, *args, **params) a."}
{"text_id": 1104153, "text": "repeat(a, repeats, axis=None): Repeat elements of an array."}
{"text_id": 1104154, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104155, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104156, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104157, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104158, "text": "replace(a, old, new, count=None): For each element in `a`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104159, "text": "replace(self, old, new, count=None): For each element in `self`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104160, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104161, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104162, "text": "replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination."}
{"text_id": 1104163, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104164, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104165, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104166, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104167, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104168, "text": "replace(a, old, new, count=None): For each element in `a`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104169, "text": "replace(self, old, new, count=None): For each element in `self`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104170, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104171, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104172, "text": "replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination."}
{"text_id": 1104173, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104174, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104175, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104176, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104177, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104178, "text": "replace(a, old, new, count=None): For each element in `a`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104179, "text": "replace(self, old, new, count=None): For each element in `self`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104180, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104181, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104182, "text": "replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination."}
{"text_id": 1104183, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104184, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104185, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104186, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104187, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104188, "text": "replace(a, old, new, count=None): For each element in `a`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104189, "text": "replace(self, old, new, count=None): For each element in `self`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104190, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104191, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104192, "text": "replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination."}
{"text_id": 1104193, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104194, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104195, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104196, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104197, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104198, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104199, "text": "replace(a, old, new, count=None): For each element in `a`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104200, "text": "replace(self, old, new, count=None): For each element in `self`, return a copy of the string with all occurrences of substring `old` replaced by `new`."}
{"text_id": 1104201, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104202, "text": "replace(old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104203, "text": "replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination."}
{"text_id": 1104204, "text": "replace(self, old, new, count=-1, /): Return a copy with all occurrences of substring old replaced by new."}
{"text_id": 1104205, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104206, "text": "reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape."}
{"text_id": 1104207, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104208, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104209, "text": "reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape."}
{"text_id": 1104210, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104211, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104212, "text": "reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape."}
{"text_id": 1104213, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104214, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104215, "text": "reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape."}
{"text_id": 1104216, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104217, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104218, "text": "reshape(self, *shape, **kwargs): Returns a **view** of this array with a new shape without altering any data."}
{"text_id": 1104219, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104220, "text": "reshape(self, *args, **kwargs): Returns a copy of the array with a new shape."}
{"text_id": 1104221, "text": "reshape(self, *args, **kwargs): Returns a copy of the array with a new shape."}
{"text_id": 1104222, "text": "reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data."}
{"text_id": 1104223, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104224, "text": "reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape."}
{"text_id": 1104225, "text": "reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data."}
{"text_id": 1104226, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104227, "text": "resize(x, new_shape): Return a new masked array with the specified size and shape."}
{"text_id": 1104228, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104229, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104230, "text": "resize(x, new_shape): Return a new masked array with the specified size and shape."}
{"text_id": 1104231, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104232, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104233, "text": "resize(x, new_shape): Return a new masked array with the specified size and shape."}
{"text_id": 1104234, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104235, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104236, "text": "resize(x, new_shape): Return a new masked array with the specified size and shape."}
{"text_id": 1104237, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104238, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104239, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104240, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104241, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104242, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104243, "text": "resize(x, new_shape): Return a new masked array with the specified size and shape."}
{"text_id": 1104244, "text": "resize(a, new_shape): Return a new array with the specified shape."}
{"text_id": 1104245, "text": "rfind(a, sub, start=0, end=None): For each element in `a`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104246, "text": "rfind(self, sub, start=0, end=None): For each element in `self`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104247, "text": "rfind(a, sub, start=0, end=None): For each element in `a`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104248, "text": "rfind(self, sub, start=0, end=None): For each element in `self`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104249, "text": "rfind(a, sub, start=0, end=None): For each element in `a`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104250, "text": "rfind(self, sub, start=0, end=None): For each element in `self`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104251, "text": "rfind(a, sub, start=0, end=None): For each element in `a`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104252, "text": "rfind(self, sub, start=0, end=None): For each element in `self`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104253, "text": "rfind(a, sub, start=0, end=None): For each element in `a`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104254, "text": "rfind(self, sub, start=0, end=None): For each element in `self`, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`]."}
{"text_id": 1104255, "text": "rindex(a, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104256, "text": "rindex(self, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104257, "text": "rindex(a, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104258, "text": "rindex(self, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104259, "text": "rindex(a, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104260, "text": "rindex(self, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104261, "text": "rindex(a, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104262, "text": "rindex(self, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104263, "text": "rindex(a, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104264, "text": "rindex(self, sub, start=0, end=None): Like `rfind`, but raises `ValueError` when the substring `sub` is not found."}
{"text_id": 1104265, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104266, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104267, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104268, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104269, "text": "rjust(a, width, fillchar=' '): Return an array with the elements of `a` right-justified in a string of length `width`."}
{"text_id": 1104270, "text": "rjust(self, width, fillchar=' '): Return an array with the elements of `self` right-justified in a string of length `width`."}
{"text_id": 1104271, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104272, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104273, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104274, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104275, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104276, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104277, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104278, "text": "rjust(a, width, fillchar=' '): Return an array with the elements of `a` right-justified in a string of length `width`."}
{"text_id": 1104279, "text": "rjust(self, width, fillchar=' '): Return an array with the elements of `self` right-justified in a string of length `width`."}
{"text_id": 1104280, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104281, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104282, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104283, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104284, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104285, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104286, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104287, "text": "rjust(a, width, fillchar=' '): Return an array with the elements of `a` right-justified in a string of length `width`."}
{"text_id": 1104288, "text": "rjust(self, width, fillchar=' '): Return an array with the elements of `self` right-justified in a string of length `width`."}
{"text_id": 1104289, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104290, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104291, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104292, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104293, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104294, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104295, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104296, "text": "rjust(a, width, fillchar=' '): Return an array with the elements of `a` right-justified in a string of length `width`."}
{"text_id": 1104297, "text": "rjust(self, width, fillchar=' '): Return an array with the elements of `self` right-justified in a string of length `width`."}
{"text_id": 1104298, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104299, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104300, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104301, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104302, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104303, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104304, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104305, "text": "rjust(self, width, fillchar=b' ', /): Return a right-justified string of length width."}
{"text_id": 1104306, "text": "rjust(a, width, fillchar=' '): Return an array with the elements of `a` right-justified in a string of length `width`."}
{"text_id": 1104307, "text": "rjust(self, width, fillchar=' '): Return an array with the elements of `self` right-justified in a string of length `width`."}
{"text_id": 1104308, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104309, "text": "rjust(width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104310, "text": "rjust(self, width, fillchar=' ', /): Return a right-justified string of length width."}
{"text_id": 1104311, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104312, "text": "round(a, decimals=0, out=None): Return a copy of a, rounded to 'decimals' places."}
{"text_id": 1104313, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104314, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104315, "text": "round(a, decimals=0, out=None): Return a copy of a, rounded to 'decimals' places."}
{"text_id": 1104316, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104317, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104318, "text": "round(a, decimals=0, out=None): Return a copy of a, rounded to 'decimals' places."}
{"text_id": 1104319, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104320, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104321, "text": "round(a, decimals=0, out=None): Return a copy of a, rounded to 'decimals' places."}
{"text_id": 1104322, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104323, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104324, "text": "round(self, *args, **kwargs): Convenience fluent method for :py:func:`round`."}
{"text_id": 1104325, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104326, "text": "round(self, decimals=0, out=None, **kwargs): Convenience fluent method for :py:func:`round`."}
{"text_id": 1104327, "text": "round(x, decimals=0, out=None, **kwargs): round(a, decimals=0, out=None) Round an array to the given number of decimals."}
{"text_id": 1104328, "text": "round(self, decimals=0, out=None, **kwargs): Convenience fluent method for :py:func:`round`."}
{"text_id": 1104329, "text": "round(x, decimals=0, out=None, **kwargs): round(a, decimals=0, out=None) Round an array to the given number of decimals."}
{"text_id": 1104330, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104331, "text": "round(a, decimals=0, out=None): Return a copy of a, rounded to 'decimals' places."}
{"text_id": 1104332, "text": "round(a, decimals=0, out=None): Round an array to the given number of decimals."}
{"text_id": 1104333, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104334, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104335, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104336, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104337, "text": "rpartition(a, sep): Partition (split) each element around the right-most separator."}
{"text_id": 1104338, "text": "rpartition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104339, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104340, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104341, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104342, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104343, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104344, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104345, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104346, "text": "rpartition(a, sep): Partition (split) each element around the right-most separator."}
{"text_id": 1104347, "text": "rpartition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104348, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104349, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104350, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104351, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104352, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104353, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104354, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104355, "text": "rpartition(a, sep): Partition (split) each element around the right-most separator."}
{"text_id": 1104356, "text": "rpartition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104357, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104358, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104359, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104360, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104361, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104362, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104363, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104364, "text": "rpartition(a, sep): Partition (split) each element around the right-most separator."}
{"text_id": 1104365, "text": "rpartition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104366, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104367, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104368, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104369, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104370, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104371, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104372, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104373, "text": "rpartition(self, sep, /): Partition the bytes into three parts using the given separator."}
{"text_id": 1104374, "text": "rpartition(a, sep): Partition (split) each element around the right-most separator."}
{"text_id": 1104375, "text": "rpartition(self, sep): Partition each element in `self` around `sep`."}
{"text_id": 1104376, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104377, "text": "rpartition(sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104378, "text": "rpartition(self, sep, /): Partition the string into three parts using the given separator."}
{"text_id": 1104379, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104380, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104381, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104382, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104383, "text": "rsplit(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104384, "text": "rsplit(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104385, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104386, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104387, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104388, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104389, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104390, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104391, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104392, "text": "rsplit(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104393, "text": "rsplit(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104394, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104395, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104396, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104397, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104398, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104399, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104400, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104401, "text": "rsplit(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104402, "text": "rsplit(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104403, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104404, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104405, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104406, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104407, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104408, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104409, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104410, "text": "rsplit(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104411, "text": "rsplit(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104412, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104413, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104414, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104415, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104416, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104417, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104418, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104419, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104420, "text": "rsplit(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104421, "text": "rsplit(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104422, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104423, "text": "rsplit(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104424, "text": "rsplit(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104425, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104426, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104427, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104428, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104429, "text": "rstrip(a, chars=None): For each element in `a`, return a copy with the trailing characters removed."}
{"text_id": 1104430, "text": "rstrip(self, chars=None): For each element in `self`, return a copy with the trailing characters removed."}
{"text_id": 1104431, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104432, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104433, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104434, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104435, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104436, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104437, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104438, "text": "rstrip(a, chars=None): For each element in `a`, return a copy with the trailing characters removed."}
{"text_id": 1104439, "text": "rstrip(self, chars=None): For each element in `self`, return a copy with the trailing characters removed."}
{"text_id": 1104440, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104441, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104442, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104443, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104444, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104445, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104446, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104447, "text": "rstrip(a, chars=None): For each element in `a`, return a copy with the trailing characters removed."}
{"text_id": 1104448, "text": "rstrip(self, chars=None): For each element in `self`, return a copy with the trailing characters removed."}
{"text_id": 1104449, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104450, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104451, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104452, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104453, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104454, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104455, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104456, "text": "rstrip(a, chars=None): For each element in `a`, return a copy with the trailing characters removed."}
{"text_id": 1104457, "text": "rstrip(self, chars=None): For each element in `self`, return a copy with the trailing characters removed."}
{"text_id": 1104458, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104459, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104460, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104461, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104462, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104463, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104464, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104465, "text": "rstrip(self, bytes=None, /): Strip trailing bytes contained in the argument."}
{"text_id": 1104466, "text": "rstrip(a, chars=None): For each element in `a`, return a copy with the trailing characters removed."}
{"text_id": 1104467, "text": "rstrip(self, chars=None): For each element in `self`, return a copy with the trailing characters removed."}
{"text_id": 1104468, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104469, "text": "rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104470, "text": "rstrip(self, chars=None, /): Return a copy of the string with trailing whitespace removed."}
{"text_id": 1104471, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104472, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104473, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104474, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104475, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104476, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104477, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104478, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104479, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104480, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104481, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104482, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104483, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104484, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104485, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104486, "text": "searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order."}
{"text_id": 1104487, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104488, "text": "shape(obj): Return the shape of an array."}
{"text_id": 1104489, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104490, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104491, "text": "shape(obj): Return the shape of an array."}
{"text_id": 1104492, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104493, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104494, "text": "shape(obj): Return the shape of an array."}
{"text_id": 1104495, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104496, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104497, "text": "shape(obj): Return the shape of an array."}
{"text_id": 1104498, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104499, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104500, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104501, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104502, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104503, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104504, "text": "shape(obj): Return the shape of an array."}
{"text_id": 1104505, "text": "shape(a): Return the shape of an array."}
{"text_id": 1104506, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104507, "text": "size(obj, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104508, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104509, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104510, "text": "size(obj, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104511, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104512, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104513, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104514, "text": "size(obj, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104515, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104516, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104517, "text": "size(obj, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104518, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104519, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104520, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104521, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104522, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104523, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104524, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104525, "text": "size(obj, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104526, "text": "size(a, axis=None): Return the number of elements along a given axis."}
{"text_id": 1104527, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104528, "text": "sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None): Return a sorted copy of the masked array."}
{"text_id": 1104529, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104530, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104531, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104532, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104533, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104534, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104535, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104536, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104537, "text": "sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None): Return a sorted copy of the masked array."}
{"text_id": 1104538, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104539, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104540, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104541, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104542, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104543, "text": "sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None): Return a sorted copy of the masked array."}
{"text_id": 1104544, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104545, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104546, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104547, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104548, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104549, "text": "sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None): Return a sorted copy of the masked array."}
{"text_id": 1104550, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104551, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104552, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104553, "text": "sort(self, *args, **kwargs): Convenience fluent method for :py:func:`sort`."}
{"text_id": 1104554, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104555, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104556, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104557, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104558, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104559, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104560, "text": "sort(self, axis=-1, kind=None, order=None): Convenience fluent method for :py:func:`sort`."}
{"text_id": 1104561, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104562, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104563, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104564, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104565, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104566, "text": "sort(self, axis=-1, kind=None, order=None): Convenience fluent method for :py:func:`sort`."}
{"text_id": 1104567, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104568, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104569, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104570, "text": "sort(*, key=None, reverse=False): Sort the list in ascending order and return None."}
{"text_id": 1104571, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104572, "text": "sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None): Return a sorted copy of the masked array."}
{"text_id": 1104573, "text": "sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array."}
{"text_id": 1104574, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104575, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104576, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104577, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104578, "text": "split(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104579, "text": "split(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104580, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104581, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104582, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104583, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104584, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104585, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104586, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104587, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104588, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104589, "text": "split(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104590, "text": "split(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104591, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104592, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104593, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104594, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104595, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104596, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104597, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104598, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104599, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104600, "text": "split(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104601, "text": "split(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104602, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104603, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104604, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104605, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104606, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104607, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104608, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104609, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104610, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104611, "text": "split(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104612, "text": "split(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104613, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104614, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104615, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104616, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104617, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104618, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104619, "text": "split(self, *args, **kwargs): Convenience fluent method for :py:func:`split`."}
{"text_id": 1104620, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104621, "text": "split(self, *args, **kwargs): Convenience fluent method for :py:func:`split`."}
{"text_id": 1104622, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1104623, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104624, "text": "split(self, *args, **kwargs): Convenience fluent method for :py:func:`split`."}
{"text_id": 1104625, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays."}
{"text_id": 1104626, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104627, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104628, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104629, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the sections in the bytes, using sep as the delimiter."}
{"text_id": 1104630, "text": "split(a, sep=None, maxsplit=None): For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104631, "text": "split(self, sep=None, maxsplit=None): For each element in `self`, return a list of the words in the string, using `sep` as the delimiter string."}
{"text_id": 1104632, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104633, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104634, "text": "split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104635, "text": "split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays as views into `ary`."}
{"text_id": 1104636, "text": "split(self, /, sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string."}
{"text_id": 1104637, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104638, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104639, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104640, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104641, "text": "splitlines(a, keepends=None): For each element in `a`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104642, "text": "splitlines(self, keepends=None): For each element in `self`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104643, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104644, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104645, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104646, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104647, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104648, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104649, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104650, "text": "splitlines(a, keepends=None): For each element in `a`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104651, "text": "splitlines(self, keepends=None): For each element in `self`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104652, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104653, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104654, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104655, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104656, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104657, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104658, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104659, "text": "splitlines(a, keepends=None): For each element in `a`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104660, "text": "splitlines(self, keepends=None): For each element in `self`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104661, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104662, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104663, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104664, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104665, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104666, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104667, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104668, "text": "splitlines(a, keepends=None): For each element in `a`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104669, "text": "splitlines(self, keepends=None): For each element in `self`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104670, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104671, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104672, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104673, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104674, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104675, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104676, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104677, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the bytes, breaking at line boundaries."}
{"text_id": 1104678, "text": "splitlines(a, keepends=None): For each element in `a`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104679, "text": "splitlines(self, keepends=None): For each element in `self`, return a list of the lines in the element, breaking at line boundaries."}
{"text_id": 1104680, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104681, "text": "splitlines(keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104682, "text": "splitlines(self, /, keepends=False): Return a list of the lines in the string, breaking at line boundaries."}
{"text_id": 1104683, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104684, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104685, "text": "squeeze(self, axis=None): Return a possibly reshaped matrix."}
{"text_id": 1104686, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104687, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104688, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104689, "text": "squeeze(self, axis=None): Return a possibly reshaped matrix."}
{"text_id": 1104690, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104691, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104692, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104693, "text": "squeeze(self, axis=None): Return a possibly reshaped matrix."}
{"text_id": 1104694, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104695, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104696, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104697, "text": "squeeze(self, axis=None): Return a possibly reshaped matrix."}
{"text_id": 1104698, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104699, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104700, "text": "squeeze(self, axis=None, inplace=False): Remove dimensions with size 1 from this array without altering any data."}
{"text_id": 1104701, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104702, "text": "squeeze(self, axis=None): Remove single-dimensional entries from the shape of a."}
{"text_id": 1104703, "text": "squeeze(self, axis=None): Remove single-dimensional entries from the shape of a."}
{"text_id": 1104704, "text": "squeeze(a, axis=None, out=None): Remove single-dimensional entries from the shape of an array."}
{"text_id": 1104705, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104706, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104707, "text": "squeeze(self, axis=None): Return a possibly reshaped matrix."}
{"text_id": 1104708, "text": "squeeze(a, axis=None): Remove axes of length one from `a`."}
{"text_id": 1104709, "text": "startswith(a, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`."}
{"text_id": 1104710, "text": "startswith(self, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` starts with `prefix`, otherwise `False`."}
{"text_id": 1104711, "text": "startswith(a, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`."}
{"text_id": 1104712, "text": "startswith(self, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` starts with `prefix`, otherwise `False`."}
{"text_id": 1104713, "text": "startswith(a, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`."}
{"text_id": 1104714, "text": "startswith(self, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` starts with `prefix`, otherwise `False`."}
{"text_id": 1104715, "text": "startswith(a, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`."}
{"text_id": 1104716, "text": "startswith(self, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` starts with `prefix`, otherwise `False`."}
{"text_id": 1104717, "text": "startswith(a, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`."}
{"text_id": 1104718, "text": "startswith(self, prefix, start=0, end=None): Returns a boolean array which is `True` where the string element in `self` starts with `prefix`, otherwise `False`."}
{"text_id": 1104719, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104720, "text": "std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104721, "text": "std(self, axis=None, dtype=None, out=None, ddof=0): Return the standard deviation of the array elements along the given axis."}
{"text_id": 1104722, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104723, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104724, "text": "std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104725, "text": "std(self, axis=None, dtype=None, out=None, ddof=0): Return the standard deviation of the array elements along the given axis."}
{"text_id": 1104726, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104727, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104728, "text": "std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104729, "text": "std(self, axis=None, dtype=None, out=None, ddof=0): Return the standard deviation of the array elements along the given axis."}
{"text_id": 1104730, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104731, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104732, "text": "std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104733, "text": "std(self, axis=None, dtype=None, out=None, ddof=0): Return the standard deviation of the array elements along the given axis."}
{"text_id": 1104734, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104735, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104736, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104737, "text": "std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104738, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Compute the standard deviation along the specified axis."}
{"text_id": 1104739, "text": "std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104740, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Compute the standard deviation along the specified axis."}
{"text_id": 1104741, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104742, "text": "std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis."}
{"text_id": 1104743, "text": "std(self, axis=None, dtype=None, out=None, ddof=0): Return the standard deviation of the array elements along the given axis."}
{"text_id": 1104744, "text": "std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the standard deviation along the specified axis."}
{"text_id": 1104745, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104746, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104747, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104748, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104749, "text": "strip(a, chars=None): For each element in `a`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104750, "text": "strip(self, chars=None): For each element in `self`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104751, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104752, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104753, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104754, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104755, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104756, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104757, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104758, "text": "strip(a, chars=None): For each element in `a`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104759, "text": "strip(self, chars=None): For each element in `self`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104760, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104761, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104762, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104763, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104764, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104765, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104766, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104767, "text": "strip(a, chars=None): For each element in `a`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104768, "text": "strip(self, chars=None): For each element in `self`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104769, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104770, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104771, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104772, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104773, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104774, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104775, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104776, "text": "strip(a, chars=None): For each element in `a`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104777, "text": "strip(self, chars=None): For each element in `self`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104778, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104779, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104780, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104781, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104782, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104783, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104784, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104785, "text": "strip(self, bytes=None, /): Strip leading and trailing bytes contained in the argument."}
{"text_id": 1104786, "text": "strip(a, chars=None): For each element in `a`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104787, "text": "strip(self, chars=None): For each element in `self`, return a copy with the leading and trailing characters removed."}
{"text_id": 1104788, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104789, "text": "strip(chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104790, "text": "strip(self, chars=None, /): Return a copy of the string with leading and trailing whitespace removed."}
{"text_id": 1104791, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104792, "text": "sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis."}
{"text_id": 1104793, "text": "sum(self, axis=None, dtype=None, out=None): Returns the sum of the matrix elements, along the given axis."}
{"text_id": 1104794, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104795, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104796, "text": "sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis."}
{"text_id": 1104797, "text": "sum(self, axis=None, dtype=None, out=None): Returns the sum of the matrix elements, along the given axis."}
{"text_id": 1104798, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104799, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104800, "text": "sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis."}
{"text_id": 1104801, "text": "sum(self, axis=None, dtype=None, out=None): Returns the sum of the matrix elements, along the given axis."}
{"text_id": 1104802, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104803, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104804, "text": "sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis."}
{"text_id": 1104805, "text": "sum(self, axis=None, dtype=None, out=None): Returns the sum of the matrix elements, along the given axis."}
{"text_id": 1104806, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104807, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104808, "text": "sum(self, *args, **kwargs): Convenience fluent method for :py:func:`sum`."}
{"text_id": 1104809, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104810, "text": "sum(self, axis=None, dtype=None, out=None, keepdims=False): Return the sum of the array elements over the given axis."}
{"text_id": 1104811, "text": "sum(self, axis=None, dtype=None, out=None, keepdims=False): Return the sum of the array elements over the given axis."}
{"text_id": 1104812, "text": "sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis."}
{"text_id": 1104813, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104814, "text": "sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis."}
{"text_id": 1104815, "text": "sum(self, axis=None, dtype=None, out=None): Returns the sum of the matrix elements, along the given axis."}
{"text_id": 1104816, "text": "sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis."}
{"text_id": 1104817, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104818, "text": "swapaxes(a, *args, **params): swapaxes(self, *args, **params) a."}
{"text_id": 1104819, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104820, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104821, "text": "swapaxes(a, *args, **params): swapaxes(self, *args, **params) a."}
{"text_id": 1104822, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104823, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104824, "text": "swapaxes(a, *args, **params): swapaxes(self, *args, **params) a."}
{"text_id": 1104825, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104826, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104827, "text": "swapaxes(a, *args, **params): swapaxes(self, *args, **params) a."}
{"text_id": 1104828, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104829, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104830, "text": "swapaxes(self, *args, **kwargs): Convenience fluent method for :py:func:`swapaxes`."}
{"text_id": 1104831, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104832, "text": "swapaxes(self, axis1, axis2): Return a copy of the array with axis1 and axis2 interchanged."}
{"text_id": 1104833, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104834, "text": "swapaxes(self, axis1, axis2): Return a copy of the array with axis1 and axis2 interchanged."}
{"text_id": 1104835, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104836, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104837, "text": "swapaxes(a, *args, **params): swapaxes(self, *args, **params) a."}
{"text_id": 1104838, "text": "swapaxes(a, axis1, axis2): Interchange two axes of an array."}
{"text_id": 1104839, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104840, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104841, "text": "swapcase(a): Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104842, "text": "swapcase(self): For each element in `self`, return a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104843, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104844, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104845, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104846, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104847, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104848, "text": "swapcase(a): Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104849, "text": "swapcase(self): For each element in `self`, return a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104850, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104851, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104852, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104853, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104854, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104855, "text": "swapcase(a): Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104856, "text": "swapcase(self): For each element in `self`, return a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104857, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104858, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104859, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104860, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104861, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104862, "text": "swapcase(a): Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104863, "text": "swapcase(self): For each element in `self`, return a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104864, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104865, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104866, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104867, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104868, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104869, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104870, "text": "swapcase(a): Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104871, "text": "swapcase(self): For each element in `self`, return a copy of the string with uppercase characters converted to lowercase and vice versa."}
{"text_id": 1104872, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104873, "text": "swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104874, "text": "swapcase(self, /): Convert uppercase characters to lowercase and lowercase characters to uppercase."}
{"text_id": 1104875, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104876, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104877, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104878, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104879, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104880, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104881, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104882, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104883, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104884, "text": "take(self, *args, **kwargs): Convenience fluent method for :py:func:`take`."}
{"text_id": 1104885, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104886, "text": "take(self, indices, axis=None, mode='raise'): Convenience fluent method for :py:func:`take`."}
{"text_id": 1104887, "text": "take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis."}
{"text_id": 1104888, "text": "take(self, indices, axis=None, mode='raise'): Convenience fluent method for :py:func:`take`."}
{"text_id": 1104889, "text": "take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis."}
{"text_id": 1104890, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104891, "text": "take(a, indices, axis=None, out=None, mode='raise'): Take elements from an array along an axis."}
{"text_id": 1104892, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104893, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104894, "text": "title(a): Return element-wise title cased version of string or unicode."}
{"text_id": 1104895, "text": "title(self): For each element in `self`, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase."}
{"text_id": 1104896, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104897, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104898, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104899, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104900, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104901, "text": "title(a): Return element-wise title cased version of string or unicode."}
{"text_id": 1104902, "text": "title(self): For each element in `self`, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase."}
{"text_id": 1104903, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104904, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104905, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104906, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104907, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104908, "text": "title(a): Return element-wise title cased version of string or unicode."}
{"text_id": 1104909, "text": "title(self): For each element in `self`, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase."}
{"text_id": 1104910, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104911, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104912, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104913, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104914, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104915, "text": "title(a): Return element-wise title cased version of string or unicode."}
{"text_id": 1104916, "text": "title(self): For each element in `self`, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase."}
{"text_id": 1104917, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104918, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104919, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104920, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104921, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104922, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104923, "text": "title(a): Return element-wise title cased version of string or unicode."}
{"text_id": 1104924, "text": "title(self): For each element in `self`, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase."}
{"text_id": 1104925, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104926, "text": "title(): Return a version of the string where each word is titlecased."}
{"text_id": 1104927, "text": "title(self, /): Return a version of the string where each word is titlecased."}
{"text_id": 1104928, "text": "tofile(self, f, /): Write all items (as machine values) to the file object f."}
{"text_id": 1104929, "text": "tolist(self): Return the matrix as a (possibly nested) list."}
{"text_id": 1104930, "text": "tolist(self): Return the matrix as a (possibly nested) list."}
{"text_id": 1104931, "text": "tolist(self): Return the matrix as a (possibly nested) list."}
{"text_id": 1104932, "text": "tolist(self): Return the matrix as a (possibly nested) list."}
{"text_id": 1104933, "text": "tolist(self, /): Convert array to an ordinary list with the same items."}
{"text_id": 1104934, "text": "tolist(self): Return the matrix as a (possibly nested) list."}
{"text_id": 1104935, "text": "tostring(self, /): Convert the array to an array of machine values and return the bytes representation."}
{"text_id": 1104936, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104937, "text": "trace(a, *args, **params): trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a."}
{"text_id": 1104938, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104939, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104940, "text": "trace(a, *args, **params): trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a."}
{"text_id": 1104941, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104942, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104943, "text": "trace(a, *args, **params): trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a."}
{"text_id": 1104944, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104945, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104946, "text": "trace(a, *args, **params): trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a."}
{"text_id": 1104947, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104948, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104949, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104950, "text": "trace(a, offset=0, axis1=0, axis2=1, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104951, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104952, "text": "trace(a, *args, **params): trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a."}
{"text_id": 1104953, "text": "trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None): Return the sum along diagonals of the array."}
{"text_id": 1104954, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104955, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104956, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104957, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104958, "text": "translate(a, table, deletechars=None): For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104959, "text": "translate(self, table, deletechars=None): For each element in `self`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104960, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104961, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104962, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104963, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104964, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104965, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104966, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104967, "text": "translate(a, table, deletechars=None): For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104968, "text": "translate(self, table, deletechars=None): For each element in `self`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104969, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104970, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104971, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104972, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104973, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104974, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104975, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104976, "text": "translate(a, table, deletechars=None): For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104977, "text": "translate(self, table, deletechars=None): For each element in `self`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104978, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104979, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104980, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104981, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104982, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104983, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104984, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104985, "text": "translate(a, table, deletechars=None): For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104986, "text": "translate(self, table, deletechars=None): For each element in `self`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104987, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104988, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104989, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104990, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104991, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104992, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104993, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104994, "text": "translate(self, table, /, delete=b''): Return a copy with each character mapped by the given translation table."}
{"text_id": 1104995, "text": "translate(a, table, deletechars=None): For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104996, "text": "translate(self, table, deletechars=None): For each element in `self`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table."}
{"text_id": 1104997, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104998, "text": "translate(table, /): Replace each character in the string using the given translation table."}
{"text_id": 1104999, "text": "translate(self, table, /): Replace each character in the string using the given translation table."}
{"text_id": 1105000, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105001, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105002, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105003, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105004, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105005, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105006, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105007, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105008, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105009, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105010, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105011, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105012, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105013, "text": "transpose(self, *args, **kwargs): Convenience fluent method for :py:func:`transpose`."}
{"text_id": 1105014, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105015, "text": "transpose(self, *axes): Permute the dimensions of an array."}
{"text_id": 1105016, "text": "transpose(self, *axes): Permute the dimensions of an array."}
{"text_id": 1105017, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105018, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105019, "text": "transpose(a, axes=None): Permute the dimensions of an array."}
{"text_id": 1105020, "text": "transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array."}
{"text_id": 1105021, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105022, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105023, "text": "upper(a): Return an array with the elements converted to uppercase."}
{"text_id": 1105024, "text": "upper(self): Return an array with the elements of `self` converted to uppercase."}
{"text_id": 1105025, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105026, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105027, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105028, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105029, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105030, "text": "upper(a): Return an array with the elements converted to uppercase."}
{"text_id": 1105031, "text": "upper(self): Return an array with the elements of `self` converted to uppercase."}
{"text_id": 1105032, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105033, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105034, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105035, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105036, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105037, "text": "upper(a): Return an array with the elements converted to uppercase."}
{"text_id": 1105038, "text": "upper(self): Return an array with the elements of `self` converted to uppercase."}
{"text_id": 1105039, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105040, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105041, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105042, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105043, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105044, "text": "upper(a): Return an array with the elements converted to uppercase."}
{"text_id": 1105045, "text": "upper(self): Return an array with the elements of `self` converted to uppercase."}
{"text_id": 1105046, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105047, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105048, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105049, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105050, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105051, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105052, "text": "upper(a): Return an array with the elements converted to uppercase."}
{"text_id": 1105053, "text": "upper(self): Return an array with the elements of `self` converted to uppercase."}
{"text_id": 1105054, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105055, "text": "upper(): Return a copy of the string converted to uppercase."}
{"text_id": 1105056, "text": "upper(self, /): Return a copy of the string converted to uppercase."}
{"text_id": 1105057, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105058, "text": "var(a, *args, **params): var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Compute the variance along the specified axis."}
{"text_id": 1105059, "text": "var(self, axis=None, dtype=None, out=None, ddof=0): Returns the variance of the matrix elements, along the given axis."}
{"text_id": 1105060, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105061, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105062, "text": "var(a, *args, **params): var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Compute the variance along the specified axis."}
{"text_id": 1105063, "text": "var(self, axis=None, dtype=None, out=None, ddof=0): Returns the variance of the matrix elements, along the given axis."}
{"text_id": 1105064, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105065, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105066, "text": "var(a, *args, **params): var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Compute the variance along the specified axis."}
{"text_id": 1105067, "text": "var(self, axis=None, dtype=None, out=None, ddof=0): Returns the variance of the matrix elements, along the given axis."}
{"text_id": 1105068, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105069, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105070, "text": "var(a, *args, **params): var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Compute the variance along the specified axis."}
{"text_id": 1105071, "text": "var(self, axis=None, dtype=None, out=None, ddof=0): Returns the variance of the matrix elements, along the given axis."}
{"text_id": 1105072, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105073, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105074, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105075, "text": "var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Returns the variance of the array elements, along given axis."}
{"text_id": 1105076, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Compute the variance along the specified axis."}
{"text_id": 1105077, "text": "var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Returns the variance of the array elements, along given axis."}
{"text_id": 1105078, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105079, "text": "var(a, *args, **params): var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Compute the variance along the specified axis."}
{"text_id": 1105080, "text": "var(self, axis=None, dtype=None, out=None, ddof=0): Returns the variance of the matrix elements, along the given axis."}
{"text_id": 1105081, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>): Compute the variance along the specified axis."}
{"text_id": 1105082, "text": "var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False): Compute the variance along the specified axis."}
{"text_id": 1105083, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105084, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105085, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105086, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105087, "text": "zfill(a, width): Return the numeric string left-filled with zeros Calls `str."}
{"text_id": 1105088, "text": "zfill(self, width): Return the numeric string left-filled with zeros in a string of length `width`."}
{"text_id": 1105089, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105090, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105091, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105092, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105093, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105094, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105095, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105096, "text": "zfill(a, width): Return the numeric string left-filled with zeros Calls `str."}
{"text_id": 1105097, "text": "zfill(self, width): Return the numeric string left-filled with zeros in a string of length `width`."}
{"text_id": 1105098, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105099, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105100, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105101, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105102, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105103, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105104, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105105, "text": "zfill(a, width): Return the numeric string left-filled with zeros Calls `str."}
{"text_id": 1105106, "text": "zfill(self, width): Return the numeric string left-filled with zeros in a string of length `width`."}
{"text_id": 1105107, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105108, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105109, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105110, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105111, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105112, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105113, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105114, "text": "zfill(a, width): Return the numeric string left-filled with zeros Calls `str."}
{"text_id": 1105115, "text": "zfill(self, width): Return the numeric string left-filled with zeros in a string of length `width`."}
{"text_id": 1105116, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105117, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105118, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105119, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105120, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105121, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105122, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105123, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105124, "text": "zfill(a, width): Return the numeric string left-filled with zeros Calls `str."}
{"text_id": 1105125, "text": "zfill(self, width): Return the numeric string left-filled with zeros in a string of length `width`."}
{"text_id": 1105126, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105127, "text": "zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105128, "text": "zfill(self, width, /): Pad a numeric string with zeros on the left, to fill a field of the given width."}
{"text_id": 1105129, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105130, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105131, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105132, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105133, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105134, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105135, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105136, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105137, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105138, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105139, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105140, "text": "DataSource(destpath='.'): DataSource(destpath='."}
{"text_id": 1105141, "text": "abspath(self, path): Return absolute path of file in the DataSource directory."}
{"text_id": 1105142, "text": "abspath(self, path): Return absolute path of file in the DataSource directory."}
{"text_id": 1105143, "text": "abspath(self, path): Return absolute path of file in the DataSource directory."}
{"text_id": 1105144, "text": "abspath(self, path): Return absolute path of file in the DataSource directory."}
{"text_id": 1105145, "text": "abspath(self, path): Return absolute path of file in the DataSource directory."}
{"text_id": 1105146, "text": "exists(self, path): Test if path exists."}
{"text_id": 1105147, "text": "exists(self, path): Test if path exists."}
{"text_id": 1105148, "text": "exists(self, path): Test if path exists."}
{"text_id": 1105149, "text": "exists(self, path): Test if path exists."}
{"text_id": 1105150, "text": "exists(self, path): Test if path exists."}
{"text_id": 1105151, "text": "open(self, path, mode='r', encoding=None, newline=None): Open and return file-like object."}
{"text_id": 1105152, "text": "open(path, flags, mode=511, *, dir_fd=None): Open a file for low level IO."}
{"text_id": 1105153, "text": "open(self, path, mode='r', encoding=None, newline=None): Open and return file-like object."}
{"text_id": 1105154, "text": "open(path, flags, mode=511, *, dir_fd=None): Open a file for low level IO."}
{"text_id": 1105155, "text": "open(self, path, mode='r', encoding=None, newline=None): Open and return file-like object."}
{"text_id": 1105156, "text": "open(path, flags, mode=511, *, dir_fd=None): Open a file for low level IO."}
{"text_id": 1105157, "text": "open(self, path, mode='r', encoding=None, newline=None): Open and return file-like object."}
{"text_id": 1105158, "text": "open(path, flags, mode=511, *, dir_fd=None): Open a file for low level IO."}
{"text_id": 1105159, "text": "open(self, path, mode='r', encoding=None, newline=None): Open and return file-like object."}
{"text_id": 1105160, "text": "open(path, flags, mode=511, *, dir_fd=None): Open a file for low level IO."}
{"text_id": 1105161, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105162, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105163, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105164, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105165, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105166, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105167, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105168, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105169, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105170, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105171, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105172, "text": "MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x7f7ee989e310>, title='Python floating point number'): Diagnosing machine parameters."}
{"text_id": 1105173, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105174, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105175, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105176, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105177, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105178, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105179, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105180, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105181, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105182, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105183, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105184, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105185, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105186, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105187, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105188, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105189, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105190, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105191, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105192, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105193, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105194, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105195, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105196, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105197, "text": "casefold(): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105198, "text": "casefold(self, /): Return a version of the string suitable for caseless comparisons."}
{"text_id": 1105199, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105200, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105201, "text": "encode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1105202, "text": "encode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1105203, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105204, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105205, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105206, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105207, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105208, "text": "encode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1105209, "text": "encode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1105210, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105211, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105212, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105213, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105214, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105215, "text": "encode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1105216, "text": "encode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1105217, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105218, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105219, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105220, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105221, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105222, "text": "encode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1105223, "text": "encode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1105224, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105225, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105226, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105227, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105228, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105229, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105230, "text": "encode(a, encoding=None, errors=None): Calls `str."}
{"text_id": 1105231, "text": "encode(self, encoding=None, errors=None): Calls `str."}
{"text_id": 1105232, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105233, "text": "encode(encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105234, "text": "encode(self, /, encoding='utf-8', errors='strict'): Encode the string using the codec registered for encoding."}
{"text_id": 1105235, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105236, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105237, "text": "isdecimal(a): For each element, return True if there are only decimal characters in the element."}
{"text_id": 1105238, "text": "isdecimal(self): For each element in `self`, return True if there are only decimal characters in the element."}
{"text_id": 1105239, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105240, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105241, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105242, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105243, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105244, "text": "isdecimal(a): For each element, return True if there are only decimal characters in the element."}
{"text_id": 1105245, "text": "isdecimal(self): For each element in `self`, return True if there are only decimal characters in the element."}
{"text_id": 1105246, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105247, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105248, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105249, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105250, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105251, "text": "isdecimal(a): For each element, return True if there are only decimal characters in the element."}
{"text_id": 1105252, "text": "isdecimal(self): For each element in `self`, return True if there are only decimal characters in the element."}
{"text_id": 1105253, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105254, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105255, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105256, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105257, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105258, "text": "isdecimal(a): For each element, return True if there are only decimal characters in the element."}
{"text_id": 1105259, "text": "isdecimal(self): For each element in `self`, return True if there are only decimal characters in the element."}
{"text_id": 1105260, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105261, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105262, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105263, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105264, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105265, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105266, "text": "isdecimal(a): For each element, return True if there are only decimal characters in the element."}
{"text_id": 1105267, "text": "isdecimal(self): For each element in `self`, return True if there are only decimal characters in the element."}
{"text_id": 1105268, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105269, "text": "isdecimal(): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105270, "text": "isdecimal(self, /): Return True if the string is a decimal string, False otherwise."}
{"text_id": 1105271, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105272, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105273, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105274, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105275, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105276, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105277, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105278, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105279, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105280, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105281, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105282, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105283, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105284, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105285, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105286, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105287, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105288, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105289, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105290, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105291, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105292, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105293, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105294, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105295, "text": "isidentifier(): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105296, "text": "isidentifier(self, /): Return True if the string is a valid Python identifier, False otherwise."}
{"text_id": 1105297, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105298, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105299, "text": "isnumeric(a): For each element, return True if there are only numeric characters in the element."}
{"text_id": 1105300, "text": "isnumeric(self): For each element in `self`, return True if there are only numeric characters in the element."}
{"text_id": 1105301, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105302, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105303, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105304, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105305, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105306, "text": "isnumeric(a): For each element, return True if there are only numeric characters in the element."}
{"text_id": 1105307, "text": "isnumeric(self): For each element in `self`, return True if there are only numeric characters in the element."}
{"text_id": 1105308, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105309, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105310, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105311, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105312, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105313, "text": "isnumeric(a): For each element, return True if there are only numeric characters in the element."}
{"text_id": 1105314, "text": "isnumeric(self): For each element in `self`, return True if there are only numeric characters in the element."}
{"text_id": 1105315, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105316, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105317, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105318, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105319, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105320, "text": "isnumeric(a): For each element, return True if there are only numeric characters in the element."}
{"text_id": 1105321, "text": "isnumeric(self): For each element in `self`, return True if there are only numeric characters in the element."}
{"text_id": 1105322, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105323, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105324, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105325, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105326, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105327, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105328, "text": "isnumeric(a): For each element, return True if there are only numeric characters in the element."}
{"text_id": 1105329, "text": "isnumeric(self): For each element in `self`, return True if there are only numeric characters in the element."}
{"text_id": 1105330, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105331, "text": "isnumeric(): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105332, "text": "isnumeric(self, /): Return True if the string is a numeric string, False otherwise."}
{"text_id": 1105333, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105334, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105335, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105336, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105337, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105338, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105339, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105340, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105341, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105342, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105343, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105344, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105345, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105346, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105347, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105348, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105349, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105350, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105351, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105352, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105353, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105354, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105355, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105356, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105357, "text": "isprintable(): Return True if the string is printable, False otherwise."}
{"text_id": 1105358, "text": "isprintable(self, /): Return True if the string is printable, False otherwise."}
{"text_id": 1105359, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105360, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105361, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105362, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105363, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105364, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105365, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105366, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105367, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105368, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105369, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105370, "text": "Tester(package=None, raise_warnings='release', depth=0, check_fpu_mode=False): Nose test runner."}
{"text_id": 1105371, "text": "bench(self, label='fast', verbose=1, extra_argv=None): Run benchmarks for module using nose."}
{"text_id": 1105372, "text": "bench(self, label='fast', verbose=1, extra_argv=None): Run benchmarks for module using nose."}
{"text_id": 1105373, "text": "bench(self, label='fast', verbose=1, extra_argv=None): Run benchmarks for module using nose."}
{"text_id": 1105374, "text": "bench(self, label='fast', verbose=1, extra_argv=None): Run benchmarks for module using nose."}
{"text_id": 1105375, "text": "bench(self, label='fast', verbose=1, extra_argv=None): Run benchmarks for module using nose."}
{"text_id": 1105376, "text": "prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False): Run tests for module using nose."}
{"text_id": 1105377, "text": "prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False): Run tests for module using nose."}
{"text_id": 1105378, "text": "prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False): Run tests for module using nose."}
{"text_id": 1105379, "text": "prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False): Run tests for module using nose."}
{"text_id": 1105380, "text": "prepare_test_args(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, timer=False): Run tests for module using nose."}
{"text_id": 1105381, "text": "test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False): Run tests for module using nose."}
{"text_id": 1105382, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105383, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105384, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105385, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105386, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105387, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105388, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105389, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105390, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105391, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105392, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105393, "text": "test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False): Run tests for module using nose."}
{"text_id": 1105394, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105395, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105396, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105397, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105398, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105399, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105400, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105401, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105402, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105403, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105404, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105405, "text": "test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False): Run tests for module using nose."}
{"text_id": 1105406, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105407, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105408, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105409, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105410, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105411, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105412, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105413, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105414, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105415, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105416, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105417, "text": "test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False): Run tests for module using nose."}
{"text_id": 1105418, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105419, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105420, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105421, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105422, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105423, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105424, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105425, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105426, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105427, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105428, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105429, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105430, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105431, "text": "test(self, label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, raise_warnings=None, timer=False): Run tests for module using nose."}
{"text_id": 1105432, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105433, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105434, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105435, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105436, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105437, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105438, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105439, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105440, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105441, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105442, "text": "test(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None): Pytest test runner."}
{"text_id": 1105443, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105444, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105445, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105446, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105447, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105448, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105449, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105450, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105451, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105452, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105453, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105454, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105455, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105456, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105457, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105458, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105459, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105460, "text": "outer(a, b): Compute the outer product of two vectors."}
{"text_id": 1105461, "text": "outer(a, b, out=None): Compute the outer product of two vectors."}
{"text_id": 1105462, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105463, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105464, "text": "identity(*args, **params): identity(n, dtype=None) Return the identity array."}
{"text_id": 1105465, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105466, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105467, "text": "identity(*args, **params): identity(n, dtype=None) Return the identity array."}
{"text_id": 1105468, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105469, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105470, "text": "identity(*args, **params): identity(n, dtype=None) Return the identity array."}
{"text_id": 1105471, "text": "identity(n, dtype=None, ctx=None): Return the identity array."}
{"text_id": 1105472, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105473, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105474, "text": "identity(*args, **params): identity(n, dtype=None) Return the identity array."}
{"text_id": 1105475, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105476, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105477, "text": "identity(n, dtype=None, ctx=None): Return the identity array."}
{"text_id": 1105478, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105479, "text": "identity(n, dtype=None, *, like=None): Return the identity array."}
{"text_id": 1105480, "text": "identity(*args, **params): identity(n, dtype=None) Return the identity array."}
{"text_id": 1105481, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105482, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105483, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105484, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105485, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105486, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105487, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105488, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105489, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105490, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105491, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105492, "text": "add_newdoc(place, obj, doc, warn_on_python=True): Add documentation to an existing object, typically one defined in C The purpose is to allow easier editing of the docstrings without requiring a re-compile."}
{"text_id": 1105493, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105494, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105495, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105496, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105497, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105498, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105499, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105500, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105501, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105502, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105503, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105504, "text": "alen(a): Return the length of the first dimension of the input array."}
{"text_id": 1105505, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105506, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105507, "text": "angle(a, *args, **kwargs): Return the angle of the complex argument."}
{"text_id": 1105508, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105509, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105510, "text": "angle(a, *args, **kwargs): Return the angle of the complex argument."}
{"text_id": 1105511, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105512, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105513, "text": "angle(a, *args, **kwargs): Return the angle of the complex argument."}
{"text_id": 1105514, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105515, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105516, "text": "angle(a, *args, **kwargs): Return the angle of the complex argument."}
{"text_id": 1105517, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105518, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105519, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105520, "text": "angle(z, deg=False): Return the angle of the complex argument."}
{"text_id": 1105521, "text": "angle(a, *args, **kwargs): Return the angle of the complex argument."}
{"text_id": 1105522, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105523, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105524, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105525, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105526, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105527, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105528, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105529, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105530, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105531, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105532, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105533, "text": "array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array."}
{"text_id": 1105534, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105535, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105536, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105537, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105538, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105539, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105540, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105541, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105542, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105543, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105544, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105545, "text": "array_repr(arr, max_line_width=None, precision=None, suppress_small=None): Return the string representation of an array."}
{"text_id": 1105546, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105547, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105548, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105549, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105550, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105551, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105552, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105553, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105554, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105555, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105556, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105557, "text": "array_str(a, max_line_width=None, precision=None, suppress_small=None): Return a string representation of the data in an array."}
{"text_id": 1105558, "text": "asanyarray(a, dtype=None): Convert the input to a masked array, conserving subclasses."}
{"text_id": 1105559, "text": "asanyarray(a, dtype=None): Convert the input to a masked array, conserving subclasses."}
{"text_id": 1105560, "text": "asanyarray(a, dtype=None): Convert the input to a masked array, conserving subclasses."}
{"text_id": 1105561, "text": "asanyarray(a, dtype=None): Convert the input to a masked array, conserving subclasses."}
{"text_id": 1105562, "text": "asanyarray(a, dtype=None): Convert the input to a masked array, conserving subclasses."}
{"text_id": 1105563, "text": "asarray(obj, itemsize=None, unicode=None, order=None): Convert the input to a `chararray`, copying the data only if necessary."}
{"text_id": 1105564, "text": "asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type."}
{"text_id": 1105565, "text": "asarray(obj, itemsize=None, unicode=None, order=None): Convert the input to a `chararray`, copying the data only if necessary."}
{"text_id": 1105566, "text": "asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type."}
{"text_id": 1105567, "text": "asarray(obj, itemsize=None, unicode=None, order=None): Convert the input to a `chararray`, copying the data only if necessary."}
{"text_id": 1105568, "text": "asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type."}
{"text_id": 1105569, "text": "asarray(obj, itemsize=None, unicode=None, order=None): Convert the input to a `chararray`, copying the data only if necessary."}
{"text_id": 1105570, "text": "asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type."}
{"text_id": 1105571, "text": "asarray(obj, itemsize=None, unicode=None, order=None): Convert the input to a `chararray`, copying the data only if necessary."}
{"text_id": 1105572, "text": "asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type."}
{"text_id": 1105573, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105574, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105575, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105576, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105577, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105578, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105579, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105580, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105581, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105582, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105583, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105584, "text": "asarray_chkfinite(a, dtype=None, order=None): Convert the input to an array, checking for NaNs or Infs."}
{"text_id": 1105585, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105586, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105587, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105588, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105589, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105590, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105591, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105592, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105593, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105594, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105595, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105596, "text": "asfarray(a, dtype=<class 'numpy.float64'>): Return an array converted to a float type."}
{"text_id": 1105597, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105598, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105599, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105600, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105601, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105602, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105603, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105604, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105605, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105606, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105607, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105608, "text": "asmatrix(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1105609, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105610, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105611, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105612, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105613, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105614, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105615, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105616, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105617, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105618, "text": "asscalar(self): Returns a scalar whose value is copied from this array."}
{"text_id": 1105619, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105620, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105621, "text": "asscalar(a): Convert an array of size 1 to its scalar equivalent."}
{"text_id": 1105622, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105623, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105624, "text": "atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension."}
{"text_id": 1105625, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105626, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105627, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105628, "text": "atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension."}
{"text_id": 1105629, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105630, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105631, "text": "atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension."}
{"text_id": 1105632, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105633, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105634, "text": "atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension."}
{"text_id": 1105635, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105636, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105637, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105638, "text": "atleast_1d(*arys): Convert inputs to arrays with at least one dimension."}
{"text_id": 1105639, "text": "atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension."}
{"text_id": 1105640, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105641, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105642, "text": "atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions."}
{"text_id": 1105643, "text": "atleast_2d(*arys): Convert inputs to arrays with at least two dimensions."}
{"text_id": 1105644, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105645, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105646, "text": "atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions."}
{"text_id": 1105647, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105648, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105649, "text": "atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions."}
{"text_id": 1105650, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105651, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105652, "text": "atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions."}
{"text_id": 1105653, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105654, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105655, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105656, "text": "atleast_2d(*arys): View inputs as arrays with at least two dimensions."}
{"text_id": 1105657, "text": "atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions."}
{"text_id": 1105658, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105659, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105660, "text": "atleast_3d(*args, **params): atleast_3d(*args, **kwargs) View inputs as arrays with at least three dimensions."}
{"text_id": 1105661, "text": "atleast_3d(*arys): Convert inputs to arrays with at least three dimension."}
{"text_id": 1105662, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105663, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105664, "text": "atleast_3d(*args, **params): atleast_3d(*args, **kwargs) View inputs as arrays with at least three dimensions."}
{"text_id": 1105665, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105666, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105667, "text": "atleast_3d(*args, **params): atleast_3d(*args, **kwargs) View inputs as arrays with at least three dimensions."}
{"text_id": 1105668, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105669, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105670, "text": "atleast_3d(*args, **params): atleast_3d(*args, **kwargs) View inputs as arrays with at least three dimensions."}
{"text_id": 1105671, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105672, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105673, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105674, "text": "atleast_3d(*arys): View inputs as arrays with at least three dimensions."}
{"text_id": 1105675, "text": "atleast_3d(*args, **params): atleast_3d(*args, **kwargs) View inputs as arrays with at least three dimensions."}
{"text_id": 1105676, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105677, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105678, "text": "average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis."}
{"text_id": 1105679, "text": "average(a, axis=None, weights=None, returned=False, out=None): Compute the weighted average along the specified axis."}
{"text_id": 1105680, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105681, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105682, "text": "average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis."}
{"text_id": 1105683, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105684, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105685, "text": "average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis."}
{"text_id": 1105686, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105687, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105688, "text": "average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis."}
{"text_id": 1105689, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105690, "text": "average(a, axis=None, weights=None, returned=False, out=None): Compute the weighted average along the specified axis."}
{"text_id": 1105691, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105692, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105693, "text": "average(a, axis=None, weights=None, returned=False): Compute the weighted average along the specified axis."}
{"text_id": 1105694, "text": "average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis."}
{"text_id": 1105695, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105696, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105697, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105698, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105699, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105700, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105701, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105702, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105703, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105704, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105705, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105706, "text": "bartlett(M): Return the Bartlett window."}
{"text_id": 1105707, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105708, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105709, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105710, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105711, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105712, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105713, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105714, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105715, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105716, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105717, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105718, "text": "base_repr(number, base=2, padding=0): Return a string representation of a number in the given base system."}
{"text_id": 1105719, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105720, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105721, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105722, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105723, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105724, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105725, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105726, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105727, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105728, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105729, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105730, "text": "binary_repr(num, width=None): Return the binary representation of the input number as a string."}
{"text_id": 1105731, "text": "bincount(x, weights=None, minlength=0): Count number of occurrences of each value in array of non-negative ints."}
{"text_id": 1105732, "text": "bincount(x, weights=None, minlength=0): Count number of occurrences of each value in array of non-negative ints."}
{"text_id": 1105733, "text": "bitwise_and(a, b, *args, **kwargs): bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise."}
{"text_id": 1105734, "text": "bitwise_and(x1, x2, out=None, **kwargs): Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105735, "text": "bitwise_and(a, b, *args, **kwargs): bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise."}
{"text_id": 1105736, "text": "bitwise_and(a, b, *args, **kwargs): bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise."}
{"text_id": 1105737, "text": "bitwise_and(a, b, *args, **kwargs): bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise."}
{"text_id": 1105738, "text": "bitwise_and(x1, x2, out=None, **kwargs): Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105739, "text": "bitwise_and(a, b, *args, **kwargs): bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise AND of two arrays element-wise."}
{"text_id": 1105740, "text": "bitwise_not(x, out=None, **kwargs): Compute bit-wise inversion, or bit-wise NOT, element-wise."}
{"text_id": 1105741, "text": "bitwise_not(x, out=None, **kwargs): Compute bit-wise inversion, or bit-wise NOT, element-wise."}
{"text_id": 1105742, "text": "bitwise_or(a, b, *args, **kwargs): bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105743, "text": "bitwise_or(x1, x2, out=None, **kwargs): Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105744, "text": "bitwise_or(a, b, *args, **kwargs): bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105745, "text": "bitwise_or(a, b, *args, **kwargs): bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105746, "text": "bitwise_or(a, b, *args, **kwargs): bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105747, "text": "bitwise_or(x1, x2, out=None, **kwargs): Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105748, "text": "bitwise_or(a, b, *args, **kwargs): bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise OR of two arrays element-wise."}
{"text_id": 1105749, "text": "bitwise_xor(a, b, *args, **kwargs): bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105750, "text": "bitwise_xor(x1, x2, out=None, **kwargs): Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105751, "text": "bitwise_xor(a, b, *args, **kwargs): bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105752, "text": "bitwise_xor(a, b, *args, **kwargs): bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105753, "text": "bitwise_xor(a, b, *args, **kwargs): bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105754, "text": "bitwise_xor(x1, x2, out=None, **kwargs): Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105755, "text": "bitwise_xor(a, b, *args, **kwargs): bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the bit-wise XOR of two arrays element-wise."}
{"text_id": 1105756, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105757, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105758, "text": "blackman(M, dtype=<class 'numpy.float32'>, ctx=None): Return the Blackman window."}
{"text_id": 1105759, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105760, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105761, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105762, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105763, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105764, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105765, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105766, "text": "blackman(M, dtype=<class 'numpy.float32'>, ctx=None): Return the Blackman window."}
{"text_id": 1105767, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105768, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105769, "text": "blackman(M): Return the Blackman window."}
{"text_id": 1105770, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105771, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105772, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105773, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105774, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105775, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105776, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105777, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105778, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105779, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105780, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105781, "text": "block(arrays): Assemble an nd-array from nested lists of blocks."}
{"text_id": 1105782, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105783, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105784, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105785, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105786, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105787, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105788, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105789, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105790, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105791, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105792, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105793, "text": "bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array."}
{"text_id": 1105794, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105795, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105796, "text": "broadcast_arrays(*args): Broadcast any number of arrays against each other."}
{"text_id": 1105797, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105798, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105799, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105800, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105801, "text": "broadcast_arrays(*args): Broadcast any number of arrays against each other."}
{"text_id": 1105802, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105803, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105804, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105805, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105806, "text": "broadcast_arrays(*args): Broadcast any number of arrays against each other."}
{"text_id": 1105807, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105808, "text": "broadcast_arrays(*args, subok=False): Broadcast any number of arrays against each other."}
{"text_id": 1105809, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105810, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105811, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105812, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105813, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105814, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105815, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105816, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105817, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105818, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105819, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105820, "text": "broadcast_shapes(*args): Broadcast the input shapes into a single shape."}
{"text_id": 1105821, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105822, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105823, "text": "broadcast_to(array, shape): Broadcast an array to a new shape."}
{"text_id": 1105824, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105825, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105826, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105827, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105828, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105829, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105830, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105831, "text": "broadcast_to(self, shape): Broadcasts the input array to a new shape."}
{"text_id": 1105832, "text": "broadcast_to(array, shape): Broadcast an array to a new shape."}
{"text_id": 1105833, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105834, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105835, "text": "broadcast_to(array, shape, subok=False): Broadcast an array to a new shape."}
{"text_id": 1105836, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105837, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105838, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105839, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105840, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105841, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105842, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105843, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105844, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105845, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105846, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105847, "text": "byte_bounds(a): Returns pointers to the end-points of an array."}
{"text_id": 1105848, "text": "clear(): Remove all items from list."}
{"text_id": 1105849, "text": "clear(): Remove all items from list."}
{"text_id": 1105850, "text": "clear(): Remove all items from list."}
{"text_id": 1105851, "text": "clear(): Remove all items from list."}
{"text_id": 1105852, "text": "clear(): Remove all items from list."}
{"text_id": 1105853, "text": "clear(): Remove all items from list."}
{"text_id": 1105854, "text": "clear(): Remove all items from list."}
{"text_id": 1105855, "text": "clear(): Remove all items from list."}
{"text_id": 1105856, "text": "clear(): Remove all items from list."}
{"text_id": 1105857, "text": "clear(): Remove all items from list."}
{"text_id": 1105858, "text": "clear(): Remove all items from list."}
{"text_id": 1105859, "text": "clear(): Remove all items from list."}
{"text_id": 1105860, "text": "clear(): Remove all items from list."}
{"text_id": 1105861, "text": "clear(): Remove all items from list."}
{"text_id": 1105862, "text": "clear(): Remove all items from list."}
{"text_id": 1105863, "text": "clear(): Remove all items from list."}
{"text_id": 1105864, "text": "clear(): Remove all items from list."}
{"text_id": 1105865, "text": "clear(): Remove all items from list."}
{"text_id": 1105866, "text": "clear(): Remove all items from list."}
{"text_id": 1105867, "text": "clear(): Remove all items from list."}
{"text_id": 1105868, "text": "clear(): Remove all items from list."}
{"text_id": 1105869, "text": "clear(): Remove all items from list."}
{"text_id": 1105870, "text": "clear(): Remove all items from list."}
{"text_id": 1105871, "text": "clear(): Remove all items from list."}
{"text_id": 1105872, "text": "clear(): Remove all items from list."}
{"text_id": 1105873, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105874, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105875, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105876, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105877, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105878, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105879, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105880, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105881, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105882, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105883, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105884, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105885, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105886, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105887, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105888, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105889, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105890, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105891, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105892, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105893, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105894, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105895, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105896, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105897, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105898, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105899, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105900, "text": "fromkeys(iterable, value=None, /): Create a new dictionary with keys from iterable and values set to value."}
{"text_id": 1105901, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105902, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105903, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105904, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105905, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105906, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105907, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105908, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105909, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105910, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105911, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105912, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105913, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105914, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105915, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105916, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105917, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105918, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105919, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105920, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105921, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105922, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105923, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105924, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105925, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105926, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105927, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105928, "text": "get(key, default=None, /): Return the value for key if key is in the dictionary, else default."}
{"text_id": 1105929, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105930, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105931, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105932, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105933, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105934, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105935, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105936, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105937, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105938, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105939, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105940, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105941, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105942, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105943, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105944, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105945, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105946, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105947, "text": "pop(self, i=-1, /): Return the i-th element and delete it from the array."}
{"text_id": 1105948, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105949, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105950, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105951, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105952, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105953, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105954, "text": "pop(index=-1, /): Remove and return item at index (default last)."}
{"text_id": 1105955, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105956, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105957, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105958, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105959, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105960, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105961, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105962, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105963, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105964, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105965, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105966, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105967, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105968, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105969, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105970, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105971, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105972, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105973, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105974, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105975, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105976, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105977, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105978, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105979, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105980, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105981, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105982, "text": "popitem(): Remove and return a (key, value) pair as a 2-tuple."}
{"text_id": 1105983, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105984, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105985, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105986, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105987, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105988, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105989, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105990, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105991, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105992, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105993, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105994, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105995, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105996, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105997, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105998, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1105999, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106000, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106001, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106002, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106003, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106004, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106005, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106006, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106007, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106008, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106009, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106010, "text": "setdefault(key, default=None, /): Insert key with a value of default if key is not in the dictionary."}
{"text_id": 1106011, "text": "cbrt(x, out=None, **kwargs): Return the cube-root of an array, element-wise."}
{"text_id": 1106012, "text": "cbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`cbrt`."}
{"text_id": 1106013, "text": "cbrt(x, out=None, **kwargs): Return the cube-root of an array, element-wise."}
{"text_id": 1106014, "text": "cbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`cbrt`."}
{"text_id": 1106015, "text": "cbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`cbrt`."}
{"text_id": 1106016, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106017, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106018, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106019, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106020, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106021, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106022, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106023, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106024, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106025, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106026, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106027, "text": "cdouble(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106028, "text": "ceil(a, *args, **kwargs): ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise."}
{"text_id": 1106029, "text": "ceil(x, /): Return the ceiling of x as an Integral."}
{"text_id": 1106030, "text": "ceil(x, out=None, **kwargs): Return the ceiling of the input, element-wise."}
{"text_id": 1106031, "text": "ceil(a, *args, **kwargs): ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise."}
{"text_id": 1106032, "text": "ceil(x, /): Return the ceiling of x as an Integral."}
{"text_id": 1106033, "text": "ceil(a, *args, **kwargs): ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise."}
{"text_id": 1106034, "text": "ceil(x, /): Return the ceiling of x as an Integral."}
{"text_id": 1106035, "text": "ceil(a, *args, **kwargs): ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise."}
{"text_id": 1106036, "text": "ceil(x, /): Return the ceiling of x as an Integral."}
{"text_id": 1106037, "text": "ceil(self, *args, **kwargs): Convenience fluent method for :py:func:`ceil`."}
{"text_id": 1106038, "text": "ceil(x, out=None, **kwargs): Return the ceiling of the input, element-wise."}
{"text_id": 1106039, "text": "ceil(self, *args, **kwargs): Convenience fluent method for :py:func:`ceil`."}
{"text_id": 1106040, "text": "ceil(self, *args, **kwargs): Convenience fluent method for :py:func:`ceil`."}
{"text_id": 1106041, "text": "ceil(a, *args, **kwargs): ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the ceiling of the input, element-wise."}
{"text_id": 1106042, "text": "ceil(x, /): Return the ceiling of x as an Integral."}
{"text_id": 1106043, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106044, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106045, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106046, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106047, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106048, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106049, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106050, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106051, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106052, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106053, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106054, "text": "cfloat(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106055, "text": "array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords."}
{"text_id": 1106056, "text": "array_function_dispatch(dispatcher, module=None, verify=True, docs_from_dispatcher=False): Decorator for adding dispatch with the __array_function__ protocol."}
{"text_id": 1106057, "text": "array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords."}
{"text_id": 1106058, "text": "array_function_dispatch(dispatcher, module=None, verify=True, docs_from_dispatcher=False): Decorator for adding dispatch with the __array_function__ protocol."}
{"text_id": 1106059, "text": "array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords."}
{"text_id": 1106060, "text": "array_function_dispatch(dispatcher, module=None, verify=True, docs_from_dispatcher=False): Decorator for adding dispatch with the __array_function__ protocol."}
{"text_id": 1106061, "text": "array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords."}
{"text_id": 1106062, "text": "array_function_dispatch(dispatcher, module=None, verify=True, docs_from_dispatcher=False): Decorator for adding dispatch with the __array_function__ protocol."}
{"text_id": 1106063, "text": "array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords."}
{"text_id": 1106064, "text": "array_function_dispatch(dispatcher, module=None, verify=True, docs_from_dispatcher=False): Decorator for adding dispatch with the __array_function__ protocol."}
{"text_id": 1106065, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106066, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106067, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106068, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106069, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106070, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106071, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106072, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106073, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106074, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106075, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106076, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106077, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106078, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106079, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106080, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106081, "text": "character(): Abstract base class of all character string scalar types."}
{"text_id": 1106082, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106083, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106084, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106085, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106086, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106087, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106088, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106089, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106090, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106091, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106092, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106093, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106094, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106095, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106096, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106097, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106098, "text": "chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order='C'): chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None) Provides a convenient view on arrays of string and unicode values."}
{"text_id": 1106099, "text": "equal(x1, x2): Return (x1 == x2) element-wise."}
{"text_id": 1106100, "text": "equal(a, b, *args, **kwargs): equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise."}
{"text_id": 1106101, "text": "equal(x1, x2, out=None): Return (x1 == x2) element-wise."}
{"text_id": 1106102, "text": "equal(x1, x2): Return (x1 == x2) element-wise."}
{"text_id": 1106103, "text": "equal(a, b, *args, **kwargs): equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise."}
{"text_id": 1106104, "text": "equal(x1, x2): Return (x1 == x2) element-wise."}
{"text_id": 1106105, "text": "equal(a, b, *args, **kwargs): equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise."}
{"text_id": 1106106, "text": "equal(x1, x2): Return (x1 == x2) element-wise."}
{"text_id": 1106107, "text": "equal(a, b, *args, **kwargs): equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise."}
{"text_id": 1106108, "text": "equal(x1, x2, out=None): Return (x1 == x2) element-wise."}
{"text_id": 1106109, "text": "equal(x1, x2): Return (x1 == x2) element-wise."}
{"text_id": 1106110, "text": "equal(a, b, *args, **kwargs): equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 == x2) element-wise."}
{"text_id": 1106111, "text": "greater(x1, x2): Return (x1 > x2) element-wise."}
{"text_id": 1106112, "text": "greater(a, b, *args, **kwargs): greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106113, "text": "greater(x1, x2): Return (x1 > x2) element-wise."}
{"text_id": 1106114, "text": "greater(a, b, *args, **kwargs): greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106115, "text": "greater(x1, x2): Return (x1 > x2) element-wise."}
{"text_id": 1106116, "text": "greater(a, b, *args, **kwargs): greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106117, "text": "greater(x1, x2, out=None): Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106118, "text": "greater(x1, x2): Return (x1 > x2) element-wise."}
{"text_id": 1106119, "text": "greater(a, b, *args, **kwargs): greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106120, "text": "greater(x1, x2, out=None): Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106121, "text": "greater(x1, x2): Return (x1 > x2) element-wise."}
{"text_id": 1106122, "text": "greater(a, b, *args, **kwargs): greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 > x2) element-wise."}
{"text_id": 1106123, "text": "greater_equal(x1, x2): Return (x1 >= x2) element-wise."}
{"text_id": 1106124, "text": "greater_equal(a, b, *args, **kwargs): greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106125, "text": "greater_equal(x1, x2): Return (x1 >= x2) element-wise."}
{"text_id": 1106126, "text": "greater_equal(a, b, *args, **kwargs): greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106127, "text": "greater_equal(x1, x2): Return (x1 >= x2) element-wise."}
{"text_id": 1106128, "text": "greater_equal(a, b, *args, **kwargs): greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106129, "text": "greater_equal(x1, x2, out=None): Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106130, "text": "greater_equal(x1, x2): Return (x1 >= x2) element-wise."}
{"text_id": 1106131, "text": "greater_equal(a, b, *args, **kwargs): greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106132, "text": "greater_equal(x1, x2, out=None): Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106133, "text": "greater_equal(x1, x2): Return (x1 >= x2) element-wise."}
{"text_id": 1106134, "text": "greater_equal(a, b, *args, **kwargs): greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 >= x2) element-wise."}
{"text_id": 1106135, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106136, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106137, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106138, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106139, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106140, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106141, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106142, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106143, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106144, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106145, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106146, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106147, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106148, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106149, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106150, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106151, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106152, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106153, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106154, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106155, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106156, "text": "integer(): Abstract base class of all integer scalar types."}
{"text_id": 1106157, "text": "less(x1, x2): Return (x1 < x2) element-wise."}
{"text_id": 1106158, "text": "less(a, b, *args, **kwargs): less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106159, "text": "less(x1, x2): Return (x1 < x2) element-wise."}
{"text_id": 1106160, "text": "less(a, b, *args, **kwargs): less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106161, "text": "less(x1, x2): Return (x1 < x2) element-wise."}
{"text_id": 1106162, "text": "less(a, b, *args, **kwargs): less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106163, "text": "less(x1, x2): Return (x1 < x2) element-wise."}
{"text_id": 1106164, "text": "less(a, b, *args, **kwargs): less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106165, "text": "less(x1, x2, out=None): Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106166, "text": "less(x1, x2, out=None): Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106167, "text": "less(x1, x2): Return (x1 < x2) element-wise."}
{"text_id": 1106168, "text": "less(a, b, *args, **kwargs): less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 < x2) element-wise."}
{"text_id": 1106169, "text": "less_equal(x1, x2): Return (x1 <= x2) element-wise."}
{"text_id": 1106170, "text": "less_equal(a, b, *args, **kwargs): less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106171, "text": "less_equal(x1, x2): Return (x1 <= x2) element-wise."}
{"text_id": 1106172, "text": "less_equal(a, b, *args, **kwargs): less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106173, "text": "less_equal(x1, x2): Return (x1 <= x2) element-wise."}
{"text_id": 1106174, "text": "less_equal(a, b, *args, **kwargs): less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106175, "text": "less_equal(x1, x2): Return (x1 <= x2) element-wise."}
{"text_id": 1106176, "text": "less_equal(a, b, *args, **kwargs): less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106177, "text": "less_equal(x1, x2, out=None): Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106178, "text": "less_equal(x1, x2, out=None): Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106179, "text": "less_equal(x1, x2): Return (x1 <= x2) element-wise."}
{"text_id": 1106180, "text": "less_equal(a, b, *args, **kwargs): less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the truth value of (x1 <= x2) element-wise."}
{"text_id": 1106181, "text": "mod(a, values): Return (a % i), that is pre-Python 2."}
{"text_id": 1106182, "text": "mod(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1106183, "text": "mod(a, values): Return (a % i), that is pre-Python 2."}
{"text_id": 1106184, "text": "mod(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1106185, "text": "mod(a, values): Return (a % i), that is pre-Python 2."}
{"text_id": 1106186, "text": "mod(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1106187, "text": "mod(a, values): Return (a % i), that is pre-Python 2."}
{"text_id": 1106188, "text": "mod(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1106189, "text": "mod(x1, x2, out=None, **kwargs): Return element-wise remainder of division."}
{"text_id": 1106190, "text": "mod(x1, x2, out=None, **kwargs): Return element-wise remainder of division."}
{"text_id": 1106191, "text": "mod(a, values): Return (a % i), that is pre-Python 2."}
{"text_id": 1106192, "text": "mod(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1106193, "text": "multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise."}
{"text_id": 1106194, "text": "multiply(a, b, *args, **kwargs): multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise."}
{"text_id": 1106195, "text": "multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise."}
{"text_id": 1106196, "text": "multiply(a, b, *args, **kwargs): multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise."}
{"text_id": 1106197, "text": "multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise."}
{"text_id": 1106198, "text": "multiply(a, b, *args, **kwargs): multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise."}
{"text_id": 1106199, "text": "multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise."}
{"text_id": 1106200, "text": "multiply(a, b, *args, **kwargs): multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise."}
{"text_id": 1106201, "text": "multiply(x1, x2, out=None, **kwargs): Multiply arguments element-wise."}
{"text_id": 1106202, "text": "multiply(x1, x2, out=None, **kwargs): Multiply arguments element-wise."}
{"text_id": 1106203, "text": "multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise."}
{"text_id": 1106204, "text": "multiply(a, b, *args, **kwargs): multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Multiply arguments element-wise."}
{"text_id": 1106205, "text": "ndarray(handle, writable=True): ndarray(handle, writable=True): An array object represents a multidimensional, homogeneous array of fixed-size items."}
{"text_id": 1106206, "text": "ndarray(handle, writable=True): ndarray(handle, writable=True): An array object represents a multidimensional, homogeneous array of fixed-size items."}
{"text_id": 1106207, "text": "not_equal(x1, x2): Return (x1 != x2) element-wise."}
{"text_id": 1106208, "text": "not_equal(a, b, *args, **kwargs): not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise."}
{"text_id": 1106209, "text": "not_equal(x1, x2): Return (x1 != x2) element-wise."}
{"text_id": 1106210, "text": "not_equal(a, b, *args, **kwargs): not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise."}
{"text_id": 1106211, "text": "not_equal(x1, x2): Return (x1 != x2) element-wise."}
{"text_id": 1106212, "text": "not_equal(a, b, *args, **kwargs): not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise."}
{"text_id": 1106213, "text": "not_equal(x1, x2): Return (x1 != x2) element-wise."}
{"text_id": 1106214, "text": "not_equal(a, b, *args, **kwargs): not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise."}
{"text_id": 1106215, "text": "not_equal(x1, x2, out=None): Return (x1 != x2) element-wise."}
{"text_id": 1106216, "text": "not_equal(x1, x2, out=None): Return (x1 != x2) element-wise."}
{"text_id": 1106217, "text": "not_equal(x1, x2): Return (x1 != x2) element-wise."}
{"text_id": 1106218, "text": "not_equal(a, b, *args, **kwargs): not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return (x1 != x2) element-wise."}
{"text_id": 1106219, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106220, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106221, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106222, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106223, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106224, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106225, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106226, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106227, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106228, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106229, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106230, "text": "set_module(module): Decorator for overriding __module__ on a function or class."}
{"text_id": 1106231, "text": "str_len(a): Return len(a) element-wise."}
{"text_id": 1106232, "text": "str_len(a): Return len(a) element-wise."}
{"text_id": 1106233, "text": "str_len(a): Return len(a) element-wise."}
{"text_id": 1106234, "text": "str_len(a): Return len(a) element-wise."}
{"text_id": 1106235, "text": "str_len(a): Return len(a) element-wise."}
{"text_id": 1106236, "text": "dot(a, b, strict=False, out=None): Return the dot product of two arrays."}
{"text_id": 1106237, "text": "dot(a, b, out=None): Dot product of two arrays."}
{"text_id": 1106238, "text": "dot(a, b, strict=False, out=None): Return the dot product of two arrays."}
{"text_id": 1106239, "text": "dot(a, b, strict=False, out=None): Return the dot product of two arrays."}
{"text_id": 1106240, "text": "dot(a, b, strict=False, out=None): Return the dot product of two arrays."}
{"text_id": 1106241, "text": "dot(self, b, out=None): Dot product of two arrays."}
{"text_id": 1106242, "text": "dot(self, b, out=None): Dot product of two arrays."}
{"text_id": 1106243, "text": "dot(a, b, strict=False, out=None): Return the dot product of two arrays."}
{"text_id": 1106244, "text": "tobytes(self, /): Convert the array to an array of machine values and return the bytes representation."}
{"text_id": 1106245, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106246, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106247, "text": "column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106248, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106249, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106250, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106251, "text": "column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106252, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106253, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106254, "text": "column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106255, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106256, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106257, "text": "column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106258, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106259, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106260, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106261, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106262, "text": "column_stack(tup): Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106263, "text": "column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array."}
{"text_id": 1106264, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106265, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106266, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106267, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106268, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106269, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106270, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106271, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106272, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106273, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106274, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106275, "text": "common_type(*arrays): Return a scalar type which is common to the input arrays."}
{"text_id": 1106276, "text": "Path(*args, **kwargs): PurePath subclass that can make system calls."}
{"text_id": 1106277, "text": "Path(*args, **kwargs): PurePath subclass that can make system calls."}
{"text_id": 1106278, "text": "Path(*args, **kwargs): PurePath subclass that can make system calls."}
{"text_id": 1106279, "text": "Path(*args, **kwargs): PurePath subclass that can make system calls."}
{"text_id": 1106280, "text": "Path(*args, **kwargs): PurePath subclass that can make system calls."}
{"text_id": 1106281, "text": "contextlib_nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1106282, "text": "contextlib_nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1106283, "text": "contextlib_nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1106284, "text": "contextlib_nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1106285, "text": "contextlib_nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1106286, "text": "formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x7f7ee995c160>, formatvarkw=<function <lambda> at 0x7f7ee995c1f0>, formatvalue=<function <lambda> at 0x7f7ee995c280>, join=<function joinseq at 0x7f7ee995c040>): Format an argument spec from the 4 values returned by getargspec."}
{"text_id": 1106287, "text": "formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x7f7ee995c160>, formatvarkw=<function <lambda> at 0x7f7ee995c1f0>, formatvalue=<function <lambda> at 0x7f7ee995c280>, join=<function joinseq at 0x7f7ee995c040>): Format an argument spec from the 4 values returned by getargspec."}
{"text_id": 1106288, "text": "formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x7f7ee995c160>, formatvarkw=<function <lambda> at 0x7f7ee995c1f0>, formatvalue=<function <lambda> at 0x7f7ee995c280>, join=<function joinseq at 0x7f7ee995c040>): Format an argument spec from the 4 values returned by getargspec."}
{"text_id": 1106289, "text": "formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x7f7ee995c160>, formatvarkw=<function <lambda> at 0x7f7ee995c1f0>, formatvalue=<function <lambda> at 0x7f7ee995c280>, join=<function joinseq at 0x7f7ee995c040>): Format an argument spec from the 4 values returned by getargspec."}
{"text_id": 1106290, "text": "formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x7f7ee995c160>, formatvarkw=<function <lambda> at 0x7f7ee995c1f0>, formatvalue=<function <lambda> at 0x7f7ee995c280>, join=<function joinseq at 0x7f7ee995c040>): Format an argument spec from the 4 values returned by getargspec."}
{"text_id": 1106291, "text": "getargspec(func): Get the names and default values of a function's arguments."}
{"text_id": 1106292, "text": "getargspec(func): Get the names and default values of a function's arguments."}
{"text_id": 1106293, "text": "getargspec(func): Get the names and default values of a function's arguments."}
{"text_id": 1106294, "text": "getargspec(func): Get the names and default values of a function's arguments."}
{"text_id": 1106295, "text": "getargspec(func): Get the names and default values of a function's arguments."}
{"text_id": 1106296, "text": "is_pathlib_path(obj): Check whether obj is a `pathlib."}
{"text_id": 1106297, "text": "is_pathlib_path(obj): Check whether obj is a `pathlib."}
{"text_id": 1106298, "text": "is_pathlib_path(obj): Check whether obj is a `pathlib."}
{"text_id": 1106299, "text": "is_pathlib_path(obj): Check whether obj is a `pathlib."}
{"text_id": 1106300, "text": "is_pathlib_path(obj): Check whether obj is a `pathlib."}
{"text_id": 1106301, "text": "npy_load_module(name, fn, info=None): Load a module."}
{"text_id": 1106302, "text": "npy_load_module(name, fn, info=None): Load a module."}
{"text_id": 1106303, "text": "npy_load_module(name, fn, info=None): Load a module."}
{"text_id": 1106304, "text": "npy_load_module(name, fn, info=None): Load a module."}
{"text_id": 1106305, "text": "npy_load_module(name, fn, info=None): Load a module."}
{"text_id": 1106306, "text": "os_PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1106307, "text": "os_PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1106308, "text": "os_PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1106309, "text": "os_PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1106310, "text": "os_PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1106311, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106312, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106313, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106314, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106315, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106316, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106317, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106318, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106319, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106320, "text": "os_fspath(path): Return the file system path representation of the object."}
{"text_id": 1106321, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106322, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106323, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106324, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106325, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106326, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106327, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106328, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106329, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106330, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106331, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106332, "text": "complex128(real=0, imag=0): Complex number type composed of two double-precision floating-point numbers, compatible with Python `complex`."}
{"text_id": 1106333, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106334, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106335, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106336, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106337, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106338, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106339, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106340, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106341, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106342, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106343, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106344, "text": "complexfloating(): Abstract base class of all complex number scalar types that are made up of floating-point numbers."}
{"text_id": 1106345, "text": "concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis."}
{"text_id": 1106346, "text": "concatenate(seq, axis=0, out=None): Join a sequence of arrays along an existing axis."}
{"text_id": 1106347, "text": "concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis."}
{"text_id": 1106348, "text": "concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis."}
{"text_id": 1106349, "text": "concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis."}
{"text_id": 1106350, "text": "concatenate(seq, axis=0, out=None): Join a sequence of arrays along an existing axis."}
{"text_id": 1106351, "text": "concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis."}
{"text_id": 1106352, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106353, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106354, "text": "convolve(a, v, mode='full', propagate_mask=True): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106355, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106356, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106357, "text": "convolve(a, v, mode='full', propagate_mask=True): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106358, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106359, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106360, "text": "convolve(a, v, mode='full', propagate_mask=True): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106361, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106362, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106363, "text": "convolve(a, v, mode='full', propagate_mask=True): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106364, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106365, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106366, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106367, "text": "convolve(a, v, mode='full'): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106368, "text": "convolve(a, v, mode='full', propagate_mask=True): Returns the discrete, linear convolution of two one-dimensional sequences."}
{"text_id": 1106369, "text": "copysign(x, y, /): Return a float with the magnitude (absolute value) of x but the sign of y."}
{"text_id": 1106370, "text": "copysign(x1, x2, out=None, **kwargs): Change the sign of x1 to that of x2, element-wise."}
{"text_id": 1106371, "text": "copysign(x, y, /): Return a float with the magnitude (absolute value) of x but the sign of y."}
{"text_id": 1106372, "text": "copysign(x, y, /): Return a float with the magnitude (absolute value) of x but the sign of y."}
{"text_id": 1106373, "text": "copysign(x, y, /): Return a float with the magnitude (absolute value) of x but the sign of y."}
{"text_id": 1106374, "text": "copysign(x1, x2, out=None, **kwargs): Change the sign of x1 to that of x2, element-wise."}
{"text_id": 1106375, "text": "copysign(x, y, /): Return a float with the magnitude (absolute value) of x but the sign of y."}
{"text_id": 1106376, "text": "copyto(self, other): Copies the value of this array to another array."}
{"text_id": 1106377, "text": "copyto(self, other): Copies the value of this array to another array."}
{"text_id": 1106378, "text": "copyto(self, other): Copies the value of this array to another array."}
{"text_id": 1106379, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106380, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106381, "text": "correlate(a, v, mode='valid', propagate_mask=True): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106382, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106383, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106384, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106385, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106386, "text": "correlate(a, v, mode='valid', propagate_mask=True): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106387, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106388, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106389, "text": "correlate(a, v, mode='valid', propagate_mask=True): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106390, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106391, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106392, "text": "correlate(a, v, mode='valid', propagate_mask=True): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106393, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106394, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106395, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106396, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106397, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106398, "text": "correlate(a, v, mode='valid'): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106399, "text": "correlate(a, v, mode='valid', propagate_mask=True): Cross-correlation of two 1-dimensional sequences."}
{"text_id": 1106400, "text": "cos(a, *args, **kwargs): cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise."}
{"text_id": 1106401, "text": "cos(x, /): Return the cosine of x (measured in radians)."}
{"text_id": 1106402, "text": "cos(x, out=None, **kwargs): Cosine, element-wise."}
{"text_id": 1106403, "text": "cos(a, *args, **kwargs): cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise."}
{"text_id": 1106404, "text": "cos(x, /): Return the cosine of x (measured in radians)."}
{"text_id": 1106405, "text": "cos(a, *args, **kwargs): cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise."}
{"text_id": 1106406, "text": "cos(x, /): Return the cosine of x (measured in radians)."}
{"text_id": 1106407, "text": "cos(a, *args, **kwargs): cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise."}
{"text_id": 1106408, "text": "cos(x, /): Return the cosine of x (measured in radians)."}
{"text_id": 1106409, "text": "cos(self, *args, **kwargs): Convenience fluent method for :py:func:`cos`."}
{"text_id": 1106410, "text": "cos(x, out=None, **kwargs): Cosine, element-wise."}
{"text_id": 1106411, "text": "cos(self, *args, **kwargs): Convenience fluent method for :py:func:`cos`."}
{"text_id": 1106412, "text": "cos(self, *args, **kwargs): Convenience fluent method for :py:func:`cos`."}
{"text_id": 1106413, "text": "cos(a, *args, **kwargs): cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Cosine element-wise."}
{"text_id": 1106414, "text": "cos(x, /): Return the cosine of x (measured in radians)."}
{"text_id": 1106415, "text": "cosh(a, *args, **kwargs): cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise."}
{"text_id": 1106416, "text": "cosh(x, /): Return the hyperbolic cosine of x."}
{"text_id": 1106417, "text": "cosh(x, out=None, **kwargs): Hyperbolic cosine, element-wise."}
{"text_id": 1106418, "text": "cosh(a, *args, **kwargs): cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise."}
{"text_id": 1106419, "text": "cosh(x, /): Return the hyperbolic cosine of x."}
{"text_id": 1106420, "text": "cosh(a, *args, **kwargs): cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise."}
{"text_id": 1106421, "text": "cosh(x, /): Return the hyperbolic cosine of x."}
{"text_id": 1106422, "text": "cosh(a, *args, **kwargs): cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise."}
{"text_id": 1106423, "text": "cosh(x, /): Return the hyperbolic cosine of x."}
{"text_id": 1106424, "text": "cosh(self, *args, **kwargs): Convenience fluent method for :py:func:`cosh`."}
{"text_id": 1106425, "text": "cosh(x, out=None, **kwargs): Hyperbolic cosine, element-wise."}
{"text_id": 1106426, "text": "cosh(self, *args, **kwargs): Convenience fluent method for :py:func:`cosh`."}
{"text_id": 1106427, "text": "cosh(self, *args, **kwargs): Convenience fluent method for :py:func:`cosh`."}
{"text_id": 1106428, "text": "cosh(a, *args, **kwargs): cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic cosine, element-wise."}
{"text_id": 1106429, "text": "cosh(x, /): Return the hyperbolic cosine of x."}
{"text_id": 1106430, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106431, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106432, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106433, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106434, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106435, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106436, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106437, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106438, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106439, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106440, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106441, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106442, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106443, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106444, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106445, "text": "count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``."}
{"text_id": 1106446, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106447, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106448, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106449, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106450, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106451, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106452, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106453, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106454, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106455, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106456, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106457, "text": "cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors."}
{"text_id": 1106458, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106459, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106460, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106461, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106462, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106463, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106464, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106465, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106466, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106467, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106468, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106469, "text": "cumproduct(*args, **kwargs): Return the cumulative product over the given axis."}
{"text_id": 1106470, "text": "deg2rad(x, out=None, **kwargs): Convert angles from degrees to radians."}
{"text_id": 1106471, "text": "deg2rad(x, out=None, **kwargs): Convert angles from degrees to radians."}
{"text_id": 1106472, "text": "degrees(x, /): Convert angle x from radians to degrees."}
{"text_id": 1106473, "text": "degrees(x, out=None, **kwargs): Convert angles from radians to degrees."}
{"text_id": 1106474, "text": "degrees(x, /): Convert angle x from radians to degrees."}
{"text_id": 1106475, "text": "degrees(x, /): Convert angle x from radians to degrees."}
{"text_id": 1106476, "text": "degrees(x, /): Convert angle x from radians to degrees."}
{"text_id": 1106477, "text": "degrees(self, *args, **kwargs): Convenience fluent method for :py:func:`degrees`."}
{"text_id": 1106478, "text": "degrees(x, out=None, **kwargs): Convert angles from radians to degrees."}
{"text_id": 1106479, "text": "degrees(self, *args, **kwargs): Convenience fluent method for :py:func:`degrees`."}
{"text_id": 1106480, "text": "degrees(self, *args, **kwargs): Convenience fluent method for :py:func:`degrees`."}
{"text_id": 1106481, "text": "degrees(x, /): Convert angle x from radians to degrees."}
{"text_id": 1106482, "text": "divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1106483, "text": "divide(x1, x2, out=None, **kwargs): Returns a true division of the inputs, element-wise."}
{"text_id": 1106484, "text": "divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1106485, "text": "divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1106486, "text": "divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1106487, "text": "divide(x1, x2, out=None, **kwargs): Returns a true division of the inputs, element-wise."}
{"text_id": 1106488, "text": "divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1106489, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106490, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106491, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106492, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106493, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106494, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106495, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106496, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106497, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106498, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106499, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106500, "text": "double(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106501, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106502, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106503, "text": "einsum(*operands, **kwargs): einsum(subscripts, *operands, out=None, optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106504, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106505, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106506, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106507, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106508, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106509, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106510, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106511, "text": "einsum(*operands, **kwargs): einsum(subscripts, *operands, out=None, optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106512, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106513, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106514, "text": "einsum(*operands, out=None, optimize=False, **kwargs): einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False) Evaluates the Einstein summation convention on the operands."}
{"text_id": 1106515, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106516, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106517, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106518, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106519, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106520, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106521, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106522, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106523, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106524, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106525, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106526, "text": "einsum_path(*operands, optimize='greedy', einsum_call=False): einsum_path(subscripts, *operands, optimize='greedy') Evaluates the lowest cost contraction order for an einsum expression by considering the creation of intermediate arrays."}
{"text_id": 1106527, "text": "empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106528, "text": "empty(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106529, "text": "empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106530, "text": "empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106531, "text": "empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106532, "text": "empty(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106533, "text": "empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries."}
{"text_id": 1106534, "text": "empty_like(*args, **params): empty_like(*args, **kwargs) empty_like(prototype, dtype=None, order='K', subok=True, shape=None) Return a new array with the same shape and type as a given array."}
{"text_id": 1106535, "text": "empty_like(prototype, dtype=None, order='C', subok=False, shape=None): Return a new array with the same shape and type as a given array."}
{"text_id": 1106536, "text": "empty_like(*args, **params): empty_like(*args, **kwargs) empty_like(prototype, dtype=None, order='K', subok=True, shape=None) Return a new array with the same shape and type as a given array."}
{"text_id": 1106537, "text": "empty_like(*args, **params): empty_like(*args, **kwargs) empty_like(prototype, dtype=None, order='K', subok=True, shape=None) Return a new array with the same shape and type as a given array."}
{"text_id": 1106538, "text": "empty_like(*args, **params): empty_like(*args, **kwargs) empty_like(prototype, dtype=None, order='K', subok=True, shape=None) Return a new array with the same shape and type as a given array."}
{"text_id": 1106539, "text": "empty_like(prototype, dtype=None, order='C', subok=False, shape=None): Return a new array with the same shape and type as a given array."}
{"text_id": 1106540, "text": "empty_like(*args, **params): empty_like(*args, **kwargs) empty_like(prototype, dtype=None, order='K', subok=True, shape=None) Return a new array with the same shape and type as a given array."}
{"text_id": 1106541, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106542, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106543, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106544, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106545, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106546, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106547, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106548, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106549, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106550, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106551, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106552, "text": "errstate(*, call=<numpy.core._ufunc_config._unspecified object at 0x7f7ee9927b50>, **kwargs): errstate(**kwargs) Context manager for floating-point error handling."}
{"text_id": 1106553, "text": "exp(a, *args, **kwargs): exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array."}
{"text_id": 1106554, "text": "exp(x, /): Return e raised to the power of x."}
{"text_id": 1106555, "text": "exp(x, out=None, **kwargs): Calculate the exponential of all elements in the input array."}
{"text_id": 1106556, "text": "exp(a, *args, **kwargs): exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array."}
{"text_id": 1106557, "text": "exp(x, /): Return e raised to the power of x."}
{"text_id": 1106558, "text": "exp(a, *args, **kwargs): exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array."}
{"text_id": 1106559, "text": "exp(x, /): Return e raised to the power of x."}
{"text_id": 1106560, "text": "exp(a, *args, **kwargs): exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array."}
{"text_id": 1106561, "text": "exp(x, /): Return e raised to the power of x."}
{"text_id": 1106562, "text": "exp(self, *args, **kwargs): Convenience fluent method for :py:func:`exp`."}
{"text_id": 1106563, "text": "exp(x, out=None, **kwargs): Calculate the exponential of all elements in the input array."}
{"text_id": 1106564, "text": "exp(self, *args, **kwargs): Convenience fluent method for :py:func:`exp`."}
{"text_id": 1106565, "text": "exp(self, *args, **kwargs): Convenience fluent method for :py:func:`exp`."}
{"text_id": 1106566, "text": "exp(a, *args, **kwargs): exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the exponential of all elements in the input array."}
{"text_id": 1106567, "text": "exp(x, /): Return e raised to the power of x."}
{"text_id": 1106568, "text": "expm1(x, /): Return exp(x)-1."}
{"text_id": 1106569, "text": "expm1(x, out=None, **kwargs): Calculate `exp(x) - 1` for all elements in the array."}
{"text_id": 1106570, "text": "expm1(x, /): Return exp(x)-1."}
{"text_id": 1106571, "text": "expm1(x, /): Return exp(x)-1."}
{"text_id": 1106572, "text": "expm1(x, /): Return exp(x)-1."}
{"text_id": 1106573, "text": "expm1(self, *args, **kwargs): Convenience fluent method for :py:func:`expm1`."}
{"text_id": 1106574, "text": "expm1(x, out=None, **kwargs): Calculate `exp(x) - 1` for all elements in the array."}
{"text_id": 1106575, "text": "expm1(self, *args, **kwargs): Convenience fluent method for :py:func:`expm1`."}
{"text_id": 1106576, "text": "expm1(self, *args, **kwargs): Convenience fluent method for :py:func:`expm1`."}
{"text_id": 1106577, "text": "expm1(x, /): Return exp(x)-1."}
{"text_id": 1106578, "text": "fabs(a, *args, **kwargs): fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise."}
{"text_id": 1106579, "text": "fabs(x, /): Return the absolute value of the float x."}
{"text_id": 1106580, "text": "fabs(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1106581, "text": "fabs(a, *args, **kwargs): fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise."}
{"text_id": 1106582, "text": "fabs(x, /): Return the absolute value of the float x."}
{"text_id": 1106583, "text": "fabs(a, *args, **kwargs): fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise."}
{"text_id": 1106584, "text": "fabs(x, /): Return the absolute value of the float x."}
{"text_id": 1106585, "text": "fabs(a, *args, **kwargs): fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise."}
{"text_id": 1106586, "text": "fabs(x, /): Return the absolute value of the float x."}
{"text_id": 1106587, "text": "fabs(x, out=None, **kwargs): Calculate the absolute value element-wise."}
{"text_id": 1106588, "text": "fabs(a, *args, **kwargs): fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the absolute values element-wise."}
{"text_id": 1106589, "text": "fabs(x, /): Return the absolute value of the float x."}
{"text_id": 1106590, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106591, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106592, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106593, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106594, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106595, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106596, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106597, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106598, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106599, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106600, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106601, "text": "find_common_type(array_types, scalar_types): Determine common type following standard coercion rules."}
{"text_id": 1106602, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106603, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106604, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106605, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106606, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106607, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106608, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106609, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106610, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106611, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106612, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106613, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106614, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106615, "text": "finfo(dtype): finfo(dtype) Machine limits for floating point types."}
{"text_id": 1106616, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106617, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106618, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106619, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106620, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106621, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106622, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106623, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106624, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106625, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106626, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106627, "text": "flatiter(): Flat iterator object to iterate over arrays."}
{"text_id": 1106628, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106629, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106630, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106631, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106632, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106633, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106634, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106635, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106636, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106637, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106638, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106639, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106640, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106641, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106642, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106643, "text": "flatnonzero(a): Return indices that are non-zero in the flattened version of a."}
{"text_id": 1106644, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106645, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106646, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106647, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106648, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106649, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106650, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106651, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106652, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106653, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106654, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106655, "text": "flexible(): Abstract base class of all scalar types without predefined length."}
{"text_id": 1106656, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106657, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106658, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106659, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106660, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106661, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106662, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106663, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106664, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106665, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106666, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106667, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106668, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106669, "text": "float64(x=0, /): Double-precision floating-point number type, compatible with Python `float` and C ``double``."}
{"text_id": 1106670, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106671, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106672, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106673, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106674, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106675, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106676, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106677, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106678, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106679, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106680, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106681, "text": "floating(): Abstract base class of all floating-point scalar types."}
{"text_id": 1106682, "text": "floor(a, *args, **kwargs): floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise."}
{"text_id": 1106683, "text": "floor(x, /): Return the floor of x as an Integral."}
{"text_id": 1106684, "text": "floor(a, *args, **kwargs): floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise."}
{"text_id": 1106685, "text": "floor(x, /): Return the floor of x as an Integral."}
{"text_id": 1106686, "text": "floor(a, *args, **kwargs): floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise."}
{"text_id": 1106687, "text": "floor(x, /): Return the floor of x as an Integral."}
{"text_id": 1106688, "text": "floor(x, out=None, **kwargs): Return the floor of the input, element-wise."}
{"text_id": 1106689, "text": "floor(a, *args, **kwargs): floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise."}
{"text_id": 1106690, "text": "floor(x, /): Return the floor of x as an Integral."}
{"text_id": 1106691, "text": "floor(self, *args, **kwargs): Convenience fluent method for :py:func:`floor`."}
{"text_id": 1106692, "text": "floor(x, out=None, **kwargs): Return the floor of the input, element-wise."}
{"text_id": 1106693, "text": "floor(self, *args, **kwargs): Convenience fluent method for :py:func:`floor`."}
{"text_id": 1106694, "text": "floor(self, *args, **kwargs): Convenience fluent method for :py:func:`floor`."}
{"text_id": 1106695, "text": "floor(a, *args, **kwargs): floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the floor of the input, element-wise."}
{"text_id": 1106696, "text": "floor(x, /): Return the floor of x as an Integral."}
{"text_id": 1106697, "text": "floor_divide(a, b, *args, **kwargs): floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs."}
{"text_id": 1106698, "text": "floor_divide(a, b, *args, **kwargs): floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs."}
{"text_id": 1106699, "text": "floor_divide(a, b, *args, **kwargs): floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs."}
{"text_id": 1106700, "text": "floor_divide(a, b, *args, **kwargs): floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs."}
{"text_id": 1106701, "text": "floor_divide(a, b, *args, **kwargs): floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the largest integer smaller or equal to the division of the inputs."}
{"text_id": 1106702, "text": "fmod(a, b, *args, **kwargs): fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division."}
{"text_id": 1106703, "text": "fmod(x, y, /): Return fmod(x, y), according to platform C."}
{"text_id": 1106704, "text": "fmod(a, b, *args, **kwargs): fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division."}
{"text_id": 1106705, "text": "fmod(x, y, /): Return fmod(x, y), according to platform C."}
{"text_id": 1106706, "text": "fmod(a, b, *args, **kwargs): fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division."}
{"text_id": 1106707, "text": "fmod(x, y, /): Return fmod(x, y), according to platform C."}
{"text_id": 1106708, "text": "fmod(a, b, *args, **kwargs): fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division."}
{"text_id": 1106709, "text": "fmod(x, y, /): Return fmod(x, y), according to platform C."}
{"text_id": 1106710, "text": "fmod(a, b, *args, **kwargs): fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the element-wise remainder of division."}
{"text_id": 1106711, "text": "fmod(x, y, /): Return fmod(x, y), according to platform C."}
{"text_id": 1106712, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106713, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106714, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106715, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106716, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106717, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106718, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106719, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106720, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106721, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106722, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106723, "text": "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None): Format a floating-point scalar as a decimal string in positional notation."}
{"text_id": 1106724, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106725, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106726, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106727, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106728, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106729, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106730, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106731, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106732, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106733, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106734, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106735, "text": "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None): Format a floating-point scalar as a decimal string in scientific notation."}
{"text_id": 1106736, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106737, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106738, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106739, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106740, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106741, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106742, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106743, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106744, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106745, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106746, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106747, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106748, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106749, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106750, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106751, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106752, "text": "format_parser(formats, names, titles, aligned=False, byteorder=None): Class to convert formats, names, titles description to a dtype."}
{"text_id": 1106753, "text": "frexp(x, /): Return the mantissa and exponent of x, as pair (m, e)."}
{"text_id": 1106754, "text": "frexp(x, /): Return the mantissa and exponent of x, as pair (m, e)."}
{"text_id": 1106755, "text": "frexp(x, /): Return the mantissa and exponent of x, as pair (m, e)."}
{"text_id": 1106756, "text": "frexp(x, /): Return the mantissa and exponent of x, as pair (m, e)."}
{"text_id": 1106757, "text": "frexp(x, /): Return the mantissa and exponent of x, as pair (m, e)."}
{"text_id": 1106758, "text": "frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array."}
{"text_id": 1106759, "text": "frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array."}
{"text_id": 1106760, "text": "frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array."}
{"text_id": 1106761, "text": "frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array."}
{"text_id": 1106762, "text": "frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array."}
{"text_id": 1106763, "text": "fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data."}
{"text_id": 1106764, "text": "fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data."}
{"text_id": 1106765, "text": "fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data."}
{"text_id": 1106766, "text": "fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data."}
{"text_id": 1106767, "text": "fromfile(self, f, n, /): Read n objects from the file object f and append them to the end of the array."}
{"text_id": 1106768, "text": "fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data."}
{"text_id": 1106769, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106770, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106771, "text": "fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate."}
{"text_id": 1106772, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106773, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106774, "text": "fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate."}
{"text_id": 1106775, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106776, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106777, "text": "fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate."}
{"text_id": 1106778, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106779, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106780, "text": "fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate."}
{"text_id": 1106781, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106782, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106783, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106784, "text": "fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate."}
{"text_id": 1106785, "text": "fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate."}
{"text_id": 1106786, "text": "fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances."}
{"text_id": 1106787, "text": "fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances."}
{"text_id": 1106788, "text": "fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances."}
{"text_id": 1106789, "text": "fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances."}
{"text_id": 1106790, "text": "fromstring(self, buffer, /): Appends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method)."}
{"text_id": 1106791, "text": "fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances."}
{"text_id": 1106792, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106793, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106794, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106795, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106796, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106797, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106798, "text": "full(shape, fill_value, dtype=None, order='C', ctx=None, out=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106799, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106800, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106801, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106802, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106803, "text": "full(shape, fill_value, dtype=None, order='C', ctx=None, out=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106804, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106805, "text": "full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`."}
{"text_id": 1106806, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106807, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106808, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106809, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106810, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106811, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106812, "text": "full_like(a, fill_value, dtype=None, order='C', ctx=None, out=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106813, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106814, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106815, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106816, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106817, "text": "full_like(a, fill_value, dtype=None, order='C', ctx=None, out=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106818, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106819, "text": "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None): Return a full array with the same shape and type as a given array."}
{"text_id": 1106820, "text": "gcd(x, y, /): greatest common divisor of x and y."}
{"text_id": 1106821, "text": "gcd(x, y, /): greatest common divisor of x and y."}
{"text_id": 1106822, "text": "gcd(x, y, /): greatest common divisor of x and y."}
{"text_id": 1106823, "text": "gcd(x, y, /): greatest common divisor of x and y."}
{"text_id": 1106824, "text": "gcd(x, y, /): greatest common divisor of x and y."}
{"text_id": 1106825, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106826, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106827, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106828, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106829, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106830, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106831, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106832, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106833, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106834, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106835, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106836, "text": "generic(): Base class for numpy scalar types."}
{"text_id": 1106837, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106838, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106839, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106840, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106841, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106842, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106843, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106844, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106845, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106846, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106847, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106848, "text": "geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0): Return numbers spaced evenly on a log scale (a geometric progression)."}
{"text_id": 1106849, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106850, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106851, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106852, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106853, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106854, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106855, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106856, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106857, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106858, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106859, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106860, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106861, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106862, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106863, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106864, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106865, "text": "get_printoptions(): Return the current print options."}
{"text_id": 1106866, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106867, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106868, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106869, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106870, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106871, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106872, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106873, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106874, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106875, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106876, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106877, "text": "getbufsize(): Return the size of the buffer used in ufuncs."}
{"text_id": 1106878, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106879, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106880, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106881, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106882, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106883, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106884, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106885, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106886, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106887, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106888, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106889, "text": "geterr(): Get the current way of handling floating-point errors."}
{"text_id": 1106890, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106891, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106892, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106893, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106894, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106895, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106896, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106897, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106898, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106899, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106900, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106901, "text": "geterrcall(): Return the current callback function used on floating-point errors."}
{"text_id": 1106902, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106903, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106904, "text": "hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106905, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106906, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106907, "text": "hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106908, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106909, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106910, "text": "hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106911, "text": "hstack(arrays): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106912, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106913, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106914, "text": "hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106915, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106916, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106917, "text": "hstack(arrays): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106918, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106919, "text": "hstack(tup): Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106920, "text": "hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise)."}
{"text_id": 1106921, "text": "hypot(a, b, *args, **kwargs): hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106922, "text": "hypot(a, b, *args, **kwargs): hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106923, "text": "hypot(a, b, *args, **kwargs): hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106924, "text": "hypot(x1, x2, out=None, **kwargs): Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106925, "text": "hypot(a, b, *args, **kwargs): hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106926, "text": "hypot(x1, x2, out=None, **kwargs): Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106927, "text": "hypot(a, b, *args, **kwargs): hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Given the \"legs\" of a right triangle, return its hypotenuse."}
{"text_id": 1106928, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106929, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106930, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106931, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106932, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106933, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106934, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106935, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106936, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106937, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106938, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106939, "text": "iinfo(int_type): iinfo(type) Machine limits for integer types."}
{"text_id": 1106940, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106941, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106942, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106943, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106944, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106945, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106946, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106947, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106948, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106949, "text": "indices(dimensions, dtype=<class 'numpy.int32'>, ctx=None): Return an array representing the indices of a grid."}
{"text_id": 1106950, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106951, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106952, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106953, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106954, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106955, "text": "indices(dimensions, dtype=<class 'numpy.int32'>, ctx=None): Return an array representing the indices of a grid."}
{"text_id": 1106956, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106957, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106958, "text": "indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid."}
{"text_id": 1106959, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106960, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106961, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106962, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106963, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106964, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106965, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106966, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106967, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106968, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106969, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106970, "text": "inexact(): Abstract base class of all numeric scalar types with a (potentially) inexact representation of the values in its range, such as floating-point numbers."}
{"text_id": 1106971, "text": "inner(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1106972, "text": "inner(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1106973, "text": "inner(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1106974, "text": "inner(a, b): Inner product of two arrays."}
{"text_id": 1106975, "text": "inner(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1106976, "text": "inner(a, b): Inner product of two arrays."}
{"text_id": 1106977, "text": "inner(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1106978, "text": "invert(x, out=None, **kwargs): Compute bit-wise inversion, or bit-wise NOT, element-wise."}
{"text_id": 1106979, "text": "invert(x, out=None, **kwargs): Compute bit-wise inversion, or bit-wise NOT, element-wise."}
{"text_id": 1106980, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106981, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106982, "text": "isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0): Determine whether two floating point numbers are close in value."}
{"text_id": 1106983, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106984, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106985, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106986, "text": "isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0): Determine whether two floating point numbers are close in value."}
{"text_id": 1106987, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106988, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106989, "text": "isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0): Determine whether two floating point numbers are close in value."}
{"text_id": 1106990, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106991, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106992, "text": "isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0): Determine whether two floating point numbers are close in value."}
{"text_id": 1106993, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106994, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106995, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106996, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106997, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106998, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1106999, "text": "isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance."}
{"text_id": 1107000, "text": "isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0): Determine whether two floating point numbers are close in value."}
{"text_id": 1107001, "text": "isfinite(x, /): Return True if x is neither an infinity nor a NaN, and False otherwise."}
{"text_id": 1107002, "text": "isfinite(x, /): Return True if x is neither an infinity nor a NaN, and False otherwise."}
{"text_id": 1107003, "text": "isfinite(x, /): Return True if x is neither an infinity nor a NaN, and False otherwise."}
{"text_id": 1107004, "text": "isfinite(x, /): Return True if x is neither an infinity nor a NaN, and False otherwise."}
{"text_id": 1107005, "text": "isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number)."}
{"text_id": 1107006, "text": "isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number)."}
{"text_id": 1107007, "text": "isfinite(x, /): Return True if x is neither an infinity nor a NaN, and False otherwise."}
{"text_id": 1107008, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107009, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107010, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107011, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107012, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107013, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107014, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107015, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107016, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107017, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107018, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107019, "text": "isfortran(a): Check if the array is Fortran contiguous but *not* C contiguous."}
{"text_id": 1107020, "text": "isinf(x, /): Return True if x is a positive or negative infinity, and False otherwise."}
{"text_id": 1107021, "text": "isinf(x, /): Return True if x is a positive or negative infinity, and False otherwise."}
{"text_id": 1107022, "text": "isinf(x, /): Return True if x is a positive or negative infinity, and False otherwise."}
{"text_id": 1107023, "text": "isinf(x, /): Return True if x is a positive or negative infinity, and False otherwise."}
{"text_id": 1107024, "text": "isinf(x, out=None, **kwargs): Test element-wise for positive or negative infinity."}
{"text_id": 1107025, "text": "isinf(x, out=None, **kwargs): Test element-wise for positive or negative infinity."}
{"text_id": 1107026, "text": "isinf(x, /): Return True if x is a positive or negative infinity, and False otherwise."}
{"text_id": 1107027, "text": "isnan(x, /): Return True if x is a NaN (not a number), and False otherwise."}
{"text_id": 1107028, "text": "isnan(x, /): Return True if x is a NaN (not a number), and False otherwise."}
{"text_id": 1107029, "text": "isnan(x, /): Return True if x is a NaN (not a number), and False otherwise."}
{"text_id": 1107030, "text": "isnan(x, /): Return True if x is a NaN (not a number), and False otherwise."}
{"text_id": 1107031, "text": "isnan(x, out=None, **kwargs): Test element-wise for NaN and return result as a boolean array."}
{"text_id": 1107032, "text": "isnan(x, out=None, **kwargs): Test element-wise for NaN and return result as a boolean array."}
{"text_id": 1107033, "text": "isnan(x, /): Return True if x is a NaN (not a number), and False otherwise."}
{"text_id": 1107034, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107035, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107036, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107037, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107038, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107039, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107040, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107041, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107042, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107043, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107044, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107045, "text": "isscalar(element): Returns True if the type of `element` is a scalar type."}
{"text_id": 1107046, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107047, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107048, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107049, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107050, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107051, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107052, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107053, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107054, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107055, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107056, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107057, "text": "issctype(rep): Determines whether the given object represents a scalar data-type."}
{"text_id": 1107058, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107059, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107060, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107061, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107062, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107063, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107064, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107065, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107066, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107067, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107068, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107069, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107070, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107071, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107072, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107073, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107074, "text": "issubdtype(arg1, arg2): Returns True if first argument is a typecode lower/equal in type hierarchy."}
{"text_id": 1107075, "text": "lcm(x1, x2, out=None, **kwargs): Returns the lowest common multiple of ``|x1|`` and ``|x2|``."}
{"text_id": 1107076, "text": "lcm(x1, x2, out=None, **kwargs): Returns the lowest common multiple of ``|x1|`` and ``|x2|``."}
{"text_id": 1107077, "text": "ldexp(x, i, /): Return x * (2**i)."}
{"text_id": 1107078, "text": "ldexp(x, i, /): Return x * (2**i)."}
{"text_id": 1107079, "text": "ldexp(x, i, /): Return x * (2**i)."}
{"text_id": 1107080, "text": "ldexp(x, i, /): Return x * (2**i)."}
{"text_id": 1107081, "text": "ldexp(x1, x2, out=None, **kwargs): Returns x1 * 2**x2, element-wise."}
{"text_id": 1107082, "text": "ldexp(x1, x2, out=None, **kwargs): Returns x1 * 2**x2, element-wise."}
{"text_id": 1107083, "text": "ldexp(x, i, /): Return x * (2**i)."}
{"text_id": 1107084, "text": "left_shift(a, n): Shift the bits of an integer to the left."}
{"text_id": 1107085, "text": "left_shift(a, n): Shift the bits of an integer to the left."}
{"text_id": 1107086, "text": "left_shift(a, n): Shift the bits of an integer to the left."}
{"text_id": 1107087, "text": "left_shift(a, n): Shift the bits of an integer to the left."}
{"text_id": 1107088, "text": "left_shift(a, n): Shift the bits of an integer to the left."}
{"text_id": 1107089, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107090, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107091, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107092, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107093, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107094, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107095, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107096, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107097, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107098, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0, ctx=None): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107099, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107100, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0, ctx=None): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107101, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107102, "text": "linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): Return evenly spaced numbers over a specified interval."}
{"text_id": 1107103, "text": "log(x): Compute the natural logarithm of `x`."}
{"text_id": 1107104, "text": "log(a, *args, **kwargs): log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise."}
{"text_id": 1107105, "text": "log(x): Compute the natural logarithm of `x`."}
{"text_id": 1107106, "text": "log(a, *args, **kwargs): log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise."}
{"text_id": 1107107, "text": "log(x): Compute the natural logarithm of `x`."}
{"text_id": 1107108, "text": "log(a, *args, **kwargs): log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise."}
{"text_id": 1107109, "text": "log(x): Compute the natural logarithm of `x`."}
{"text_id": 1107110, "text": "log(a, *args, **kwargs): log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise."}
{"text_id": 1107111, "text": "log(x, out=None, **kwargs): Natural logarithm, element-wise."}
{"text_id": 1107112, "text": "log(self, *args, **kwargs): Convenience fluent method for :py:func:`log`."}
{"text_id": 1107113, "text": "log(x, out=None, **kwargs): Natural logarithm, element-wise."}
{"text_id": 1107114, "text": "log(self, *args, **kwargs): Convenience fluent method for :py:func:`log`."}
{"text_id": 1107115, "text": "log(self, *args, **kwargs): Convenience fluent method for :py:func:`log`."}
{"text_id": 1107116, "text": "log(x): Compute the natural logarithm of `x`."}
{"text_id": 1107117, "text": "log(a, *args, **kwargs): log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Natural logarithm, element-wise."}
{"text_id": 1107118, "text": "log10(x): Compute the logarithm base 10 of `x`."}
{"text_id": 1107119, "text": "log10(a, *args, **kwargs): log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107120, "text": "log10(x, /): Return the base 10 logarithm of x."}
{"text_id": 1107121, "text": "log10(x): Compute the logarithm base 10 of `x`."}
{"text_id": 1107122, "text": "log10(a, *args, **kwargs): log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107123, "text": "log10(x, /): Return the base 10 logarithm of x."}
{"text_id": 1107124, "text": "log10(x): Compute the logarithm base 10 of `x`."}
{"text_id": 1107125, "text": "log10(a, *args, **kwargs): log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107126, "text": "log10(x, /): Return the base 10 logarithm of x."}
{"text_id": 1107127, "text": "log10(x): Compute the logarithm base 10 of `x`."}
{"text_id": 1107128, "text": "log10(a, *args, **kwargs): log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107129, "text": "log10(x, /): Return the base 10 logarithm of x."}
{"text_id": 1107130, "text": "log10(x, out=None, **kwargs): Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107131, "text": "log10(self, *args, **kwargs): Convenience fluent method for :py:func:`log10`."}
{"text_id": 1107132, "text": "log10(x, out=None, **kwargs): Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107133, "text": "log10(self, *args, **kwargs): Convenience fluent method for :py:func:`log10`."}
{"text_id": 1107134, "text": "log10(self, *args, **kwargs): Convenience fluent method for :py:func:`log10`."}
{"text_id": 1107135, "text": "log10(x): Compute the logarithm base 10 of `x`."}
{"text_id": 1107136, "text": "log10(a, *args, **kwargs): log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the base 10 logarithm of the input array, element-wise."}
{"text_id": 1107137, "text": "log10(x, /): Return the base 10 logarithm of x."}
{"text_id": 1107138, "text": "log1p(x, /): Return the natural logarithm of 1+x (base e)."}
{"text_id": 1107139, "text": "log1p(x, /): Return the natural logarithm of 1+x (base e)."}
{"text_id": 1107140, "text": "log1p(x, /): Return the natural logarithm of 1+x (base e)."}
{"text_id": 1107141, "text": "log1p(x, /): Return the natural logarithm of 1+x (base e)."}
{"text_id": 1107142, "text": "log1p(x, out=None, **kwargs): Return the natural logarithm of one plus the input array, element-wise."}
{"text_id": 1107143, "text": "log1p(self, *args, **kwargs): Convenience fluent method for :py:func:`log1p`."}
{"text_id": 1107144, "text": "log1p(x, out=None, **kwargs): Return the natural logarithm of one plus the input array, element-wise."}
{"text_id": 1107145, "text": "log1p(self, *args, **kwargs): Convenience fluent method for :py:func:`log1p`."}
{"text_id": 1107146, "text": "log1p(self, *args, **kwargs): Convenience fluent method for :py:func:`log1p`."}
{"text_id": 1107147, "text": "log1p(x, /): Return the natural logarithm of 1+x (base e)."}
{"text_id": 1107148, "text": "log2(x): Compute the logarithm base 2 of `x`."}
{"text_id": 1107149, "text": "log2(a, *args, **kwargs): log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`."}
{"text_id": 1107150, "text": "log2(x, /): Return the base 2 logarithm of x."}
{"text_id": 1107151, "text": "log2(x): Compute the logarithm base 2 of `x`."}
{"text_id": 1107152, "text": "log2(a, *args, **kwargs): log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`."}
{"text_id": 1107153, "text": "log2(x, /): Return the base 2 logarithm of x."}
{"text_id": 1107154, "text": "log2(x): Compute the logarithm base 2 of `x`."}
{"text_id": 1107155, "text": "log2(a, *args, **kwargs): log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`."}
{"text_id": 1107156, "text": "log2(x, /): Return the base 2 logarithm of x."}
{"text_id": 1107157, "text": "log2(x): Compute the logarithm base 2 of `x`."}
{"text_id": 1107158, "text": "log2(a, *args, **kwargs): log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`."}
{"text_id": 1107159, "text": "log2(x, /): Return the base 2 logarithm of x."}
{"text_id": 1107160, "text": "log2(x, out=None, **kwargs): Base-2 logarithm of x."}
{"text_id": 1107161, "text": "log2(self, *args, **kwargs): Convenience fluent method for :py:func:`log2`."}
{"text_id": 1107162, "text": "log2(x, out=None, **kwargs): Base-2 logarithm of x."}
{"text_id": 1107163, "text": "log2(self, *args, **kwargs): Convenience fluent method for :py:func:`log2`."}
{"text_id": 1107164, "text": "log2(self, *args, **kwargs): Convenience fluent method for :py:func:`log2`."}
{"text_id": 1107165, "text": "log2(x): Compute the logarithm base 2 of `x`."}
{"text_id": 1107166, "text": "log2(a, *args, **kwargs): log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Base-2 logarithm of `x`."}
{"text_id": 1107167, "text": "log2(x, /): Return the base 2 logarithm of x."}
{"text_id": 1107168, "text": "logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise."}
{"text_id": 1107169, "text": "logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise."}
{"text_id": 1107170, "text": "logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise."}
{"text_id": 1107171, "text": "logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise."}
{"text_id": 1107172, "text": "logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise."}
{"text_id": 1107173, "text": "logical_not(a, *args, **kwargs): logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise."}
{"text_id": 1107174, "text": "logical_not(a, *args, **kwargs): logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise."}
{"text_id": 1107175, "text": "logical_not(a, *args, **kwargs): logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise."}
{"text_id": 1107176, "text": "logical_not(a, *args, **kwargs): logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise."}
{"text_id": 1107177, "text": "logical_not(x, out=None, **kwargs): Compute the truth value of NOT x element-wise."}
{"text_id": 1107178, "text": "logical_not(x, out=None, **kwargs): Compute the truth value of NOT x element-wise."}
{"text_id": 1107179, "text": "logical_not(a, *args, **kwargs): logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of NOT x element-wise."}
{"text_id": 1107180, "text": "logical_or(a, b, *args, **kwargs): logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise."}
{"text_id": 1107181, "text": "logical_or(a, b, *args, **kwargs): logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise."}
{"text_id": 1107182, "text": "logical_or(a, b, *args, **kwargs): logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise."}
{"text_id": 1107183, "text": "logical_or(a, b, *args, **kwargs): logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise."}
{"text_id": 1107184, "text": "logical_or(a, b, *args, **kwargs): logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 OR x2 element-wise."}
{"text_id": 1107185, "text": "logical_xor(a, b, *args, **kwargs): logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise."}
{"text_id": 1107186, "text": "logical_xor(a, b, *args, **kwargs): logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise."}
{"text_id": 1107187, "text": "logical_xor(a, b, *args, **kwargs): logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise."}
{"text_id": 1107188, "text": "logical_xor(a, b, *args, **kwargs): logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise."}
{"text_id": 1107189, "text": "logical_xor(a, b, *args, **kwargs): logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 XOR x2, element-wise."}
{"text_id": 1107190, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107191, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107192, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107193, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107194, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107195, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107196, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107197, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107198, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107199, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0, ctx=None): Return numbers spaced evenly on a log scale."}
{"text_id": 1107200, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107201, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0, ctx=None): Return numbers spaced evenly on a log scale."}
{"text_id": 1107202, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107203, "text": "logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0): Return numbers spaced evenly on a log scale."}
{"text_id": 1107204, "text": "matmul(a, b, out=None, **kwargs): Matrix product of two arrays."}
{"text_id": 1107205, "text": "matmul(a, b, out=None, **kwargs): Matrix product of two arrays."}
{"text_id": 1107206, "text": "maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements."}
{"text_id": 1107207, "text": "maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements."}
{"text_id": 1107208, "text": "maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements."}
{"text_id": 1107209, "text": "maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements."}
{"text_id": 1107210, "text": "maximum(x1, x2, out=None, **kwargs): Returns element-wise maximum of the input arrays with broadcasting."}
{"text_id": 1107211, "text": "maximum(x1, x2, out=None, **kwargs): Returns element-wise maximum of the input arrays with broadcasting."}
{"text_id": 1107212, "text": "maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements."}
{"text_id": 1107213, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107214, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107215, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107216, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107217, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107218, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107219, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107220, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107221, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107222, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107223, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107224, "text": "maximum_sctype(t): Return the scalar type of highest precision of the same kind as the input."}
{"text_id": 1107225, "text": "may_share_memory(a, b, max_work=None): Determine if two arrays might share memory A return of True does not necessarily mean that the two arrays share any element."}
{"text_id": 1107226, "text": "may_share_memory(a, b, max_work=None): Determine if two arrays might share memory A return of True does not necessarily mean that the two arrays share any element."}
{"text_id": 1107227, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107228, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107229, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107230, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107231, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107232, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107233, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107234, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107235, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107236, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107237, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107238, "text": "memmap(filename, dtype=<class 'numpy.uint8'>, mode='r+', offset=0, shape=None, order='C'): Create a memory-map to an array stored in a *binary* file on disk."}
{"text_id": 1107239, "text": "minimum(a, b=None): minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements."}
{"text_id": 1107240, "text": "minimum(a, b=None): minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements."}
{"text_id": 1107241, "text": "minimum(a, b=None): minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements."}
{"text_id": 1107242, "text": "minimum(a, b=None): minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements."}
{"text_id": 1107243, "text": "minimum(x1, x2, out=None, **kwargs): Returns element-wise minimum of the input arrays with broadcasting."}
{"text_id": 1107244, "text": "minimum(x1, x2, out=None, **kwargs): Returns element-wise minimum of the input arrays with broadcasting."}
{"text_id": 1107245, "text": "minimum(a, b=None): minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise minimum of array elements."}
{"text_id": 1107246, "text": "modf(x, /): Return the fractional and integer parts of x."}
{"text_id": 1107247, "text": "modf(x, /): Return the fractional and integer parts of x."}
{"text_id": 1107248, "text": "modf(x, /): Return the fractional and integer parts of x."}
{"text_id": 1107249, "text": "modf(x, /): Return the fractional and integer parts of x."}
{"text_id": 1107250, "text": "modf(x, /): Return the fractional and integer parts of x."}
{"text_id": 1107251, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107252, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107253, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107254, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107255, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107256, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107257, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107258, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107259, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107260, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107261, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107262, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107263, "text": "moveaxis(a, source, destination): Move axes of an array to new positions."}
{"text_id": 1107264, "text": "negative(a, *args, **kwargs): negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise."}
{"text_id": 1107265, "text": "negative(a, *args, **kwargs): negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise."}
{"text_id": 1107266, "text": "negative(a, *args, **kwargs): negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise."}
{"text_id": 1107267, "text": "negative(a, *args, **kwargs): negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise."}
{"text_id": 1107268, "text": "negative(x, out=None, **kwargs): Numerical negative, element-wise."}
{"text_id": 1107269, "text": "negative(x, out=None, **kwargs): Numerical negative, element-wise."}
{"text_id": 1107270, "text": "negative(a, *args, **kwargs): negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Numerical negative, element-wise."}
{"text_id": 1107271, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107272, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107273, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107274, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107275, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107276, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107277, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107278, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107279, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107280, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107281, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107282, "text": "number(): Abstract base class of all numeric scalar types."}
{"text_id": 1107283, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107284, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107285, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107286, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107287, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107288, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107289, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107290, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107291, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107292, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107293, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107294, "text": "obj2sctype(rep, default=None): Return the scalar dtype or NumPy equivalent of Python type of an object."}
{"text_id": 1107295, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107296, "text": "ones(*args, **params): ones(shape, dtype=None, order='C') Return a new array of given shape and type, filled with ones."}
{"text_id": 1107297, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107298, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107299, "text": "ones(*args, **params): ones(shape, dtype=None, order='C') Return a new array of given shape and type, filled with ones."}
{"text_id": 1107300, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107301, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107302, "text": "ones(*args, **params): ones(shape, dtype=None, order='C') Return a new array of given shape and type, filled with ones."}
{"text_id": 1107303, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107304, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107305, "text": "ones(*args, **params): ones(shape, dtype=None, order='C') Return a new array of given shape and type, filled with ones."}
{"text_id": 1107306, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107307, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107308, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107309, "text": "ones(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107310, "text": "ones(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107311, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107312, "text": "ones(*args, **params): ones(shape, dtype=None, order='C') Return a new array of given shape and type, filled with ones."}
{"text_id": 1107313, "text": "ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones."}
{"text_id": 1107314, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107315, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107316, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107317, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107318, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107319, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107320, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107321, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107322, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107323, "text": "ones_like(self, *args, **kwargs): Convenience fluent method for :py:func:`ones_like`."}
{"text_id": 1107324, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107325, "text": "ones_like(self, *args, **kwargs): Convenience fluent method for :py:func:`ones_like`."}
{"text_id": 1107326, "text": "ones_like(a, dtype=None, order='C', ctx=None, out=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107327, "text": "ones_like(self, *args, **kwargs): Convenience fluent method for :py:func:`ones_like`."}
{"text_id": 1107328, "text": "ones_like(a, dtype=None, order='C', ctx=None, out=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107329, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107330, "text": "ones_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of ones with the same shape and type as a given array."}
{"text_id": 1107331, "text": "power(x, p): Return x to the power p, (x**p)."}
{"text_id": 1107332, "text": "power(a, b, third=None): Returns element-wise base array raised to power from second array."}
{"text_id": 1107333, "text": "power(x, p): Return x to the power p, (x**p)."}
{"text_id": 1107334, "text": "power(a, b, third=None): Returns element-wise base array raised to power from second array."}
{"text_id": 1107335, "text": "power(x, p): Return x to the power p, (x**p)."}
{"text_id": 1107336, "text": "power(a, b, third=None): Returns element-wise base array raised to power from second array."}
{"text_id": 1107337, "text": "power(x, p): Return x to the power p, (x**p)."}
{"text_id": 1107338, "text": "power(a, b, third=None): Returns element-wise base array raised to power from second array."}
{"text_id": 1107339, "text": "power(x1, x2, out=None, **kwargs): First array elements raised to powers from second array, element-wise."}
{"text_id": 1107340, "text": "power(x1, x2, out=None, **kwargs): First array elements raised to powers from second array, element-wise."}
{"text_id": 1107341, "text": "power(a, size=None): Draw samples in [0, 1] from a power distribution with given parameter a."}
{"text_id": 1107342, "text": "power(x, p): Return x to the power p, (x**p)."}
{"text_id": 1107343, "text": "power(a, b, third=None): Returns element-wise base array raised to power from second array."}
{"text_id": 1107344, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107345, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107346, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107347, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107348, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107349, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107350, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107351, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107352, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107353, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107354, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107355, "text": "printoptions(*args, **kwargs): Context manager for setting print options."}
{"text_id": 1107356, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107357, "text": "product(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1107358, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107359, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107360, "text": "product(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1107361, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107362, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107363, "text": "product(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1107364, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107365, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107366, "text": "product(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1107367, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107368, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107369, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107370, "text": "product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis."}
{"text_id": 1107371, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107372, "text": "product(a, *args, **params): prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the product of the array elements over the given axis."}
{"text_id": 1107373, "text": "product(*args, **kwargs): Return the product of array elements over a given axis."}
{"text_id": 1107374, "text": "putmask(a, mask, values): Changes elements of an array based on conditional and input values."}
{"text_id": 1107375, "text": "putmask(a, mask, values): Changes elements of an array based on conditional and input values."}
{"text_id": 1107376, "text": "putmask(a, mask, values): Changes elements of an array based on conditional and input values."}
{"text_id": 1107377, "text": "putmask(a, mask, values): Changes elements of an array based on conditional and input values."}
{"text_id": 1107378, "text": "putmask(a, mask, values): Changes elements of an array based on conditional and input values."}
{"text_id": 1107379, "text": "rad2deg(x, out=None, **kwargs): Convert angles from radians to degrees."}
{"text_id": 1107380, "text": "rad2deg(x, out=None, **kwargs): Convert angles from radians to degrees."}
{"text_id": 1107381, "text": "radians(x, /): Convert angle x from degrees to radians."}
{"text_id": 1107382, "text": "radians(x, /): Convert angle x from degrees to radians."}
{"text_id": 1107383, "text": "radians(x, /): Convert angle x from degrees to radians."}
{"text_id": 1107384, "text": "radians(x, /): Convert angle x from degrees to radians."}
{"text_id": 1107385, "text": "radians(self, *args, **kwargs): Convenience fluent method for :py:func:`radians`."}
{"text_id": 1107386, "text": "radians(self, *args, **kwargs): Convenience fluent method for :py:func:`radians`."}
{"text_id": 1107387, "text": "radians(x, out=None, **kwargs): Convert angles from degrees to radians."}
{"text_id": 1107388, "text": "radians(self, *args, **kwargs): Convenience fluent method for :py:func:`radians`."}
{"text_id": 1107389, "text": "radians(x, out=None, **kwargs): Convert angles from degrees to radians."}
{"text_id": 1107390, "text": "radians(x, /): Convert angle x from degrees to radians."}
{"text_id": 1107391, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107392, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107393, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107394, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107395, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107396, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107397, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107398, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107399, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107400, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107401, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107402, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107403, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107404, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107405, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107406, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107407, "text": "recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes."}
{"text_id": 1107408, "text": "reciprocal(self, *args, **kwargs): Convenience fluent method for :py:func:`reciprocal`."}
{"text_id": 1107409, "text": "reciprocal(self, *args, **kwargs): Convenience fluent method for :py:func:`reciprocal`."}
{"text_id": 1107410, "text": "reciprocal(x, out=None, **kwargs): Return the reciprocal of the argument, element-wise."}
{"text_id": 1107411, "text": "reciprocal(self, *args, **kwargs): Convenience fluent method for :py:func:`reciprocal`."}
{"text_id": 1107412, "text": "reciprocal(x, out=None, **kwargs): Return the reciprocal of the argument, element-wise."}
{"text_id": 1107413, "text": "remainder(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1107414, "text": "remainder(x, y, /): Difference between x and the closest integer multiple of y."}
{"text_id": 1107415, "text": "remainder(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1107416, "text": "remainder(x, y, /): Difference between x and the closest integer multiple of y."}
{"text_id": 1107417, "text": "remainder(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1107418, "text": "remainder(x, y, /): Difference between x and the closest integer multiple of y."}
{"text_id": 1107419, "text": "remainder(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1107420, "text": "remainder(x, y, /): Difference between x and the closest integer multiple of y."}
{"text_id": 1107421, "text": "remainder(x1, x2, out=None, **kwargs): Return element-wise remainder of division."}
{"text_id": 1107422, "text": "remainder(x1, x2, out=None, **kwargs): Return element-wise remainder of division."}
{"text_id": 1107423, "text": "remainder(a, b, *args, **kwargs): remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return element-wise remainder of division."}
{"text_id": 1107424, "text": "remainder(x, y, /): Difference between x and the closest integer multiple of y."}
{"text_id": 1107425, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107426, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107427, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107428, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107429, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107430, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107431, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107432, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107433, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107434, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107435, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107436, "text": "require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements."}
{"text_id": 1107437, "text": "right_shift(a, n): Shift the bits of an integer to the right."}
{"text_id": 1107438, "text": "right_shift(a, n): Shift the bits of an integer to the right."}
{"text_id": 1107439, "text": "right_shift(a, n): Shift the bits of an integer to the right."}
{"text_id": 1107440, "text": "right_shift(a, n): Shift the bits of an integer to the right."}
{"text_id": 1107441, "text": "right_shift(a, n): Shift the bits of an integer to the right."}
{"text_id": 1107442, "text": "rint(self, *args, **kwargs): Convenience fluent method for :py:func:`rint`."}
{"text_id": 1107443, "text": "rint(self, *args, **kwargs): Convenience fluent method for :py:func:`rint`."}
{"text_id": 1107444, "text": "rint(x, out=None, **kwargs): Round elements of the array to the nearest integer."}
{"text_id": 1107445, "text": "rint(self, *args, **kwargs): Convenience fluent method for :py:func:`rint`."}
{"text_id": 1107446, "text": "rint(x, out=None, **kwargs): Round elements of the array to the nearest integer."}
{"text_id": 1107447, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107448, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107449, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107450, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107451, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107452, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107453, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107454, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107455, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107456, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107457, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107458, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107459, "text": "roll(a, shift, axis=None): Roll array elements along a given axis."}
{"text_id": 1107460, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107461, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107462, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107463, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107464, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107465, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107466, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107467, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107468, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107469, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107470, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107471, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107472, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107473, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107474, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107475, "text": "rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position."}
{"text_id": 1107476, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107477, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107478, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107479, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107480, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107481, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107482, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107483, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107484, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107485, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107486, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107487, "text": "sctype2char(sctype): Return the string representation of a scalar dtype."}
{"text_id": 1107488, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107489, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107490, "text": "set_printoptions(precision=None, threshold=None, **kwarg): Set printing options."}
{"text_id": 1107491, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107492, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107493, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107494, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107495, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107496, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107497, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107498, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107499, "text": "set_printoptions(precision=None, threshold=None, **kwarg): Set printing options."}
{"text_id": 1107500, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107501, "text": "set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None): Set printing options."}
{"text_id": 1107502, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107503, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107504, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107505, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107506, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107507, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107508, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107509, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107510, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107511, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107512, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107513, "text": "set_string_function(f, repr=True): Set a Python function to be used when pretty printing arrays."}
{"text_id": 1107514, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107515, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107516, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107517, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107518, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107519, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107520, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107521, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107522, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107523, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107524, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107525, "text": "setbufsize(size): Set the size of the buffer used in ufuncs."}
{"text_id": 1107526, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107527, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107528, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107529, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107530, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107531, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107532, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107533, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107534, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107535, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107536, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107537, "text": "seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled."}
{"text_id": 1107538, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107539, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107540, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107541, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107542, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107543, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107544, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107545, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107546, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107547, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107548, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107549, "text": "seterrcall(func): Set the floating-point error callback function or log object."}
{"text_id": 1107550, "text": "shares_memory(a, b, max_work=None): Determine if two arrays share memory."}
{"text_id": 1107551, "text": "shares_memory(a, b, max_work=None): Determine if two arrays share memory."}
{"text_id": 1107552, "text": "sign(self, *args, **kwargs): Convenience fluent method for :py:func:`sign`."}
{"text_id": 1107553, "text": "sign(self, *args, **kwargs): Convenience fluent method for :py:func:`sign`."}
{"text_id": 1107554, "text": "sign(x, out=None, **kwargs): Returns an element-wise indication of the sign of a number."}
{"text_id": 1107555, "text": "sign(self, *args, **kwargs): Convenience fluent method for :py:func:`sign`."}
{"text_id": 1107556, "text": "sign(x, out=None, **kwargs): Returns an element-wise indication of the sign of a number."}
{"text_id": 1107557, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107558, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107559, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107560, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107561, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107562, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107563, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107564, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107565, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107566, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107567, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107568, "text": "signedinteger(): Abstract base class of all signed integer scalar types."}
{"text_id": 1107569, "text": "sin(a, *args, **kwargs): sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise."}
{"text_id": 1107570, "text": "sin(x, /): Return the sine of x (measured in radians)."}
{"text_id": 1107571, "text": "sin(a, *args, **kwargs): sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise."}
{"text_id": 1107572, "text": "sin(x, /): Return the sine of x (measured in radians)."}
{"text_id": 1107573, "text": "sin(a, *args, **kwargs): sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise."}
{"text_id": 1107574, "text": "sin(x, /): Return the sine of x (measured in radians)."}
{"text_id": 1107575, "text": "sin(a, *args, **kwargs): sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise."}
{"text_id": 1107576, "text": "sin(x, /): Return the sine of x (measured in radians)."}
{"text_id": 1107577, "text": "sin(self, *args, **kwargs): Convenience fluent method for :py:func:`sin`."}
{"text_id": 1107578, "text": "sin(self, *args, **kwargs): Convenience fluent method for :py:func:`sin`."}
{"text_id": 1107579, "text": "sin(x, out=None, **kwargs): Trigonometric sine, element-wise."}
{"text_id": 1107580, "text": "sin(self, *args, **kwargs): Convenience fluent method for :py:func:`sin`."}
{"text_id": 1107581, "text": "sin(x, out=None, **kwargs): Trigonometric sine, element-wise."}
{"text_id": 1107582, "text": "sin(a, *args, **kwargs): sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Trigonometric sine, element-wise."}
{"text_id": 1107583, "text": "sin(x, /): Return the sine of x (measured in radians)."}
{"text_id": 1107584, "text": "sinh(a, *args, **kwargs): sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise."}
{"text_id": 1107585, "text": "sinh(x, /): Return the hyperbolic sine of x."}
{"text_id": 1107586, "text": "sinh(a, *args, **kwargs): sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise."}
{"text_id": 1107587, "text": "sinh(x, /): Return the hyperbolic sine of x."}
{"text_id": 1107588, "text": "sinh(a, *args, **kwargs): sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise."}
{"text_id": 1107589, "text": "sinh(x, /): Return the hyperbolic sine of x."}
{"text_id": 1107590, "text": "sinh(a, *args, **kwargs): sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise."}
{"text_id": 1107591, "text": "sinh(x, /): Return the hyperbolic sine of x."}
{"text_id": 1107592, "text": "sinh(self, *args, **kwargs): Convenience fluent method for :py:func:`sinh`."}
{"text_id": 1107593, "text": "sinh(self, *args, **kwargs): Convenience fluent method for :py:func:`sinh`."}
{"text_id": 1107594, "text": "sinh(x, out=None, **kwargs): Hyperbolic sine, element-wise."}
{"text_id": 1107595, "text": "sinh(self, *args, **kwargs): Convenience fluent method for :py:func:`sinh`."}
{"text_id": 1107596, "text": "sinh(x, out=None, **kwargs): Hyperbolic sine, element-wise."}
{"text_id": 1107597, "text": "sinh(a, *args, **kwargs): sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Hyperbolic sine, element-wise."}
{"text_id": 1107598, "text": "sinh(x, /): Return the hyperbolic sine of x."}
{"text_id": 1107599, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107600, "text": "sometrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1107601, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107602, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107603, "text": "sometrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1107604, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107605, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107606, "text": "sometrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1107607, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107608, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107609, "text": "sometrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1107610, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107611, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107612, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107613, "text": "sometrue(a, axis=None, keepdims=False, out=None): Check whether some values are true."}
{"text_id": 1107614, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107615, "text": "sometrue(target, axis=0, dtype=None): Reduce `target` along the given `axis`."}
{"text_id": 1107616, "text": "sometrue(*args, **kwargs): Check whether some values are true."}
{"text_id": 1107617, "text": "sqrt(x): Compute the square root of x."}
{"text_id": 1107618, "text": "sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107619, "text": "sqrt(x, /): Return the square root of x."}
{"text_id": 1107620, "text": "sqrt(x): Compute the square root of x."}
{"text_id": 1107621, "text": "sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107622, "text": "sqrt(x, /): Return the square root of x."}
{"text_id": 1107623, "text": "sqrt(x): Compute the square root of x."}
{"text_id": 1107624, "text": "sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107625, "text": "sqrt(x, /): Return the square root of x."}
{"text_id": 1107626, "text": "sqrt(x): Compute the square root of x."}
{"text_id": 1107627, "text": "sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107628, "text": "sqrt(x, /): Return the square root of x."}
{"text_id": 1107629, "text": "sqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`sqrt`."}
{"text_id": 1107630, "text": "sqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`sqrt`."}
{"text_id": 1107631, "text": "sqrt(x, out=None, **kwargs): Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107632, "text": "sqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`sqrt`."}
{"text_id": 1107633, "text": "sqrt(x, out=None, **kwargs): Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107634, "text": "sqrt(x): Compute the square root of x."}
{"text_id": 1107635, "text": "sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise."}
{"text_id": 1107636, "text": "sqrt(x, /): Return the square root of x."}
{"text_id": 1107637, "text": "square(self, *args, **kwargs): Convenience fluent method for :py:func:`square`."}
{"text_id": 1107638, "text": "square(self, *args, **kwargs): Convenience fluent method for :py:func:`square`."}
{"text_id": 1107639, "text": "square(x, out=None, **kwargs): Return the element-wise square of the input."}
{"text_id": 1107640, "text": "square(self, *args, **kwargs): Convenience fluent method for :py:func:`square`."}
{"text_id": 1107641, "text": "square(x, out=None, **kwargs): Return the element-wise square of the input."}
{"text_id": 1107642, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107643, "text": "stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis."}
{"text_id": 1107644, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107645, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107646, "text": "stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis."}
{"text_id": 1107647, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107648, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107649, "text": "stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis."}
{"text_id": 1107650, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107651, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107652, "text": "stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis."}
{"text_id": 1107653, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107654, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107655, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107656, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107657, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107658, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107659, "text": "stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis."}
{"text_id": 1107660, "text": "stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis."}
{"text_id": 1107661, "text": "subtract(a, b, *args, **kwargs): subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise."}
{"text_id": 1107662, "text": "subtract(a, b, *args, **kwargs): subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise."}
{"text_id": 1107663, "text": "subtract(a, b, *args, **kwargs): subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise."}
{"text_id": 1107664, "text": "subtract(a, b, *args, **kwargs): subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise."}
{"text_id": 1107665, "text": "subtract(x1, x2, out=None, **kwargs): Subtract arguments element-wise."}
{"text_id": 1107666, "text": "subtract(x1, x2, out=None, **kwargs): Subtract arguments element-wise."}
{"text_id": 1107667, "text": "subtract(a, b, *args, **kwargs): subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Subtract arguments, element-wise."}
{"text_id": 1107668, "text": "tan(a, *args, **kwargs): tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise."}
{"text_id": 1107669, "text": "tan(x, /): Return the tangent of x (measured in radians)."}
{"text_id": 1107670, "text": "tan(a, *args, **kwargs): tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise."}
{"text_id": 1107671, "text": "tan(x, /): Return the tangent of x (measured in radians)."}
{"text_id": 1107672, "text": "tan(a, *args, **kwargs): tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise."}
{"text_id": 1107673, "text": "tan(x, /): Return the tangent of x (measured in radians)."}
{"text_id": 1107674, "text": "tan(a, *args, **kwargs): tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise."}
{"text_id": 1107675, "text": "tan(x, /): Return the tangent of x (measured in radians)."}
{"text_id": 1107676, "text": "tan(self, *args, **kwargs): Convenience fluent method for :py:func:`tan`."}
{"text_id": 1107677, "text": "tan(self, *args, **kwargs): Convenience fluent method for :py:func:`tan`."}
{"text_id": 1107678, "text": "tan(x, out=None, **kwargs): Compute tangent element-wise."}
{"text_id": 1107679, "text": "tan(self, *args, **kwargs): Convenience fluent method for :py:func:`tan`."}
{"text_id": 1107680, "text": "tan(x, out=None, **kwargs): Compute tangent element-wise."}
{"text_id": 1107681, "text": "tan(a, *args, **kwargs): tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute tangent element-wise."}
{"text_id": 1107682, "text": "tan(x, /): Return the tangent of x (measured in radians)."}
{"text_id": 1107683, "text": "tanh(a, *args, **kwargs): tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise."}
{"text_id": 1107684, "text": "tanh(x, /): Return the hyperbolic tangent of x."}
{"text_id": 1107685, "text": "tanh(a, *args, **kwargs): tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise."}
{"text_id": 1107686, "text": "tanh(x, /): Return the hyperbolic tangent of x."}
{"text_id": 1107687, "text": "tanh(a, *args, **kwargs): tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise."}
{"text_id": 1107688, "text": "tanh(x, /): Return the hyperbolic tangent of x."}
{"text_id": 1107689, "text": "tanh(a, *args, **kwargs): tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise."}
{"text_id": 1107690, "text": "tanh(x, /): Return the hyperbolic tangent of x."}
{"text_id": 1107691, "text": "tanh(self, *args, **kwargs): Convenience fluent method for :py:func:`tanh`."}
{"text_id": 1107692, "text": "tanh(self, *args, **kwargs): Convenience fluent method for :py:func:`tanh`."}
{"text_id": 1107693, "text": "tanh(x, out=None, **kwargs): Compute hyperbolic tangent element-wise."}
{"text_id": 1107694, "text": "tanh(self, *args, **kwargs): Convenience fluent method for :py:func:`tanh`."}
{"text_id": 1107695, "text": "tanh(x, out=None, **kwargs): Compute hyperbolic tangent element-wise."}
{"text_id": 1107696, "text": "tanh(a, *args, **kwargs): tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute hyperbolic tangent element-wise."}
{"text_id": 1107697, "text": "tanh(x, /): Return the hyperbolic tangent of x."}
{"text_id": 1107698, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107699, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107700, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107701, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107702, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107703, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107704, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107705, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107706, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107707, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107708, "text": "tensordot(a, b, axes=2): tensordot(a, b, axes=2) Compute tensor dot product along specified axes for arrays >= 1-D."}
{"text_id": 1107709, "text": "tensordot(a, b, axes=2): tensordot(a, b, axes=2) Compute tensor dot product along specified axes for arrays >= 1-D."}
{"text_id": 1107710, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107711, "text": "tensordot(a, b, axes=2): Compute tensor dot product along specified axes."}
{"text_id": 1107712, "text": "true_divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1107713, "text": "true_divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1107714, "text": "true_divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1107715, "text": "true_divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1107716, "text": "true_divide(x1, x2, out=None): Returns a true division of the inputs, element-wise."}
{"text_id": 1107717, "text": "true_divide(x1, x2, out=None): Returns a true division of the inputs, element-wise."}
{"text_id": 1107718, "text": "true_divide(a, b, *args, **kwargs): true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Returns a true division of the inputs, element-wise."}
{"text_id": 1107719, "text": "trunc(x, /): Truncates the Real x to the nearest Integral toward 0."}
{"text_id": 1107720, "text": "trunc(x, /): Truncates the Real x to the nearest Integral toward 0."}
{"text_id": 1107721, "text": "trunc(x, /): Truncates the Real x to the nearest Integral toward 0."}
{"text_id": 1107722, "text": "trunc(x, /): Truncates the Real x to the nearest Integral toward 0."}
{"text_id": 1107723, "text": "trunc(self, *args, **kwargs): Convenience fluent method for :py:func:`trunc`."}
{"text_id": 1107724, "text": "trunc(self, *args, **kwargs): Convenience fluent method for :py:func:`trunc`."}
{"text_id": 1107725, "text": "trunc(x, out=None, **kwargs): Return the truncated value of the input, element-wise."}
{"text_id": 1107726, "text": "trunc(self, *args, **kwargs): Convenience fluent method for :py:func:`trunc`."}
{"text_id": 1107727, "text": "trunc(x, out=None, **kwargs): Return the truncated value of the input, element-wise."}
{"text_id": 1107728, "text": "trunc(x, /): Truncates the Real x to the nearest Integral toward 0."}
{"text_id": 1107729, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107730, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107731, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107732, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107733, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107734, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107735, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107736, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107737, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107738, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107739, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107740, "text": "ufunc(): Functions that operate element by element on whole arrays."}
{"text_id": 1107741, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107742, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107743, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107744, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107745, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107746, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107747, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107748, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107749, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107750, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107751, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107752, "text": "unsignedinteger(): Abstract base class of all unsigned integer scalar types."}
{"text_id": 1107753, "text": "vdot(a, b): Return the dot product of two vectors."}
{"text_id": 1107754, "text": "vdot(a, b): Return the dot product of two vectors."}
{"text_id": 1107755, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107756, "text": "vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107757, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107758, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107759, "text": "vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107760, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107761, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107762, "text": "vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107763, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107764, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107765, "text": "vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107766, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107767, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107768, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107769, "text": "vstack(arrays, out=None): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107770, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107771, "text": "vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107772, "text": "vstack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107773, "text": "vstack(arrays, out=None): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1107774, "text": "where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition."}
{"text_id": 1107775, "text": "where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition."}
{"text_id": 1107776, "text": "where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition."}
{"text_id": 1107777, "text": "where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition."}
{"text_id": 1107778, "text": "where(condition, x=None, y=None): where(condition, [x, y]) Return elements chosen from `x` or `y` depending on `condition`."}
{"text_id": 1107779, "text": "where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition."}
{"text_id": 1107780, "text": "where(condition, x=None, y=None): where(condition, [x, y]) Return elements chosen from `x` or `y` depending on `condition`."}
{"text_id": 1107781, "text": "zeros(*args, **params): zeros(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107782, "text": "zeros(*args, **params): zeros(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107783, "text": "zeros(*args, **params): zeros(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107784, "text": "zeros(*args, **params): zeros(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107785, "text": "zeros(shape, dtype=None, order='C', ctx=None): Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107786, "text": "zeros(*args, **params): zeros(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107787, "text": "zeros(shape, dtype=None, order='C', ctx=None): Return a new array of given shape and type, filled with zeros."}
{"text_id": 1107788, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107789, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107790, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107791, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107792, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107793, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107794, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107795, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107796, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107797, "text": "zeros_like(self, *args, **kwargs): Convenience fluent method for :py:func:`zeros_like`."}
{"text_id": 1107798, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107799, "text": "zeros_like(self, *args, **kwargs): Convenience fluent method for :py:func:`zeros_like`."}
{"text_id": 1107800, "text": "zeros_like(a, dtype=None, order='C', ctx=None, out=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107801, "text": "zeros_like(self, *args, **kwargs): Convenience fluent method for :py:func:`zeros_like`."}
{"text_id": 1107802, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107803, "text": "zeros_like(a, dtype=None, order='K', subok=True, shape=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107804, "text": "zeros_like(a, dtype=None, order='C', ctx=None, out=None): Return an array of zeros with the same shape and type as a given array."}
{"text_id": 1107805, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107806, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107807, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107808, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107809, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107810, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107811, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107812, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107813, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107814, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107815, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107816, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107817, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107818, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107819, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107820, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107821, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107822, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107823, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107824, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107825, "text": "corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>): Return Pearson product-moment correlation coefficients."}
{"text_id": 1107826, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107827, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107828, "text": "cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None): Estimate the covariance matrix."}
{"text_id": 1107829, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107830, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107831, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107832, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107833, "text": "cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None): Estimate the covariance matrix."}
{"text_id": 1107834, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107835, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107836, "text": "cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None): Estimate the covariance matrix."}
{"text_id": 1107837, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107838, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107839, "text": "cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None): Estimate the covariance matrix."}
{"text_id": 1107840, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107841, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107842, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107843, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107844, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107845, "text": "cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None): Estimate a covariance matrix, given data and weights."}
{"text_id": 1107846, "text": "cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None): Estimate the covariance matrix."}
{"text_id": 1107847, "text": "as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER."}
{"text_id": 1107848, "text": "as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER."}
{"text_id": 1107849, "text": "as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER."}
{"text_id": 1107850, "text": "as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER."}
{"text_id": 1107851, "text": "as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER."}
{"text_id": 1107852, "text": "as_ctypes(obj): Create and return a ctypes object from a numpy array."}
{"text_id": 1107853, "text": "as_ctypes(obj): Create and return a ctypes object from a numpy array."}
{"text_id": 1107854, "text": "as_ctypes(obj): Create and return a ctypes object from a numpy array."}
{"text_id": 1107855, "text": "as_ctypes(obj): Create and return a ctypes object from a numpy array."}
{"text_id": 1107856, "text": "as_ctypes(obj): Create and return a ctypes object from a numpy array."}
{"text_id": 1107857, "text": "as_ctypes_type(dtype): Convert a dtype into a ctypes type."}
{"text_id": 1107858, "text": "as_ctypes_type(dtype): Convert a dtype into a ctypes type."}
{"text_id": 1107859, "text": "as_ctypes_type(dtype): Convert a dtype into a ctypes type."}
{"text_id": 1107860, "text": "as_ctypes_type(dtype): Convert a dtype into a ctypes type."}
{"text_id": 1107861, "text": "as_ctypes_type(dtype): Convert a dtype into a ctypes type."}
{"text_id": 1107862, "text": "load_library(libname, loader_path): It is possible to load a library using >>> lib = ctypes."}
{"text_id": 1107863, "text": "load_library(libname, loader_path): It is possible to load a library using >>> lib = ctypes."}
{"text_id": 1107864, "text": "load_library(libname, loader_path): It is possible to load a library using >>> lib = ctypes."}
{"text_id": 1107865, "text": "load_library(libname, loader_path): It is possible to load a library using >>> lib = ctypes."}
{"text_id": 1107866, "text": "load_library(libname, loader_path): It is possible to load a library using >>> lib = ctypes."}
{"text_id": 1107867, "text": "ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes."}
{"text_id": 1107868, "text": "ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes."}
{"text_id": 1107869, "text": "ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes."}
{"text_id": 1107870, "text": "ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes."}
{"text_id": 1107871, "text": "ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes."}
{"text_id": 1107872, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107873, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107874, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107875, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107876, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107877, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107878, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107879, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107880, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107881, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107882, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107883, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107884, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107885, "text": "delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted."}
{"text_id": 1107886, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107887, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107888, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107889, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107890, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107891, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107892, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107893, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107894, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107895, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107896, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107897, "text": "deprecate(*args, **kwargs): Issues a DeprecationWarning, adds warning to `old_name`'s docstring, rebinds ``old_name."}
{"text_id": 1107898, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107899, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107900, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107901, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107902, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107903, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107904, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107905, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107906, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107907, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107908, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107909, "text": "deprecate_with_doc(msg): Deprecates a function and includes the deprecation in its docstring."}
{"text_id": 1107910, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107911, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107912, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107913, "text": "diag(array, k=0): Extracts a diagonal or constructs a diagonal array."}
{"text_id": 1107914, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107915, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107916, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107917, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107918, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107919, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107920, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107921, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107922, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107923, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107924, "text": "diag(self, k=0, **kwargs): Convenience fluent method for :py:func:`diag`."}
{"text_id": 1107925, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107926, "text": "diag(self, k=0, **kwargs): Convenience fluent method for :py:func:`diag`."}
{"text_id": 1107927, "text": "diag(self, k=0, **kwargs): Convenience fluent method for :py:func:`diag`."}
{"text_id": 1107928, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107929, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107930, "text": "diag(v, k=0): Extract a diagonal or construct a diagonal array."}
{"text_id": 1107931, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107932, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107933, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107934, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107935, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107936, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107937, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107938, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107939, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107940, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107941, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107942, "text": "diag_indices(n, ndim=2): Return the indices to access the main diagonal of an array."}
{"text_id": 1107943, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107944, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107945, "text": "diag_indices_from(arr): This returns a tuple of indices that can be used to access the main diagonal of an array a with a."}
{"text_id": 1107946, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107947, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107948, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107949, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107950, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107951, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107952, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107953, "text": "diag_indices_from(arr): This returns a tuple of indices that can be used to access the main diagonal of an array a with a."}
{"text_id": 1107954, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107955, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107956, "text": "diag_indices_from(arr): Return the indices to access the main diagonal of an n-dimensional array."}
{"text_id": 1107957, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107958, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107959, "text": "diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107960, "text": "diagflat(array, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107961, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107962, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107963, "text": "diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107964, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107965, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107966, "text": "diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107967, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107968, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107969, "text": "diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107970, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107971, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107972, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107973, "text": "diagflat(v, k=0): Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107974, "text": "diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal."}
{"text_id": 1107975, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107976, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107977, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107978, "text": "diff(a, n=1, axis=-1, prepend=None, append=None): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107979, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107980, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107981, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107982, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107983, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107984, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107985, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107986, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107987, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107988, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107989, "text": "diff(a, n=1, axis=-1, prepend=None, append=None): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107990, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107991, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107992, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107993, "text": "diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis."}
{"text_id": 1107994, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1107995, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1107996, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1107997, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1107998, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1107999, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108000, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108001, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108002, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108003, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108004, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108005, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108006, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108007, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108008, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108009, "text": "digitize(x, bins, right=False): Return the indices of the bins to which each value in input array belongs."}
{"text_id": 1108010, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108011, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108012, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108013, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108014, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108015, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108016, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108017, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108018, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108019, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108020, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108021, "text": "disp(mesg, device=None, linefeed=True): Display a message on a device."}
{"text_id": 1108022, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108023, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108024, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108025, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108026, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108027, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108028, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108029, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108030, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108031, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108032, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108033, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108034, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108035, "text": "dsplit(ary, indices_or_sections): Split array into multiple sub-arrays along the 3rd axis (depth)."}
{"text_id": 1108036, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108037, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108038, "text": "dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108039, "text": "dstack(arrays): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108040, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108041, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108042, "text": "dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108043, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108044, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108045, "text": "dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108046, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108047, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108048, "text": "dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108049, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108050, "text": "dstack(arrays): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108051, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108052, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108053, "text": "dstack(tup): Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108054, "text": "dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis)."}
{"text_id": 1108055, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108056, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108057, "text": "ediff1d(arr, to_end=None, to_begin=None): Compute the differences between consecutive elements of an array."}
{"text_id": 1108058, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108059, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108060, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108061, "text": "ediff1d(arr, to_end=None, to_begin=None): Compute the differences between consecutive elements of an array."}
{"text_id": 1108062, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108063, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108064, "text": "ediff1d(arr, to_end=None, to_begin=None): Compute the differences between consecutive elements of an array."}
{"text_id": 1108065, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108066, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108067, "text": "ediff1d(arr, to_end=None, to_begin=None): Compute the differences between consecutive elements of an array."}
{"text_id": 1108068, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108069, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108070, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108071, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108072, "text": "ediff1d(ary, to_end=None, to_begin=None): The differences between consecutive elements of an array."}
{"text_id": 1108073, "text": "ediff1d(arr, to_end=None, to_begin=None): Compute the differences between consecutive elements of an array."}
{"text_id": 1108074, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108075, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108076, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108077, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108078, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108079, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108080, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108081, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108082, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108083, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108084, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108085, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108086, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108087, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108088, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108089, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108090, "text": "isreal(x): Returns a bool array, where True if input element is real."}
{"text_id": 1108091, "text": "logn(n, x): Take log base n of x."}
{"text_id": 1108092, "text": "logn(n, x): Take log base n of x."}
{"text_id": 1108093, "text": "logn(n, x): Take log base n of x."}
{"text_id": 1108094, "text": "logn(n, x): Take log base n of x."}
{"text_id": 1108095, "text": "logn(n, x): Take log base n of x."}
{"text_id": 1108096, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108097, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108098, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108099, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108100, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108101, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108102, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108103, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108104, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108105, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108106, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108107, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108108, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108109, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108110, "text": "expand_dims(self, axis, inplace=False): Adds an additional dimension to the current array without altering any data."}
{"text_id": 1108111, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108112, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108113, "text": "expand_dims(self, *args, **kwargs): Convenience fluent method for :py:func:`expand_dims`."}
{"text_id": 1108114, "text": "expand_dims(self, *args, **kwargs): Convenience fluent method for :py:func:`expand_dims`."}
{"text_id": 1108115, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108116, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108117, "text": "expand_dims(a, axis): Expand the shape of an array."}
{"text_id": 1108118, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108119, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108120, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108121, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108122, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108123, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108124, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108125, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108126, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108127, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108128, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108129, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108130, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108131, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108132, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108133, "text": "extract(condition, arr): Return the elements of an array that satisfy some condition."}
{"text_id": 1108134, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108135, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108136, "text": "eye(N, M=None, k=0, dtype=<class 'numpy.float32'>, **kwargs): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108137, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108138, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108139, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108140, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108141, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108142, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108143, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108144, "text": "eye(N, M=None, k=0, dtype=<class 'numpy.float32'>, **kwargs): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108145, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108146, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108147, "text": "eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None): Return a 2-D array with ones on the diagonal and zeros elsewhere."}
{"text_id": 1108148, "text": "fft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform."}
{"text_id": 1108149, "text": "fft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform."}
{"text_id": 1108150, "text": "fft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform."}
{"text_id": 1108151, "text": "fft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform."}
{"text_id": 1108152, "text": "fft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform."}
{"text_id": 1108153, "text": "fft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional discrete Fourier Transform."}
{"text_id": 1108154, "text": "fft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional discrete Fourier Transform."}
{"text_id": 1108155, "text": "fft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional discrete Fourier Transform."}
{"text_id": 1108156, "text": "fft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional discrete Fourier Transform."}
{"text_id": 1108157, "text": "fft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional discrete Fourier Transform."}
{"text_id": 1108158, "text": "fftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies."}
{"text_id": 1108159, "text": "fftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies."}
{"text_id": 1108160, "text": "fftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies."}
{"text_id": 1108161, "text": "fftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies."}
{"text_id": 1108162, "text": "fftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies."}
{"text_id": 1108163, "text": "fftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform."}
{"text_id": 1108164, "text": "fftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform."}
{"text_id": 1108165, "text": "fftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform."}
{"text_id": 1108166, "text": "fftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform."}
{"text_id": 1108167, "text": "fftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform."}
{"text_id": 1108168, "text": "fftshift(x, axes=None): Shift the zero-frequency component to the center of the spectrum."}
{"text_id": 1108169, "text": "fftshift(x, axes=None): Shift the zero-frequency component to the center of the spectrum."}
{"text_id": 1108170, "text": "fftshift(x, axes=None): Shift the zero-frequency component to the center of the spectrum."}
{"text_id": 1108171, "text": "fftshift(x, axes=None): Shift the zero-frequency component to the center of the spectrum."}
{"text_id": 1108172, "text": "fftshift(x, axes=None): Shift the zero-frequency component to the center of the spectrum."}
{"text_id": 1108173, "text": "hfft(a, n=None, axis=-1, norm=None): Compute the FFT of a signal that has Hermitian symmetry, i."}
{"text_id": 1108174, "text": "hfft(a, n=None, axis=-1, norm=None): Compute the FFT of a signal that has Hermitian symmetry, i."}
{"text_id": 1108175, "text": "hfft(a, n=None, axis=-1, norm=None): Compute the FFT of a signal that has Hermitian symmetry, i."}
{"text_id": 1108176, "text": "hfft(a, n=None, axis=-1, norm=None): Compute the FFT of a signal that has Hermitian symmetry, i."}
{"text_id": 1108177, "text": "hfft(a, n=None, axis=-1, norm=None): Compute the FFT of a signal that has Hermitian symmetry, i."}
{"text_id": 1108178, "text": "ifft(a, n=None, axis=-1, norm=None): Compute the one-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108179, "text": "ifft(a, n=None, axis=-1, norm=None): Compute the one-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108180, "text": "ifft(a, n=None, axis=-1, norm=None): Compute the one-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108181, "text": "ifft(a, n=None, axis=-1, norm=None): Compute the one-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108182, "text": "ifft(a, n=None, axis=-1, norm=None): Compute the one-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108183, "text": "ifft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108184, "text": "ifft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108185, "text": "ifft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108186, "text": "ifft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108187, "text": "ifft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108188, "text": "ifftn(a, s=None, axes=None, norm=None): Compute the N-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108189, "text": "ifftn(a, s=None, axes=None, norm=None): Compute the N-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108190, "text": "ifftn(a, s=None, axes=None, norm=None): Compute the N-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108191, "text": "ifftn(a, s=None, axes=None, norm=None): Compute the N-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108192, "text": "ifftn(a, s=None, axes=None, norm=None): Compute the N-dimensional inverse discrete Fourier Transform."}
{"text_id": 1108193, "text": "ifftshift(x, axes=None): The inverse of `fftshift`."}
{"text_id": 1108194, "text": "ifftshift(x, axes=None): The inverse of `fftshift`."}
{"text_id": 1108195, "text": "ifftshift(x, axes=None): The inverse of `fftshift`."}
{"text_id": 1108196, "text": "ifftshift(x, axes=None): The inverse of `fftshift`."}
{"text_id": 1108197, "text": "ifftshift(x, axes=None): The inverse of `fftshift`."}
{"text_id": 1108198, "text": "ihfft(a, n=None, axis=-1, norm=None): Compute the inverse FFT of a signal that has Hermitian symmetry."}
{"text_id": 1108199, "text": "ihfft(a, n=None, axis=-1, norm=None): Compute the inverse FFT of a signal that has Hermitian symmetry."}
{"text_id": 1108200, "text": "ihfft(a, n=None, axis=-1, norm=None): Compute the inverse FFT of a signal that has Hermitian symmetry."}
{"text_id": 1108201, "text": "ihfft(a, n=None, axis=-1, norm=None): Compute the inverse FFT of a signal that has Hermitian symmetry."}
{"text_id": 1108202, "text": "ihfft(a, n=None, axis=-1, norm=None): Compute the inverse FFT of a signal that has Hermitian symmetry."}
{"text_id": 1108203, "text": "irfft(a, n=None, axis=-1, norm=None): Computes the inverse of `rfft`."}
{"text_id": 1108204, "text": "irfft(a, n=None, axis=-1, norm=None): Computes the inverse of `rfft`."}
{"text_id": 1108205, "text": "irfft(a, n=None, axis=-1, norm=None): Computes the inverse of `rfft`."}
{"text_id": 1108206, "text": "irfft(a, n=None, axis=-1, norm=None): Computes the inverse of `rfft`."}
{"text_id": 1108207, "text": "irfft(a, n=None, axis=-1, norm=None): Computes the inverse of `rfft`."}
{"text_id": 1108208, "text": "irfft2(a, s=None, axes=(-2, -1), norm=None): Computes the inverse of `rfft2`."}
{"text_id": 1108209, "text": "irfft2(a, s=None, axes=(-2, -1), norm=None): Computes the inverse of `rfft2`."}
{"text_id": 1108210, "text": "irfft2(a, s=None, axes=(-2, -1), norm=None): Computes the inverse of `rfft2`."}
{"text_id": 1108211, "text": "irfft2(a, s=None, axes=(-2, -1), norm=None): Computes the inverse of `rfft2`."}
{"text_id": 1108212, "text": "irfft2(a, s=None, axes=(-2, -1), norm=None): Computes the inverse of `rfft2`."}
{"text_id": 1108213, "text": "irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`."}
{"text_id": 1108214, "text": "irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`."}
{"text_id": 1108215, "text": "irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`."}
{"text_id": 1108216, "text": "irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`."}
{"text_id": 1108217, "text": "irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`."}
{"text_id": 1108218, "text": "rfft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108219, "text": "rfft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108220, "text": "rfft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108221, "text": "rfft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108222, "text": "rfft(a, n=None, axis=-1, norm=None): Compute the one-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108223, "text": "rfft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional FFT of a real array."}
{"text_id": 1108224, "text": "rfft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional FFT of a real array."}
{"text_id": 1108225, "text": "rfft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional FFT of a real array."}
{"text_id": 1108226, "text": "rfft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional FFT of a real array."}
{"text_id": 1108227, "text": "rfft2(a, s=None, axes=(-2, -1), norm=None): Compute the 2-dimensional FFT of a real array."}
{"text_id": 1108228, "text": "rfftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft)."}
{"text_id": 1108229, "text": "rfftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft)."}
{"text_id": 1108230, "text": "rfftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft)."}
{"text_id": 1108231, "text": "rfftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft)."}
{"text_id": 1108232, "text": "rfftfreq(n, d=1.0): Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft)."}
{"text_id": 1108233, "text": "rfftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108234, "text": "rfftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108235, "text": "rfftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108236, "text": "rfftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108237, "text": "rfftn(a, s=None, axes=None, norm=None): Compute the N-dimensional discrete Fourier Transform for real input."}
{"text_id": 1108238, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108239, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108240, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108241, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108242, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108243, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108244, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108245, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108246, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108247, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108248, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108249, "text": "fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality."}
{"text_id": 1108250, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108251, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108252, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108253, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108254, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108255, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108256, "text": "fix(x, out=None, **kwargs): Round an array of floats element-wise to nearest integer towards zero."}
{"text_id": 1108257, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108258, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108259, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108260, "text": "fix(self, *args, **kwargs): Convenience fluent method for :py:func:`fix`."}
{"text_id": 1108261, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108262, "text": "fix(x, out=None, **kwargs): Round an array of floats element-wise to nearest integer towards zero."}
{"text_id": 1108263, "text": "fix(self, *args, **kwargs): Convenience fluent method for :py:func:`fix`."}
{"text_id": 1108264, "text": "fix(self, *args, **kwargs): Convenience fluent method for :py:func:`fix`."}
{"text_id": 1108265, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108266, "text": "fix(x, out=None): Round to nearest integer towards zero."}
{"text_id": 1108267, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108268, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108269, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108270, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108271, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108272, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108273, "text": "flip(m, axis=None, out=None): flip(m, axis=None, out=None) Reverse the order of elements in an array along the given axis."}
{"text_id": 1108274, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108275, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108276, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108277, "text": "flip(self, *args, **kwargs): Convenience fluent method for :py:func:`flip`."}
{"text_id": 1108278, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108279, "text": "flip(m, axis=None, out=None): flip(m, axis=None, out=None) Reverse the order of elements in an array along the given axis."}
{"text_id": 1108280, "text": "flip(self, *args, **kwargs): Convenience fluent method for :py:func:`flip`."}
{"text_id": 1108281, "text": "flip(self, *args, **kwargs): Convenience fluent method for :py:func:`flip`."}
{"text_id": 1108282, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108283, "text": "flip(m, axis=None): Reverse the order of elements in an array along the given axis."}
{"text_id": 1108284, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108285, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108286, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108287, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108288, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108289, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108290, "text": "fliplr(m): fliplr(*args, **kwargs) Flip array in the left/right direction."}
{"text_id": 1108291, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108292, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108293, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108294, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108295, "text": "fliplr(m): fliplr(*args, **kwargs) Flip array in the left/right direction."}
{"text_id": 1108296, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108297, "text": "fliplr(m): Reverse the order of elements along axis 1 (left/right)."}
{"text_id": 1108298, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108299, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108300, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108301, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108302, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108303, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108304, "text": "flipud(m): flipud(*args, **kwargs) Flip array in the up/down direction."}
{"text_id": 1108305, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108306, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108307, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108308, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108309, "text": "flipud(m): flipud(*args, **kwargs) Flip array in the up/down direction."}
{"text_id": 1108310, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108311, "text": "flipud(m): Reverse the order of elements along axis 0 (up/down)."}
{"text_id": 1108312, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108313, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108314, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108315, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108316, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108317, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108318, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108319, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108320, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108321, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108322, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108323, "text": "fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing."}
{"text_id": 1108324, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108325, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108326, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108327, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108328, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108329, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108330, "text": "genfromtxt(*args, **kwargs): This is a wrapper of the official NumPy's `genfromtxt` function."}
{"text_id": 1108331, "text": "genfromtxt(*args, **kwargs): This is a wrapper of the official NumPy's `genfromtxt` function."}
{"text_id": 1108332, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108333, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108334, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108335, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108336, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108337, "text": "genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+,-./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None): Load data from a text file, with missing values handled as specified."}
{"text_id": 1108338, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108339, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108340, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108341, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108342, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108343, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108344, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108345, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108346, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108347, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108348, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108349, "text": "get_array_wrap(*args): Find the wrapper for the array with the highest priority."}
{"text_id": 1108350, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108351, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108352, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108353, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108354, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108355, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108356, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108357, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108358, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108359, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108360, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108361, "text": "get_include(): Return the directory that contains the NumPy \\*."}
{"text_id": 1108362, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108363, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108364, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108365, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108366, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108367, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108368, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108369, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108370, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108371, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108372, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108373, "text": "gradient(f, *varargs, axis=None, edge_order=1): Return the gradient of an N-dimensional array."}
{"text_id": 1108374, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108375, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108376, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108377, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108378, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108379, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108380, "text": "hamming(M, dtype=<class 'numpy.float32'>, ctx=None): Return the hamming window."}
{"text_id": 1108381, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108382, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108383, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108384, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108385, "text": "hamming(M, dtype=<class 'numpy.float32'>, ctx=None): Return the hamming window."}
{"text_id": 1108386, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108387, "text": "hamming(M): Return the Hamming window."}
{"text_id": 1108388, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108389, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108390, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108391, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108392, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108393, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108394, "text": "hanning(M, dtype=<class 'numpy.float32'>, ctx=None): Return the Hanning window."}
{"text_id": 1108395, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108396, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108397, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108398, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108399, "text": "hanning(M, dtype=<class 'numpy.float32'>, ctx=None): Return the Hanning window."}
{"text_id": 1108400, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108401, "text": "hanning(M): Return the Hanning window."}
{"text_id": 1108402, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108403, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108404, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108405, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108406, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108407, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108408, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a set of data."}
{"text_id": 1108409, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108410, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108411, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108412, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108413, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a set of data."}
{"text_id": 1108414, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108415, "text": "histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset."}
{"text_id": 1108416, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108417, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108418, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108419, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108420, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108421, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108422, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108423, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108424, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108425, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108426, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108427, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108428, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108429, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108430, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108431, "text": "histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None): Compute the bi-dimensional histogram of two data samples."}
{"text_id": 1108432, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108433, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108434, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108435, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108436, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108437, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108438, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108439, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108440, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108441, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108442, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108443, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108444, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108445, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108446, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108447, "text": "histogram_bin_edges(a, bins=10, range=None, weights=None): Function to calculate only the edges of the bins used by the `histogram` function."}
{"text_id": 1108448, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108449, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108450, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108451, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108452, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108453, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108454, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108455, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108456, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108457, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108458, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108459, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108460, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108461, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108462, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108463, "text": "histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None): Compute the multidimensional histogram of some data."}
{"text_id": 1108464, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108465, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108466, "text": "hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108467, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108468, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108469, "text": "hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108470, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108471, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108472, "text": "hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108473, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108474, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108475, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108476, "text": "hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108477, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108478, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108479, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108480, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108481, "text": "hsplit(ary, indices_or_sections): Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108482, "text": "hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise)."}
{"text_id": 1108483, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108484, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108485, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108486, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108487, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108488, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108489, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108490, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108491, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108492, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108493, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108494, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108495, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108496, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108497, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108498, "text": "i0(x): Modified Bessel function of the first kind, order 0."}
{"text_id": 1108499, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108500, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108501, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array."}
{"text_id": 1108502, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108503, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108504, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108505, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array."}
{"text_id": 1108506, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108507, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108508, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array."}
{"text_id": 1108509, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108510, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108511, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108512, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array."}
{"text_id": 1108513, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108514, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108515, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108516, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108517, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108518, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array."}
{"text_id": 1108519, "text": "in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array."}
{"text_id": 1108520, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108521, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108522, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108523, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108524, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108525, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108526, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108527, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108528, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108529, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108530, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108531, "text": "info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy'): Get help information for a function, class, or module."}
{"text_id": 1108532, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108533, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108534, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108535, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108536, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108537, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108538, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108539, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108540, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108541, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108542, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108543, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108544, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108545, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108546, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108547, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108548, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108549, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108550, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108551, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108552, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108553, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108554, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108555, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108556, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108557, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108558, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108559, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108560, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108561, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108562, "text": "insert(self, i, v, /): Insert a new item v into the array before position i."}
{"text_id": 1108563, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108564, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108565, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108566, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108567, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108568, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108569, "text": "insert(index, object, /): Insert object before index."}
{"text_id": 1108570, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108571, "text": "insert(arr, obj, values, axis=None): Insert values along the given axis before the given indices."}
{"text_id": 1108572, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108573, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108574, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108575, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108576, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108577, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108578, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108579, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108580, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108581, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108582, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108583, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108584, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108585, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108586, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108587, "text": "interp(x, xp, fp, left=None, right=None, period=None): One-dimensional linear interpolation for monotonically increasing sample points."}
{"text_id": 1108588, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108589, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108590, "text": "intersect1d(ar1, ar2, assume_unique=False): Returns the unique elements common to both arrays."}
{"text_id": 1108591, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108592, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108593, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108594, "text": "intersect1d(ar1, ar2, assume_unique=False): Returns the unique elements common to both arrays."}
{"text_id": 1108595, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108596, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108597, "text": "intersect1d(ar1, ar2, assume_unique=False): Returns the unique elements common to both arrays."}
{"text_id": 1108598, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108599, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108600, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108601, "text": "intersect1d(ar1, ar2, assume_unique=False): Returns the unique elements common to both arrays."}
{"text_id": 1108602, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108603, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108604, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108605, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108606, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108607, "text": "intersect1d(ar1, ar2, assume_unique=False, return_indices=False): Find the intersection of two arrays."}
{"text_id": 1108608, "text": "intersect1d(ar1, ar2, assume_unique=False): Returns the unique elements common to both arrays."}
{"text_id": 1108609, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108610, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108611, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108612, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108613, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108614, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108615, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108616, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108617, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108618, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108619, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108620, "text": "iscomplex(x): Returns a bool array, where True if input element is complex."}
{"text_id": 1108621, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108622, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108623, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108624, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108625, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108626, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108627, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108628, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108629, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108630, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108631, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108632, "text": "iscomplexobj(x): Check for a complex type or an array of complex numbers."}
{"text_id": 1108633, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108634, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108635, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108636, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108637, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108638, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108639, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108640, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108641, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108642, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108643, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108644, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108645, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108646, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108647, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108648, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108649, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108650, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108651, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108652, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108653, "text": "isin(element, test_elements, assume_unique=False, invert=False): Calculates `element in test_elements`, broadcasting over `element` only."}
{"text_id": 1108654, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108655, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108656, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108657, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108658, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108659, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108660, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108661, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108662, "text": "isneginf(x, out=None, **kwargs): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108663, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108664, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108665, "text": "isneginf(x, out=None, **kwargs): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108666, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108667, "text": "isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array."}
{"text_id": 1108668, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108669, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108670, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108671, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108672, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108673, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108674, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108675, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108676, "text": "isposinf(x, out=None, **kwargs): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108677, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108678, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108679, "text": "isposinf(x, out=None, **kwargs): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108680, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108681, "text": "isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array."}
{"text_id": 1108682, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108683, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108684, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108685, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108686, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108687, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108688, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108689, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108690, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108691, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108692, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108693, "text": "isrealobj(x): Return True if x is a not complex type or an array of complex numbers."}
{"text_id": 1108694, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108695, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108696, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108697, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108698, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108699, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108700, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108701, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108702, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108703, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108704, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108705, "text": "issubsctype(arg1, arg2): Determine if the first argument is a subclass of the second argument."}
{"text_id": 1108706, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108707, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108708, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108709, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108710, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108711, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108712, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108713, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108714, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108715, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108716, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108717, "text": "iterable(y): Check whether or not an object can be iterated over."}
{"text_id": 1108718, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108719, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108720, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108721, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108722, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108723, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108724, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108725, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108726, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108727, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108728, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108729, "text": "kaiser(M, beta): Return the Kaiser window."}
{"text_id": 1108730, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108731, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108732, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108733, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108734, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108735, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108736, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108737, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108738, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108739, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108740, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108741, "text": "kron(a, b): Kronecker product of two arrays."}
{"text_id": 1108742, "text": "Arrayterator(var, buf_size=None): Buffered iterator for big arrays."}
{"text_id": 1108743, "text": "Arrayterator(var, buf_size=None): Buffered iterator for big arrays."}
{"text_id": 1108744, "text": "Arrayterator(var, buf_size=None): Buffered iterator for big arrays."}
{"text_id": 1108745, "text": "Arrayterator(var, buf_size=None): Buffered iterator for big arrays."}
{"text_id": 1108746, "text": "Arrayterator(var, buf_size=None): Buffered iterator for big arrays."}
{"text_id": 1108747, "text": "NumpyVersion(vstring): Parse and compare numpy version strings."}
{"text_id": 1108748, "text": "NumpyVersion(vstring): Parse and compare numpy version strings."}
{"text_id": 1108749, "text": "NumpyVersion(vstring): Parse and compare numpy version strings."}
{"text_id": 1108750, "text": "NumpyVersion(vstring): Parse and compare numpy version strings."}
{"text_id": 1108751, "text": "NumpyVersion(vstring): Parse and compare numpy version strings."}
{"text_id": 1108752, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108753, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108754, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108755, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108756, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108757, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108758, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108759, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108760, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108761, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108762, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108763, "text": "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'): Load arrays or pickled objects from ``."}
{"text_id": 1108764, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108765, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108766, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108767, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108768, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108769, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108770, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108771, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108772, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108773, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108774, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108775, "text": "loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file."}
{"text_id": 1108776, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108777, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108778, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108779, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108780, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108781, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108782, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108783, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108784, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108785, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108786, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108787, "text": "lookfor(what, module=None, import_modules=True, regenerate=False, output=None): Do a keyword search on docstrings."}
{"text_id": 1108788, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108789, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108790, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108791, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108792, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108793, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108794, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108795, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108796, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108797, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108798, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108799, "text": "mafromtxt(fname, **kwargs): Load ASCII data stored in a text file and return a masked array."}
{"text_id": 1108800, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108801, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108802, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108803, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108804, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108805, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108806, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108807, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108808, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108809, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108810, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108811, "text": "mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function."}
{"text_id": 1108812, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108813, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108814, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108815, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108816, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108817, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108818, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108819, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108820, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108821, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108822, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108823, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108824, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108825, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108826, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108827, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108828, "text": "median(a, axis=None, out=None, overwrite_input=False, keepdims=False): Compute the median along the specified axis."}
{"text_id": 1108829, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108830, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108831, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108832, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108833, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108834, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108835, "text": "meshgrid(*xi, **kwargs): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108836, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108837, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108838, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108839, "text": "meshgrid(*xi, **kwargs): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108840, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108841, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108842, "text": "meshgrid(*xi, copy=True, sparse=False, indexing='xy'): Return coordinate matrices from coordinate vectors."}
{"text_id": 1108843, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108844, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108845, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108846, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108847, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108848, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108849, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108850, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108851, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108852, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108853, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108854, "text": "mintypecode(typechars, typeset='GDFgdf', default='d'): Return the character for the minimum-size type to which given types can be safely cast."}
{"text_id": 1108855, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108856, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108857, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108858, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108859, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108860, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108861, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108862, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108863, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108864, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108865, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108866, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108867, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108868, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108869, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108870, "text": "msort(a): Return a copy of an array sorted along the first axis."}
{"text_id": 1108871, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108872, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108873, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108874, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108875, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108876, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108877, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108878, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108879, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108880, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108881, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None, **kwargs): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108882, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None, **kwargs): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108883, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108884, "text": "nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None): Replace NaN with zero and infinity with large finite numbers (default behaviour) or with the numbers defined by the user using the `nan`, `posinf` and/or `neginf` keywords."}
{"text_id": 1108885, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108886, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108887, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108888, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108889, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108890, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108891, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108892, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108893, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108894, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108895, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108896, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108897, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108898, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108899, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108900, "text": "nanargmax(a, axis=None): Return the indices of the maximum values in the specified axis ignoring NaNs."}
{"text_id": 1108901, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108902, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108903, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108904, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108905, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108906, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108907, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108908, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108909, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108910, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108911, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108912, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108913, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108914, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108915, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108916, "text": "nanargmin(a, axis=None): Return the indices of the minimum values in the specified axis ignoring NaNs."}
{"text_id": 1108917, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108918, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108919, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108920, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108921, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108922, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108923, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108924, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108925, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108926, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108927, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108928, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108929, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108930, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108931, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108932, "text": "nancumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of array elements over a given axis treating Not a Numbers (NaNs) as one."}
{"text_id": 1108933, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108934, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108935, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108936, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108937, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108938, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108939, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108940, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108941, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108942, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108943, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108944, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108945, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108946, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108947, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108948, "text": "nancumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1108949, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108950, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108951, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108952, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108953, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108954, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108955, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108956, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108957, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108958, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108959, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108960, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108961, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108962, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108963, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108964, "text": "nanmax(a, axis=None, out=None, keepdims=<no value>): Return the maximum of an array or maximum along an axis, ignoring any NaNs."}
{"text_id": 1108965, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108966, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108967, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108968, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108969, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108970, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108971, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108972, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108973, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108974, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108975, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108976, "text": "nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs."}
{"text_id": 1108977, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108978, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108979, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108980, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108981, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108982, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108983, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108984, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108985, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108986, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108987, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108988, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108989, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108990, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108991, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108992, "text": "nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs."}
{"text_id": 1108993, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108994, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108995, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108996, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108997, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108998, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1108999, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109000, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109001, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109002, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109003, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109004, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109005, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109006, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109007, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109008, "text": "nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs."}
{"text_id": 1109009, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109010, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109011, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109012, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109013, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109014, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109015, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109016, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109017, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109018, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109019, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109020, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109021, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109022, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109023, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109024, "text": "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109025, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109026, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109027, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109028, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109029, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109030, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109031, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109032, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109033, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109034, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109035, "text": "nanprod(self, *args, **kwargs): Convenience fluent method for :py:func:`nanprod`."}
{"text_id": 1109036, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109037, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109038, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109039, "text": "nanprod(self, *args, **kwargs): Convenience fluent method for :py:func:`nanprod`."}
{"text_id": 1109040, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109041, "text": "nanprod(self, *args, **kwargs): Convenience fluent method for :py:func:`nanprod`."}
{"text_id": 1109042, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109043, "text": "nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the product of array elements over a given axis treating Not a Numbers (NaNs) as ones."}
{"text_id": 1109044, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109045, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109046, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109047, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109048, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109049, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109050, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109051, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109052, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109053, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109054, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109055, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109056, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109057, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109058, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109059, "text": "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values."}
{"text_id": 1109060, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109061, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109062, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109063, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109064, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109065, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109066, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109067, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109068, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109069, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109070, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109071, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109072, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109073, "text": "nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the standard deviation along the specified axis, while ignoring NaNs."}
{"text_id": 1109074, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109075, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109076, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109077, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109078, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109079, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109080, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109081, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109082, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109083, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109084, "text": "nansum(self, *args, **kwargs): Convenience fluent method for :py:func:`nansum`."}
{"text_id": 1109085, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109086, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109087, "text": "nansum(self, *args, **kwargs): Convenience fluent method for :py:func:`nansum`."}
{"text_id": 1109088, "text": "nansum(self, *args, **kwargs): Convenience fluent method for :py:func:`nansum`."}
{"text_id": 1109089, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109090, "text": "nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>): Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero."}
{"text_id": 1109091, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109092, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109093, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109094, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109095, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109096, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109097, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109098, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109099, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109100, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109101, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109102, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109103, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109104, "text": "nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs."}
{"text_id": 1109105, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109106, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109107, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109108, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109109, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109110, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109111, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109112, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109113, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109114, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109115, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109116, "text": "ndenumerate(arr): Multidimensional index iterator."}
{"text_id": 1109117, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109118, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109119, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109120, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109121, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109122, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109123, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109124, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109125, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109126, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109127, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109128, "text": "ndfromtxt(fname, **kwargs): Load ASCII data stored in a file and return it as a single array."}
{"text_id": 1109129, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109130, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109131, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109132, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109133, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109134, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109135, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109136, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109137, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109138, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109139, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109140, "text": "ndindex(*shape): An N-dimensional iterator object to index arrays."}
{"text_id": 1109141, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109142, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109143, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109144, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109145, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109146, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109147, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109148, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109149, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109150, "text": "pad(self, *args, **kwargs): Convenience fluent method for :py:func:`pad`."}
{"text_id": 1109151, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109152, "text": "pad(self, *args, **kwargs): Convenience fluent method for :py:func:`pad`."}
{"text_id": 1109153, "text": "pad(x, pad_width=None, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109154, "text": "pad(self, *args, **kwargs): Convenience fluent method for :py:func:`pad`."}
{"text_id": 1109155, "text": "pad(x, pad_width=None, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109156, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109157, "text": "pad(array, pad_width, mode='constant', **kwargs): Pad an array."}
{"text_id": 1109158, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109159, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109160, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109161, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109162, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109163, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109164, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109165, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109166, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109167, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109168, "text": "percentile(a, q, axis=None, out=None, overwrite_input=None, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109169, "text": "percentile(a, q, axis=None, out=None, overwrite_input=None, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109170, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109171, "text": "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th percentile of the data along the specified axis."}
{"text_id": 1109172, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109173, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109174, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109175, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109176, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109177, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109178, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109179, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109180, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109181, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109182, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109183, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109184, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109185, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109186, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109187, "text": "piecewise(x, condlist, funclist, *args, **kw): Evaluate a piecewise-defined function."}
{"text_id": 1109188, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109189, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109190, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109191, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109192, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109193, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109194, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109195, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109196, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109197, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109198, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109199, "text": "place(arr, mask, vals): Change elements of an array based on conditional and input values."}
{"text_id": 1109200, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109201, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109202, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109203, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109204, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109205, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109206, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109207, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109208, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109209, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109210, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109211, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109212, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109213, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109214, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109215, "text": "poly(seq_of_zeros): Find the coefficients of a polynomial with the given sequence of roots."}
{"text_id": 1109216, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109217, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109218, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109219, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109220, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109221, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109222, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109223, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109224, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109225, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109226, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109227, "text": "poly1d(c_or_r, r=False, variable=None): A one-dimensional polynomial class."}
{"text_id": 1109228, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109229, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109230, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109231, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109232, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109233, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109234, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109235, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109236, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109237, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109238, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109239, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109240, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109241, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109242, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109243, "text": "polyadd(a1, a2): Find the sum of two polynomials."}
{"text_id": 1109244, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109245, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109246, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109247, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109248, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109249, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109250, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109251, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109252, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109253, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109254, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109255, "text": "polyder(p, m=1): Return the derivative of the specified order of a polynomial."}
{"text_id": 1109256, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109257, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109258, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109259, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109260, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109261, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109262, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109263, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109264, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109265, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109266, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109267, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109268, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109269, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109270, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109271, "text": "polydiv(u, v): Returns the quotient and remainder of polynomial division."}
{"text_id": 1109272, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109273, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109274, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109275, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109276, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109277, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109278, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109279, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109280, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109281, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109282, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109283, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109284, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109285, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109286, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109287, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109288, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109289, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109290, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109291, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109292, "text": "polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False): Least squares polynomial fit."}
{"text_id": 1109293, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109294, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109295, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109296, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109297, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109298, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109299, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109300, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109301, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109302, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109303, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109304, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109305, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109306, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109307, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109308, "text": "polyint(p, m=1, k=None): Return an antiderivative (indefinite integral) of a polynomial."}
{"text_id": 1109309, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109310, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109311, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109312, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109313, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109314, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109315, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109316, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109317, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109318, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109319, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109320, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109321, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109322, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109323, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109324, "text": "polymul(a1, a2): Find the product of two polynomials."}
{"text_id": 1109325, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109326, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109327, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109328, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109329, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109330, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109331, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109332, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109333, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109334, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109335, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109336, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109337, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109338, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109339, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109340, "text": "polysub(a1, a2): Difference (subtraction) of two polynomials."}
{"text_id": 1109341, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109342, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109343, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109344, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109345, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109346, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109347, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109348, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109349, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109350, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109351, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109352, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109353, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109354, "text": "polyval(p, x): Evaluate a polynomial at specific values."}
{"text_id": 1109355, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109356, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109357, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109358, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109359, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109360, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109361, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109362, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109363, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109364, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109365, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109366, "text": "put_along_axis(arr, indices, values, axis): Put values into the destination array by matching 1d index and data slices."}
{"text_id": 1109367, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109368, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109369, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109370, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109371, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109372, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109373, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109374, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109375, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109376, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109377, "text": "quantile(a, q, axis=None, out=None, overwrite_input=None, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109378, "text": "quantile(a, q, axis=None, out=None, overwrite_input=None, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109379, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109380, "text": "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False): Compute the q-th quantile of the data along the specified axis."}
{"text_id": 1109381, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109382, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109383, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109384, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109385, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109386, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109387, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109388, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109389, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109390, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109391, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109392, "text": "real_if_close(a, tol=100): If input is complex with all imaginary parts close to zero, return real parts."}
{"text_id": 1109393, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109394, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109395, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109396, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109397, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109398, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109399, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109400, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109401, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109402, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109403, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109404, "text": "recfromcsv(fname, **kwargs): Load ASCII data stored in a comma-separated file."}
{"text_id": 1109405, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109406, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109407, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109408, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109409, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109410, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109411, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109412, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109413, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109414, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109415, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109416, "text": "recfromtxt(fname, **kwargs): Load ASCII data from a file and return it in a record array."}
{"text_id": 1109417, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109418, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109419, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109420, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109421, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109422, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109423, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109424, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109425, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109426, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109427, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109428, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109429, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109430, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109431, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109432, "text": "roots(p): Return the roots of a polynomial with coefficients given in p."}
{"text_id": 1109433, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109434, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109435, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109436, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109437, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109438, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109439, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109440, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109441, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109442, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109443, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109444, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109445, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109446, "text": "rot90(m, k=1, axes=(0, 1)): Rotate an array by 90 degrees in the plane specified by axes."}
{"text_id": 1109447, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109448, "text": "row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109449, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109450, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109451, "text": "row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109452, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109453, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109454, "text": "row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109455, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109456, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109457, "text": "row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109458, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109459, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109460, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109461, "text": "row_stack(arrays): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109462, "text": "row_stack(arrays): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109463, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109464, "text": "row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109465, "text": "row_stack(tup): Stack arrays in sequence vertically (row wise)."}
{"text_id": 1109466, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109467, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109468, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109469, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109470, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109471, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109472, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109473, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109474, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109475, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109476, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109477, "text": "safe_eval(source): Protected string evaluation."}
{"text_id": 1109478, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109479, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109480, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109481, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109482, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109483, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109484, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109485, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109486, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109487, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109488, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109489, "text": "save(file, arr, allow_pickle=True, fix_imports=True): Save an array to a binary file in NumPy ``."}
{"text_id": 1109490, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109491, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109492, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109493, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109494, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109495, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109496, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109497, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109498, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109499, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109500, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109501, "text": "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None): Save an array to a text file."}
{"text_id": 1109502, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109503, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109504, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109505, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109506, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109507, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109508, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109509, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109510, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109511, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109512, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109513, "text": "savez(file, *args, **kwds): Save several arrays into a single file in uncompressed ``."}
{"text_id": 1109514, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109515, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109516, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109517, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109518, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109519, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109520, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109521, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109522, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109523, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109524, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109525, "text": "savez_compressed(file, *args, **kwds): Save several arrays into a single file in compressed ``."}
{"text_id": 1109526, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109527, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109528, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109529, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109530, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109531, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109532, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109533, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109534, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109535, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109536, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109537, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109538, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109539, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109540, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109541, "text": "select(condlist, choicelist, default=0): Return an array drawn from elements in choicelist, depending on conditions."}
{"text_id": 1109542, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109543, "text": "setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements."}
{"text_id": 1109544, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109545, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109546, "text": "setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements."}
{"text_id": 1109547, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109548, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109549, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109550, "text": "setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements."}
{"text_id": 1109551, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109552, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109553, "text": "setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements."}
{"text_id": 1109554, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109555, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109556, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109557, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109558, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109559, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109560, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109561, "text": "setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements."}
{"text_id": 1109562, "text": "setdiff1d(ar1, ar2, assume_unique=False): Find the set difference of two arrays."}
{"text_id": 1109563, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109564, "text": "setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements."}
{"text_id": 1109565, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109566, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109567, "text": "setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements."}
{"text_id": 1109568, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109569, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109570, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109571, "text": "setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements."}
{"text_id": 1109572, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109573, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109574, "text": "setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements."}
{"text_id": 1109575, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109576, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109577, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109578, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109579, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109580, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109581, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109582, "text": "setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements."}
{"text_id": 1109583, "text": "setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays."}
{"text_id": 1109584, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109585, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109586, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109587, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109588, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109589, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109590, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109591, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109592, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109593, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109594, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109595, "text": "sinc(x): Return the normalized sinc function."}
{"text_id": 1109596, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109597, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109598, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109599, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109600, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109601, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109602, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109603, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109604, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109605, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109606, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109607, "text": "sort_complex(a): Sort a complex array using the real part first, then the imaginary part."}
{"text_id": 1109608, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109609, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109610, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109611, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109612, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109613, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109614, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109615, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109616, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109617, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109618, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109619, "text": "source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>): Print or write to a file the source code for a NumPy object."}
{"text_id": 1109620, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109621, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109622, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109623, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109624, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109625, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109626, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109627, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109628, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109629, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109630, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109631, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109632, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109633, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109634, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109635, "text": "take_along_axis(arr, indices, axis): Take values from the input array by matching 1d index and data slices."}
{"text_id": 1109636, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109637, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109638, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109639, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109640, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109641, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109642, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109643, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109644, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109645, "text": "tile(self, *args, **kwargs): Convenience fluent method for :py:func:`tile`."}
{"text_id": 1109646, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109647, "text": "tile(self, *args, **kwargs): Convenience fluent method for :py:func:`tile`."}
{"text_id": 1109648, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109649, "text": "tile(self, *args, **kwargs): Convenience fluent method for :py:func:`tile`."}
{"text_id": 1109650, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109651, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109652, "text": "tile(A, reps): Construct an array by repeating A the number of times given by reps."}
{"text_id": 1109653, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109654, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109655, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109656, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109657, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109658, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109659, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109660, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109661, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109662, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109663, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109664, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109665, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109666, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109667, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109668, "text": "trapz(y, x=None, dx=1.0, axis=-1): Integrate along the given axis using the composite trapezoidal rule."}
{"text_id": 1109669, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109670, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109671, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109672, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109673, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109674, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109675, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109676, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109677, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109678, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109679, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109680, "text": "tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None): An array with ones at and below the given diagonal and zeros elsewhere."}
{"text_id": 1109681, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109682, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109683, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109684, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109685, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109686, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109687, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109688, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109689, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109690, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109691, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109692, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109693, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109694, "text": "tril(m, k=0): Lower triangle of an array."}
{"text_id": 1109695, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109696, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109697, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109698, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109699, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109700, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109701, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109702, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109703, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109704, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109705, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109706, "text": "tril_indices(n, k=0, m=None): Return the indices for the lower-triangle of an (n, m) array."}
{"text_id": 1109707, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109708, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109709, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109710, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109711, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109712, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109713, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109714, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109715, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109716, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109717, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109718, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109719, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109720, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109721, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109722, "text": "tril_indices_from(arr, k=0): Return the indices for the lower-triangle of arr."}
{"text_id": 1109723, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109724, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109725, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109726, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109727, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109728, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109729, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109730, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109731, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109732, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109733, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109734, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109735, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109736, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109737, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109738, "text": "trim_zeros(filt, trim='fb'): Trim the leading and/or trailing zeros from a 1-D array or sequence."}
{"text_id": 1109739, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109740, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109741, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109742, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109743, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109744, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109745, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109746, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109747, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109748, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109749, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109750, "text": "triu(m, k=0): Upper triangle of an array."}
{"text_id": 1109751, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109752, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109753, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109754, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109755, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109756, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109757, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109758, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109759, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109760, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109761, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109762, "text": "triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array."}
{"text_id": 1109763, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109764, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109765, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109766, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109767, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109768, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109769, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109770, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109771, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109772, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109773, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109774, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109775, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109776, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109777, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109778, "text": "triu_indices_from(arr, k=0): Return the indices for the upper-triangle of arr."}
{"text_id": 1109779, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109780, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109781, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109782, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109783, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109784, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109785, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109786, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109787, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109788, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109789, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109790, "text": "typename(char): Return a description for the given data type code."}
{"text_id": 1109791, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109792, "text": "union1d(ar1, ar2): Union of two arrays."}
{"text_id": 1109793, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109794, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109795, "text": "union1d(ar1, ar2): Union of two arrays."}
{"text_id": 1109796, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109797, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109798, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109799, "text": "union1d(ar1, ar2): Union of two arrays."}
{"text_id": 1109800, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109801, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109802, "text": "union1d(ar1, ar2): Union of two arrays."}
{"text_id": 1109803, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109804, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109805, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109806, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109807, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109808, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109809, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109810, "text": "union1d(ar1, ar2): Union of two arrays."}
{"text_id": 1109811, "text": "union1d(ar1, ar2): Find the union of two arrays."}
{"text_id": 1109812, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109813, "text": "unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array."}
{"text_id": 1109814, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109815, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109816, "text": "unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array."}
{"text_id": 1109817, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109818, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109819, "text": "unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array."}
{"text_id": 1109820, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109821, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109822, "text": "unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array."}
{"text_id": 1109823, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109824, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109825, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109826, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109827, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109828, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109829, "text": "unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array."}
{"text_id": 1109830, "text": "unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array."}
{"text_id": 1109831, "text": "unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays."}
{"text_id": 1109832, "text": "unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays."}
{"text_id": 1109833, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109834, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109835, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109836, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109837, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109838, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109839, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109840, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109841, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109842, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109843, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109844, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109845, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109846, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109847, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109848, "text": "unwrap(p, discont=None, axis=-1, *, period=6.283185307179586): Unwrap by taking the complement of large deltas with respect to the period."}
{"text_id": 1109849, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109850, "text": "vander(x, n=None): Generate a Vandermonde matrix."}
{"text_id": 1109851, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109852, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109853, "text": "vander(x, n=None): Generate a Vandermonde matrix."}
{"text_id": 1109854, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109855, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109856, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109857, "text": "vander(x, n=None): Generate a Vandermonde matrix."}
{"text_id": 1109858, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109859, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109860, "text": "vander(x, n=None): Generate a Vandermonde matrix."}
{"text_id": 1109861, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109862, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109863, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109864, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109865, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109866, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109867, "text": "vander(x, n=None): Generate a Vandermonde matrix."}
{"text_id": 1109868, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109869, "text": "vander(x, N=None, increasing=False): Generate a Vandermonde matrix."}
{"text_id": 1109870, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109871, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109872, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109873, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109874, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109875, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109876, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109877, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109878, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109879, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109880, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109881, "text": "vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class."}
{"text_id": 1109882, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109883, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109884, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109885, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109886, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109887, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109888, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109889, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109890, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109891, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109892, "text": "vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109893, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109894, "text": "vsplit(ary, indices_or_sections): Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109895, "text": "vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise)."}
{"text_id": 1109896, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109897, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109898, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109899, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109900, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109901, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109902, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109903, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109904, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109905, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109906, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109907, "text": "who(vardict=None): Print the NumPy arrays in the given dictionary."}
{"text_id": 1109908, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109909, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109910, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109911, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109912, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109913, "text": "cholesky(a): Cholesky decomposition."}
{"text_id": 1109914, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109915, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109916, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109917, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109918, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109919, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109920, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109921, "text": "cond(x, p=None): Compute the condition number of a matrix."}
{"text_id": 1109922, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109923, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109924, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109925, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109926, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109927, "text": "det(a): Compute the determinant of an array."}
{"text_id": 1109928, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109929, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109930, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109931, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109932, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109933, "text": "eig(a): Compute the eigenvalues and right eigenvectors of a square array."}
{"text_id": 1109934, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."}
{"text_id": 1109935, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."}
{"text_id": 1109936, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."}
{"text_id": 1109937, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."}
{"text_id": 1109938, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors real symmetric matrix."}
{"text_id": 1109939, "text": "eigh(a, UPLO='L'): Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix."}
{"text_id": 1109940, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109941, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109942, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109943, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109944, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109945, "text": "eigvals(a): Compute the eigenvalues of a general matrix."}
{"text_id": 1109946, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues of a complex Hermitian or real symmetric matrix."}
{"text_id": 1109947, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues of a complex Hermitian or real symmetric matrix."}
{"text_id": 1109948, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues of a complex Hermitian or real symmetric matrix."}
{"text_id": 1109949, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues of a complex Hermitian or real symmetric matrix."}
{"text_id": 1109950, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues real symmetric matrix."}
{"text_id": 1109951, "text": "eigvalsh(a, UPLO='L'): Compute the eigenvalues of a complex Hermitian or real symmetric matrix."}
{"text_id": 1109952, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109953, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109954, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109955, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109956, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109957, "text": "inv(a): Compute the (multiplicative) inverse of a matrix."}
{"text_id": 1109958, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109959, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109960, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109961, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109962, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109963, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109964, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109965, "text": "lstsq(a, b, rcond='warn'): Return the least-squares solution to a linear matrix equation."}
{"text_id": 1109966, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109967, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109968, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109969, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109970, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109971, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109972, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109973, "text": "matrix_power(a, n): Raise a square matrix to the (integer) power `n`."}
{"text_id": 1109974, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109975, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109976, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109977, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109978, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109979, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109980, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109981, "text": "matrix_rank(M, tol=None, hermitian=False): Return matrix rank of array using SVD method Rank of the array is the number of singular values of the array that are greater than `tol`."}
{"text_id": 1109982, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109983, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109984, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109985, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109986, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109987, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109988, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109989, "text": "multi_dot(arrays, *, out=None): Compute the dot product of two or more arrays in a single function call, while automatically selecting the fastest evaluation order."}
{"text_id": 1109990, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109991, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109992, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109993, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109994, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109995, "text": "norm(self, *args, **kwargs): Convenience fluent method for :py:func:`norm`."}
{"text_id": 1109996, "text": "norm(self, *args, **kwargs): Convenience fluent method for :py:func:`norm`."}
{"text_id": 1109997, "text": "norm(self, *args, **kwargs): Convenience fluent method for :py:func:`norm`."}
{"text_id": 1109998, "text": "norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm."}
{"text_id": 1109999, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110000, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110001, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110002, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110003, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110004, "text": "pinv(a, rcond=1e-15, hermitian=False): Compute the (Moore-Penrose) pseudo-inverse of a matrix."}
{"text_id": 1110005, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110006, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110007, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110008, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110009, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110010, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110011, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110012, "text": "qr(a, mode='reduced'): Compute the qr factorization of a matrix."}
{"text_id": 1110013, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110014, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110015, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110016, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110017, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110018, "text": "slogdet(a): Compute the sign and (natural) logarithm of the determinant of an array."}
{"text_id": 1110019, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110020, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110021, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110022, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110023, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110024, "text": "solve(a, b): Solve a linear matrix equation, or system of linear scalar equations."}
{"text_id": 1110025, "text": "svd(a, full_matrices=True, compute_uv=True, hermitian=False): Singular Value Decomposition."}
{"text_id": 1110026, "text": "svd(a, full_matrices=True, compute_uv=True, hermitian=False): Singular Value Decomposition."}
{"text_id": 1110027, "text": "svd(a, full_matrices=True, compute_uv=True, hermitian=False): Singular Value Decomposition."}
{"text_id": 1110028, "text": "svd(a, full_matrices=True, compute_uv=True, hermitian=False): Singular Value Decomposition."}
{"text_id": 1110029, "text": "svd(a): Singular Value Decomposition."}
{"text_id": 1110030, "text": "svd(a, full_matrices=True, compute_uv=True, hermitian=False): Singular Value Decomposition."}
{"text_id": 1110031, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110032, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110033, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110034, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110035, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110036, "text": "tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array."}
{"text_id": 1110037, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110038, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110039, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110040, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110041, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110042, "text": "tensorsolve(a, b, axes=None): Solve the tensor equation ``a x = b`` for x."}
{"text_id": 1110043, "text": "MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110044, "text": "MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110045, "text": "MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110046, "text": "MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110047, "text": "MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110048, "text": "allequal(a, b, fill_value=True): Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."}
{"text_id": 1110049, "text": "allequal(a, b, fill_value=True): Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."}
{"text_id": 1110050, "text": "allequal(a, b, fill_value=True): Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."}
{"text_id": 1110051, "text": "allequal(a, b, fill_value=True): Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."}
{"text_id": 1110052, "text": "allequal(a, b, fill_value=True): Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."}
{"text_id": 1110053, "text": "anom(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110054, "text": "anom(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110055, "text": "anom(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110056, "text": "anom(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110057, "text": "anom(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110058, "text": "anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110059, "text": "anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110060, "text": "anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110061, "text": "anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110062, "text": "anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis."}
{"text_id": 1110063, "text": "clump_masked(a): Returns a list of slices corresponding to the masked clumps of a 1-D array."}
{"text_id": 1110064, "text": "clump_masked(a): Returns a list of slices corresponding to the masked clumps of a 1-D array."}
{"text_id": 1110065, "text": "clump_masked(a): Returns a list of slices corresponding to the masked clumps of a 1-D array."}
{"text_id": 1110066, "text": "clump_masked(a): Returns a list of slices corresponding to the masked clumps of a 1-D array."}
{"text_id": 1110067, "text": "clump_masked(a): Returns a list of slices corresponding to the masked clumps of a 1-D array."}
{"text_id": 1110068, "text": "clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array."}
{"text_id": 1110069, "text": "clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array."}
{"text_id": 1110070, "text": "clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array."}
{"text_id": 1110071, "text": "clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array."}
{"text_id": 1110072, "text": "clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array."}
{"text_id": 1110073, "text": "common_fill_value(a, b): Return the common filling value of two masked arrays, if any."}
{"text_id": 1110074, "text": "common_fill_value(a, b): Return the common filling value of two masked arrays, if any."}
{"text_id": 1110075, "text": "common_fill_value(a, b): Return the common filling value of two masked arrays, if any."}
{"text_id": 1110076, "text": "common_fill_value(a, b): Return the common filling value of two masked arrays, if any."}
{"text_id": 1110077, "text": "common_fill_value(a, b): Return the common filling value of two masked arrays, if any."}
{"text_id": 1110078, "text": "compress_cols(a): Suppress whole columns of a 2-D array that contain masked values."}
{"text_id": 1110079, "text": "compress_cols(a): Suppress whole columns of a 2-D array that contain masked values."}
{"text_id": 1110080, "text": "compress_cols(a): Suppress whole columns of a 2-D array that contain masked values."}
{"text_id": 1110081, "text": "compress_cols(a): Suppress whole columns of a 2-D array that contain masked values."}
{"text_id": 1110082, "text": "compress_cols(a): Suppress whole columns of a 2-D array that contain masked values."}
{"text_id": 1110083, "text": "compress_nd(x, axis=None): Suppress slices from multiple dimensions which contain masked values."}
{"text_id": 1110084, "text": "compress_nd(x, axis=None): Suppress slices from multiple dimensions which contain masked values."}
{"text_id": 1110085, "text": "compress_nd(x, axis=None): Suppress slices from multiple dimensions which contain masked values."}
{"text_id": 1110086, "text": "compress_nd(x, axis=None): Suppress slices from multiple dimensions which contain masked values."}
{"text_id": 1110087, "text": "compress_nd(x, axis=None): Suppress slices from multiple dimensions which contain masked values."}
{"text_id": 1110088, "text": "compress_rowcols(x, axis=None): Suppress the rows and/or columns of a 2-D array that contain masked values."}
{"text_id": 1110089, "text": "compress_rowcols(x, axis=None): Suppress the rows and/or columns of a 2-D array that contain masked values."}
{"text_id": 1110090, "text": "compress_rowcols(x, axis=None): Suppress the rows and/or columns of a 2-D array that contain masked values."}
{"text_id": 1110091, "text": "compress_rowcols(x, axis=None): Suppress the rows and/or columns of a 2-D array that contain masked values."}
{"text_id": 1110092, "text": "compress_rowcols(x, axis=None): Suppress the rows and/or columns of a 2-D array that contain masked values."}
{"text_id": 1110093, "text": "compress_rows(a): Suppress whole rows of a 2-D array that contain masked values."}
{"text_id": 1110094, "text": "compress_rows(a): Suppress whole rows of a 2-D array that contain masked values."}
{"text_id": 1110095, "text": "compress_rows(a): Suppress whole rows of a 2-D array that contain masked values."}
{"text_id": 1110096, "text": "compress_rows(a): Suppress whole rows of a 2-D array that contain masked values."}
{"text_id": 1110097, "text": "compress_rows(a): Suppress whole rows of a 2-D array that contain masked values."}
{"text_id": 1110098, "text": "compressed(x): Return all the non-masked data as a 1-D array."}
{"text_id": 1110099, "text": "compressed(x): Return all the non-masked data as a 1-D array."}
{"text_id": 1110100, "text": "compressed(x): Return all the non-masked data as a 1-D array."}
{"text_id": 1110101, "text": "compressed(x): Return all the non-masked data as a 1-D array."}
{"text_id": 1110102, "text": "compressed(x): Return all the non-masked data as a 1-D array."}
{"text_id": 1110103, "text": "count_masked(arr, axis=None): Count the number of masked elements along the given axis."}
{"text_id": 1110104, "text": "count_masked(arr, axis=None): Count the number of masked elements along the given axis."}
{"text_id": 1110105, "text": "count_masked(arr, axis=None): Count the number of masked elements along the given axis."}
{"text_id": 1110106, "text": "count_masked(arr, axis=None): Count the number of masked elements along the given axis."}
{"text_id": 1110107, "text": "count_masked(arr, axis=None): Count the number of masked elements along the given axis."}
{"text_id": 1110108, "text": "default_fill_value(obj): Return the default fill value for the argument object."}
{"text_id": 1110109, "text": "default_fill_value(obj): Return the default fill value for the argument object."}
{"text_id": 1110110, "text": "default_fill_value(obj): Return the default fill value for the argument object."}
{"text_id": 1110111, "text": "default_fill_value(obj): Return the default fill value for the argument object."}
{"text_id": 1110112, "text": "default_fill_value(obj): Return the default fill value for the argument object."}
{"text_id": 1110113, "text": "filled(a, fill_value=None): Return input as an array with masked data replaced by a fill value."}
{"text_id": 1110114, "text": "filled(a, fill_value=None): Return input as an array with masked data replaced by a fill value."}
{"text_id": 1110115, "text": "filled(a, fill_value=None): Return input as an array with masked data replaced by a fill value."}
{"text_id": 1110116, "text": "filled(a, fill_value=None): Return input as an array with masked data replaced by a fill value."}
{"text_id": 1110117, "text": "filled(a, fill_value=None): Return input as an array with masked data replaced by a fill value."}
{"text_id": 1110118, "text": "fix_invalid(a, mask=False, copy=True, fill_value=None): Return input with invalid data masked and replaced by a fill value."}
{"text_id": 1110119, "text": "fix_invalid(a, mask=False, copy=True, fill_value=None): Return input with invalid data masked and replaced by a fill value."}
{"text_id": 1110120, "text": "fix_invalid(a, mask=False, copy=True, fill_value=None): Return input with invalid data masked and replaced by a fill value."}
{"text_id": 1110121, "text": "fix_invalid(a, mask=False, copy=True, fill_value=None): Return input with invalid data masked and replaced by a fill value."}
{"text_id": 1110122, "text": "fix_invalid(a, mask=False, copy=True, fill_value=None): Return input with invalid data masked and replaced by a fill value."}
{"text_id": 1110123, "text": "flatnotmasked_contiguous(a): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110124, "text": "flatnotmasked_contiguous(a): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110125, "text": "flatnotmasked_contiguous(a): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110126, "text": "flatnotmasked_contiguous(a): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110127, "text": "flatnotmasked_contiguous(a): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110128, "text": "flatnotmasked_edges(a): Find the indices of the first and last unmasked values."}
{"text_id": 1110129, "text": "flatnotmasked_edges(a): Find the indices of the first and last unmasked values."}
{"text_id": 1110130, "text": "flatnotmasked_edges(a): Find the indices of the first and last unmasked values."}
{"text_id": 1110131, "text": "flatnotmasked_edges(a): Find the indices of the first and last unmasked values."}
{"text_id": 1110132, "text": "flatnotmasked_edges(a): Find the indices of the first and last unmasked values."}
{"text_id": 1110133, "text": "flatten_mask(mask): Returns a completely flattened version of the mask, where nested fields are collapsed."}
{"text_id": 1110134, "text": "flatten_mask(mask): Returns a completely flattened version of the mask, where nested fields are collapsed."}
{"text_id": 1110135, "text": "flatten_mask(mask): Returns a completely flattened version of the mask, where nested fields are collapsed."}
{"text_id": 1110136, "text": "flatten_mask(mask): Returns a completely flattened version of the mask, where nested fields are collapsed."}
{"text_id": 1110137, "text": "flatten_mask(mask): Returns a completely flattened version of the mask, where nested fields are collapsed."}
{"text_id": 1110138, "text": "flatten_structured_array(a): Flatten a structured array."}
{"text_id": 1110139, "text": "flatten_structured_array(a): Flatten a structured array."}
{"text_id": 1110140, "text": "flatten_structured_array(a): Flatten a structured array."}
{"text_id": 1110141, "text": "flatten_structured_array(a): Flatten a structured array."}
{"text_id": 1110142, "text": "flatten_structured_array(a): Flatten a structured array."}
{"text_id": 1110143, "text": "fromflex(fxarray): Build a masked array from a suitable flexible-type array."}
{"text_id": 1110144, "text": "fromflex(fxarray): Build a masked array from a suitable flexible-type array."}
{"text_id": 1110145, "text": "fromflex(fxarray): Build a masked array from a suitable flexible-type array."}
{"text_id": 1110146, "text": "fromflex(fxarray): Build a masked array from a suitable flexible-type array."}
{"text_id": 1110147, "text": "fromflex(fxarray): Build a masked array from a suitable flexible-type array."}
{"text_id": 1110148, "text": "getdata(a, subok=True): Return the data of a masked array as an ndarray."}
{"text_id": 1110149, "text": "getdata(a, subok=True): Return the data of a masked array as an ndarray."}
{"text_id": 1110150, "text": "getdata(a, subok=True): Return the data of a masked array as an ndarray."}
{"text_id": 1110151, "text": "getdata(a, subok=True): Return the data of a masked array as an ndarray."}
{"text_id": 1110152, "text": "getdata(a, subok=True): Return the data of a masked array as an ndarray."}
{"text_id": 1110153, "text": "getmask(a): Return the mask of a masked array, or nomask."}
{"text_id": 1110154, "text": "getmask(a): Return the mask of a masked array, or nomask."}
{"text_id": 1110155, "text": "getmask(a): Return the mask of a masked array, or nomask."}
{"text_id": 1110156, "text": "getmask(a): Return the mask of a masked array, or nomask."}
{"text_id": 1110157, "text": "getmask(a): Return the mask of a masked array, or nomask."}
{"text_id": 1110158, "text": "getmaskarray(arr): Return the mask of a masked array, or full boolean array of False."}
{"text_id": 1110159, "text": "getmaskarray(arr): Return the mask of a masked array, or full boolean array of False."}
{"text_id": 1110160, "text": "getmaskarray(arr): Return the mask of a masked array, or full boolean array of False."}
{"text_id": 1110161, "text": "getmaskarray(arr): Return the mask of a masked array, or full boolean array of False."}
{"text_id": 1110162, "text": "getmaskarray(arr): Return the mask of a masked array, or full boolean array of False."}
{"text_id": 1110163, "text": "harden_mask(a, *args, **params): harden_mask(self) Force the mask to hard."}
{"text_id": 1110164, "text": "harden_mask(a, *args, **params): harden_mask(self) Force the mask to hard."}
{"text_id": 1110165, "text": "harden_mask(a, *args, **params): harden_mask(self) Force the mask to hard."}
{"text_id": 1110166, "text": "harden_mask(a, *args, **params): harden_mask(self) Force the mask to hard."}
{"text_id": 1110167, "text": "harden_mask(a, *args, **params): harden_mask(self) Force the mask to hard."}
{"text_id": 1110168, "text": "ids(a, *args, **params): ids(self) Return the addresses of the data and mask areas."}
{"text_id": 1110169, "text": "ids(a, *args, **params): ids(self) Return the addresses of the data and mask areas."}
{"text_id": 1110170, "text": "ids(a, *args, **params): ids(self) Return the addresses of the data and mask areas."}
{"text_id": 1110171, "text": "ids(a, *args, **params): ids(self) Return the addresses of the data and mask areas."}
{"text_id": 1110172, "text": "ids(a, *args, **params): ids(self) Return the addresses of the data and mask areas."}
{"text_id": 1110173, "text": "innerproduct(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1110174, "text": "innerproduct(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1110175, "text": "innerproduct(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1110176, "text": "innerproduct(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1110177, "text": "innerproduct(a, b): inner(a, b) Inner product of two arrays."}
{"text_id": 1110178, "text": "isMA(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110179, "text": "isMA(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110180, "text": "isMA(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110181, "text": "isMA(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110182, "text": "isMA(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110183, "text": "isMaskedArray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110184, "text": "isMaskedArray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110185, "text": "isMaskedArray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110186, "text": "isMaskedArray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110187, "text": "isMaskedArray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110188, "text": "is_mask(m): Return True if m is a valid, standard mask."}
{"text_id": 1110189, "text": "is_mask(m): Return True if m is a valid, standard mask."}
{"text_id": 1110190, "text": "is_mask(m): Return True if m is a valid, standard mask."}
{"text_id": 1110191, "text": "is_mask(m): Return True if m is a valid, standard mask."}
{"text_id": 1110192, "text": "is_mask(m): Return True if m is a valid, standard mask."}
{"text_id": 1110193, "text": "is_masked(x): Determine whether input has masked values."}
{"text_id": 1110194, "text": "is_masked(x): Determine whether input has masked values."}
{"text_id": 1110195, "text": "is_masked(x): Determine whether input has masked values."}
{"text_id": 1110196, "text": "is_masked(x): Determine whether input has masked values."}
{"text_id": 1110197, "text": "is_masked(x): Determine whether input has masked values."}
{"text_id": 1110198, "text": "isarray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110199, "text": "isarray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110200, "text": "isarray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110201, "text": "isarray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110202, "text": "isarray(x): Test whether input is an instance of MaskedArray."}
{"text_id": 1110203, "text": "make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>): Create a boolean mask from an array."}
{"text_id": 1110204, "text": "make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>): Create a boolean mask from an array."}
{"text_id": 1110205, "text": "make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>): Create a boolean mask from an array."}
{"text_id": 1110206, "text": "make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>): Create a boolean mask from an array."}
{"text_id": 1110207, "text": "make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>): Create a boolean mask from an array."}
{"text_id": 1110208, "text": "make_mask_descr(ndtype): Construct a dtype description list from a given dtype."}
{"text_id": 1110209, "text": "make_mask_descr(ndtype): Construct a dtype description list from a given dtype."}
{"text_id": 1110210, "text": "make_mask_descr(ndtype): Construct a dtype description list from a given dtype."}
{"text_id": 1110211, "text": "make_mask_descr(ndtype): Construct a dtype description list from a given dtype."}
{"text_id": 1110212, "text": "make_mask_descr(ndtype): Construct a dtype description list from a given dtype."}
{"text_id": 1110213, "text": "make_mask_none(newshape, dtype=None): Return a boolean mask of the given shape, filled with False."}
{"text_id": 1110214, "text": "make_mask_none(newshape, dtype=None): Return a boolean mask of the given shape, filled with False."}
{"text_id": 1110215, "text": "make_mask_none(newshape, dtype=None): Return a boolean mask of the given shape, filled with False."}
{"text_id": 1110216, "text": "make_mask_none(newshape, dtype=None): Return a boolean mask of the given shape, filled with False."}
{"text_id": 1110217, "text": "make_mask_none(newshape, dtype=None): Return a boolean mask of the given shape, filled with False."}
{"text_id": 1110218, "text": "mask_cols(a, axis=<no value>): Mask columns of a 2D array that contain masked values."}
{"text_id": 1110219, "text": "mask_cols(a, axis=<no value>): Mask columns of a 2D array that contain masked values."}
{"text_id": 1110220, "text": "mask_cols(a, axis=<no value>): Mask columns of a 2D array that contain masked values."}
{"text_id": 1110221, "text": "mask_cols(a, axis=<no value>): Mask columns of a 2D array that contain masked values."}
{"text_id": 1110222, "text": "mask_cols(a, axis=<no value>): Mask columns of a 2D array that contain masked values."}
{"text_id": 1110223, "text": "mask_or(m1, m2, copy=False, shrink=True): Combine two masks with the ``logical_or`` operator."}
{"text_id": 1110224, "text": "mask_or(m1, m2, copy=False, shrink=True): Combine two masks with the ``logical_or`` operator."}
{"text_id": 1110225, "text": "mask_or(m1, m2, copy=False, shrink=True): Combine two masks with the ``logical_or`` operator."}
{"text_id": 1110226, "text": "mask_or(m1, m2, copy=False, shrink=True): Combine two masks with the ``logical_or`` operator."}
{"text_id": 1110227, "text": "mask_or(m1, m2, copy=False, shrink=True): Combine two masks with the ``logical_or`` operator."}
{"text_id": 1110228, "text": "mask_rowcols(a, axis=None): Mask rows and/or columns of a 2D array that contain masked values."}
{"text_id": 1110229, "text": "mask_rowcols(a, axis=None): Mask rows and/or columns of a 2D array that contain masked values."}
{"text_id": 1110230, "text": "mask_rowcols(a, axis=None): Mask rows and/or columns of a 2D array that contain masked values."}
{"text_id": 1110231, "text": "mask_rowcols(a, axis=None): Mask rows and/or columns of a 2D array that contain masked values."}
{"text_id": 1110232, "text": "mask_rowcols(a, axis=None): Mask rows and/or columns of a 2D array that contain masked values."}
{"text_id": 1110233, "text": "mask_rows(a, axis=<no value>): Mask rows of a 2D array that contain masked values."}
{"text_id": 1110234, "text": "mask_rows(a, axis=<no value>): Mask rows of a 2D array that contain masked values."}
{"text_id": 1110235, "text": "mask_rows(a, axis=<no value>): Mask rows of a 2D array that contain masked values."}
{"text_id": 1110236, "text": "mask_rows(a, axis=<no value>): Mask rows of a 2D array that contain masked values."}
{"text_id": 1110237, "text": "mask_rows(a, axis=<no value>): Mask rows of a 2D array that contain masked values."}
{"text_id": 1110238, "text": "masked_all(shape, dtype=<class 'float'>): Empty masked array with all elements masked."}
{"text_id": 1110239, "text": "masked_all(shape, dtype=<class 'float'>): Empty masked array with all elements masked."}
{"text_id": 1110240, "text": "masked_all(shape, dtype=<class 'float'>): Empty masked array with all elements masked."}
{"text_id": 1110241, "text": "masked_all(shape, dtype=<class 'float'>): Empty masked array with all elements masked."}
{"text_id": 1110242, "text": "masked_all(shape, dtype=<class 'float'>): Empty masked array with all elements masked."}
{"text_id": 1110243, "text": "masked_all_like(arr): Empty masked array with the properties of an existing array."}
{"text_id": 1110244, "text": "masked_all_like(arr): Empty masked array with the properties of an existing array."}
{"text_id": 1110245, "text": "masked_all_like(arr): Empty masked array with the properties of an existing array."}
{"text_id": 1110246, "text": "masked_all_like(arr): Empty masked array with the properties of an existing array."}
{"text_id": 1110247, "text": "masked_all_like(arr): Empty masked array with the properties of an existing array."}
{"text_id": 1110248, "text": "masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110249, "text": "masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110250, "text": "masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110251, "text": "masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110252, "text": "masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values."}
{"text_id": 1110253, "text": "masked_equal(x, value, copy=True): Mask an array where equal to a given value."}
{"text_id": 1110254, "text": "masked_equal(x, value, copy=True): Mask an array where equal to a given value."}
{"text_id": 1110255, "text": "masked_equal(x, value, copy=True): Mask an array where equal to a given value."}
{"text_id": 1110256, "text": "masked_equal(x, value, copy=True): Mask an array where equal to a given value."}
{"text_id": 1110257, "text": "masked_equal(x, value, copy=True): Mask an array where equal to a given value."}
{"text_id": 1110258, "text": "masked_greater(x, value, copy=True): Mask an array where greater than a given value."}
{"text_id": 1110259, "text": "masked_greater(x, value, copy=True): Mask an array where greater than a given value."}
{"text_id": 1110260, "text": "masked_greater(x, value, copy=True): Mask an array where greater than a given value."}
{"text_id": 1110261, "text": "masked_greater(x, value, copy=True): Mask an array where greater than a given value."}
{"text_id": 1110262, "text": "masked_greater(x, value, copy=True): Mask an array where greater than a given value."}
{"text_id": 1110263, "text": "masked_greater_equal(x, value, copy=True): Mask an array where greater than or equal to a given value."}
{"text_id": 1110264, "text": "masked_greater_equal(x, value, copy=True): Mask an array where greater than or equal to a given value."}
{"text_id": 1110265, "text": "masked_greater_equal(x, value, copy=True): Mask an array where greater than or equal to a given value."}
{"text_id": 1110266, "text": "masked_greater_equal(x, value, copy=True): Mask an array where greater than or equal to a given value."}
{"text_id": 1110267, "text": "masked_greater_equal(x, value, copy=True): Mask an array where greater than or equal to a given value."}
{"text_id": 1110268, "text": "masked_inside(x, v1, v2, copy=True): Mask an array inside a given interval."}
{"text_id": 1110269, "text": "masked_inside(x, v1, v2, copy=True): Mask an array inside a given interval."}
{"text_id": 1110270, "text": "masked_inside(x, v1, v2, copy=True): Mask an array inside a given interval."}
{"text_id": 1110271, "text": "masked_inside(x, v1, v2, copy=True): Mask an array inside a given interval."}
{"text_id": 1110272, "text": "masked_inside(x, v1, v2, copy=True): Mask an array inside a given interval."}
{"text_id": 1110273, "text": "masked_invalid(a, copy=True): Mask an array where invalid values occur (NaNs or infs)."}
{"text_id": 1110274, "text": "masked_invalid(a, copy=True): Mask an array where invalid values occur (NaNs or infs)."}
{"text_id": 1110275, "text": "masked_invalid(a, copy=True): Mask an array where invalid values occur (NaNs or infs)."}
{"text_id": 1110276, "text": "masked_invalid(a, copy=True): Mask an array where invalid values occur (NaNs or infs)."}
{"text_id": 1110277, "text": "masked_invalid(a, copy=True): Mask an array where invalid values occur (NaNs or infs)."}
{"text_id": 1110278, "text": "masked_less(x, value, copy=True): Mask an array where less than a given value."}
{"text_id": 1110279, "text": "masked_less(x, value, copy=True): Mask an array where less than a given value."}
{"text_id": 1110280, "text": "masked_less(x, value, copy=True): Mask an array where less than a given value."}
{"text_id": 1110281, "text": "masked_less(x, value, copy=True): Mask an array where less than a given value."}
{"text_id": 1110282, "text": "masked_less(x, value, copy=True): Mask an array where less than a given value."}
{"text_id": 1110283, "text": "masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value."}
{"text_id": 1110284, "text": "masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value."}
{"text_id": 1110285, "text": "masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value."}
{"text_id": 1110286, "text": "masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value."}
{"text_id": 1110287, "text": "masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value."}
{"text_id": 1110288, "text": "masked_not_equal(x, value, copy=True): Mask an array where `not` equal to a given value."}
{"text_id": 1110289, "text": "masked_not_equal(x, value, copy=True): Mask an array where `not` equal to a given value."}
{"text_id": 1110290, "text": "masked_not_equal(x, value, copy=True): Mask an array where `not` equal to a given value."}
{"text_id": 1110291, "text": "masked_not_equal(x, value, copy=True): Mask an array where `not` equal to a given value."}
{"text_id": 1110292, "text": "masked_not_equal(x, value, copy=True): Mask an array where `not` equal to a given value."}
{"text_id": 1110293, "text": "masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value."}
{"text_id": 1110294, "text": "masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value."}
{"text_id": 1110295, "text": "masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value."}
{"text_id": 1110296, "text": "masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value."}
{"text_id": 1110297, "text": "masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value."}
{"text_id": 1110298, "text": "masked_outside(x, v1, v2, copy=True): Mask an array outside a given interval."}
{"text_id": 1110299, "text": "masked_outside(x, v1, v2, copy=True): Mask an array outside a given interval."}
{"text_id": 1110300, "text": "masked_outside(x, v1, v2, copy=True): Mask an array outside a given interval."}
{"text_id": 1110301, "text": "masked_outside(x, v1, v2, copy=True): Mask an array outside a given interval."}
{"text_id": 1110302, "text": "masked_outside(x, v1, v2, copy=True): Mask an array outside a given interval."}
{"text_id": 1110303, "text": "masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): Mask using floating point equality."}
{"text_id": 1110304, "text": "masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): Mask using floating point equality."}
{"text_id": 1110305, "text": "masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): Mask using floating point equality."}
{"text_id": 1110306, "text": "masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): Mask using floating point equality."}
{"text_id": 1110307, "text": "masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True): Mask using floating point equality."}
{"text_id": 1110308, "text": "masked_where(condition, a, copy=True): Mask an array where a condition is met."}
{"text_id": 1110309, "text": "masked_where(condition, a, copy=True): Mask an array where a condition is met."}
{"text_id": 1110310, "text": "masked_where(condition, a, copy=True): Mask an array where a condition is met."}
{"text_id": 1110311, "text": "masked_where(condition, a, copy=True): Mask an array where a condition is met."}
{"text_id": 1110312, "text": "masked_where(condition, a, copy=True): Mask an array where a condition is met."}
{"text_id": 1110313, "text": "maximum_fill_value(obj): Return the minimum value that can be represented by the dtype of an object."}
{"text_id": 1110314, "text": "maximum_fill_value(obj): Return the minimum value that can be represented by the dtype of an object."}
{"text_id": 1110315, "text": "maximum_fill_value(obj): Return the minimum value that can be represented by the dtype of an object."}
{"text_id": 1110316, "text": "maximum_fill_value(obj): Return the minimum value that can be represented by the dtype of an object."}
{"text_id": 1110317, "text": "maximum_fill_value(obj): Return the minimum value that can be represented by the dtype of an object."}
{"text_id": 1110318, "text": "minimum_fill_value(obj): Return the maximum value that can be represented by the dtype of an object."}
{"text_id": 1110319, "text": "minimum_fill_value(obj): Return the maximum value that can be represented by the dtype of an object."}
{"text_id": 1110320, "text": "minimum_fill_value(obj): Return the maximum value that can be represented by the dtype of an object."}
{"text_id": 1110321, "text": "minimum_fill_value(obj): Return the maximum value that can be represented by the dtype of an object."}
{"text_id": 1110322, "text": "minimum_fill_value(obj): Return the maximum value that can be represented by the dtype of an object."}
{"text_id": 1110323, "text": "mvoid(data, mask=False, dtype=None, fill_value=None, hardmask=False, copy=False, subok=True): Fake a 'void' object to use for masked array with structured dtypes."}
{"text_id": 1110324, "text": "mvoid(data, mask=False, dtype=None, fill_value=None, hardmask=False, copy=False, subok=True): Fake a 'void' object to use for masked array with structured dtypes."}
{"text_id": 1110325, "text": "mvoid(data, mask=False, dtype=None, fill_value=None, hardmask=False, copy=False, subok=True): Fake a 'void' object to use for masked array with structured dtypes."}
{"text_id": 1110326, "text": "mvoid(data, mask=False, dtype=None, fill_value=None, hardmask=False, copy=False, subok=True): Fake a 'void' object to use for masked array with structured dtypes."}
{"text_id": 1110327, "text": "mvoid(data, mask=False, dtype=None, fill_value=None, hardmask=False, copy=False, subok=True): Fake a 'void' object to use for masked array with structured dtypes."}
{"text_id": 1110328, "text": "notmasked_contiguous(a, axis=None): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110329, "text": "notmasked_contiguous(a, axis=None): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110330, "text": "notmasked_contiguous(a, axis=None): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110331, "text": "notmasked_contiguous(a, axis=None): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110332, "text": "notmasked_contiguous(a, axis=None): Find contiguous unmasked data in a masked array along the given axis."}
{"text_id": 1110333, "text": "notmasked_edges(a, axis=None): Find the indices of the first and last unmasked values along an axis."}
{"text_id": 1110334, "text": "notmasked_edges(a, axis=None): Find the indices of the first and last unmasked values along an axis."}
{"text_id": 1110335, "text": "notmasked_edges(a, axis=None): Find the indices of the first and last unmasked values along an axis."}
{"text_id": 1110336, "text": "notmasked_edges(a, axis=None): Find the indices of the first and last unmasked values along an axis."}
{"text_id": 1110337, "text": "notmasked_edges(a, axis=None): Find the indices of the first and last unmasked values along an axis."}
{"text_id": 1110338, "text": "outerproduct(a, b): Compute the outer product of two vectors."}
{"text_id": 1110339, "text": "outerproduct(a, b): Compute the outer product of two vectors."}
{"text_id": 1110340, "text": "outerproduct(a, b): Compute the outer product of two vectors."}
{"text_id": 1110341, "text": "outerproduct(a, b): Compute the outer product of two vectors."}
{"text_id": 1110342, "text": "outerproduct(a, b): Compute the outer product of two vectors."}
{"text_id": 1110343, "text": "set_fill_value(a, fill_value): Set the filling value of a, if a is a masked array."}
{"text_id": 1110344, "text": "set_fill_value(a, fill_value): Set the filling value of a, if a is a masked array."}
{"text_id": 1110345, "text": "set_fill_value(a, fill_value): Set the filling value of a, if a is a masked array."}
{"text_id": 1110346, "text": "set_fill_value(a, fill_value): Set the filling value of a, if a is a masked array."}
{"text_id": 1110347, "text": "set_fill_value(a, fill_value): Set the filling value of a, if a is a masked array."}
{"text_id": 1110348, "text": "soften_mask(a, *args, **params): soften_mask(self) Force the mask to soft."}
{"text_id": 1110349, "text": "soften_mask(a, *args, **params): soften_mask(self) Force the mask to soft."}
{"text_id": 1110350, "text": "soften_mask(a, *args, **params): soften_mask(self) Force the mask to soft."}
{"text_id": 1110351, "text": "soften_mask(a, *args, **params): soften_mask(self) Force the mask to soft."}
{"text_id": 1110352, "text": "soften_mask(a, *args, **params): soften_mask(self) Force the mask to soft."}
{"text_id": 1110353, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110354, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110355, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110356, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110357, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110358, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110359, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110360, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110361, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110362, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110363, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110364, "text": "mat(data, dtype=None): Interpret the input as a matrix."}
{"text_id": 1110365, "text": "acos(x, /): Return the arc cosine (measured in radians) of x."}
{"text_id": 1110366, "text": "acos(x, /): Return the arc cosine (measured in radians) of x."}
{"text_id": 1110367, "text": "acos(x, /): Return the arc cosine (measured in radians) of x."}
{"text_id": 1110368, "text": "acos(x, /): Return the arc cosine (measured in radians) of x."}
{"text_id": 1110369, "text": "acos(x, /): Return the arc cosine (measured in radians) of x."}
{"text_id": 1110370, "text": "acosh(x, /): Return the inverse hyperbolic cosine of x."}
{"text_id": 1110371, "text": "acosh(x, /): Return the inverse hyperbolic cosine of x."}
{"text_id": 1110372, "text": "acosh(x, /): Return the inverse hyperbolic cosine of x."}
{"text_id": 1110373, "text": "acosh(x, /): Return the inverse hyperbolic cosine of x."}
{"text_id": 1110374, "text": "acosh(x, /): Return the inverse hyperbolic cosine of x."}
{"text_id": 1110375, "text": "asin(x, /): Return the arc sine (measured in radians) of x."}
{"text_id": 1110376, "text": "asin(x, /): Return the arc sine (measured in radians) of x."}
{"text_id": 1110377, "text": "asin(x, /): Return the arc sine (measured in radians) of x."}
{"text_id": 1110378, "text": "asin(x, /): Return the arc sine (measured in radians) of x."}
{"text_id": 1110379, "text": "asin(x, /): Return the arc sine (measured in radians) of x."}
{"text_id": 1110380, "text": "asinh(x, /): Return the inverse hyperbolic sine of x."}
{"text_id": 1110381, "text": "asinh(x, /): Return the inverse hyperbolic sine of x."}
{"text_id": 1110382, "text": "asinh(x, /): Return the inverse hyperbolic sine of x."}
{"text_id": 1110383, "text": "asinh(x, /): Return the inverse hyperbolic sine of x."}
{"text_id": 1110384, "text": "asinh(x, /): Return the inverse hyperbolic sine of x."}
{"text_id": 1110385, "text": "atan(x, /): Return the arc tangent (measured in radians) of x."}
{"text_id": 1110386, "text": "atan(x, /): Return the arc tangent (measured in radians) of x."}
{"text_id": 1110387, "text": "atan(x, /): Return the arc tangent (measured in radians) of x."}
{"text_id": 1110388, "text": "atan(x, /): Return the arc tangent (measured in radians) of x."}
{"text_id": 1110389, "text": "atan(x, /): Return the arc tangent (measured in radians) of x."}
{"text_id": 1110390, "text": "atan2(y, x, /): Return the arc tangent (measured in radians) of y/x."}
{"text_id": 1110391, "text": "atan2(y, x, /): Return the arc tangent (measured in radians) of y/x."}
{"text_id": 1110392, "text": "atan2(y, x, /): Return the arc tangent (measured in radians) of y/x."}
{"text_id": 1110393, "text": "atan2(y, x, /): Return the arc tangent (measured in radians) of y/x."}
{"text_id": 1110394, "text": "atan2(y, x, /): Return the arc tangent (measured in radians) of y/x."}
{"text_id": 1110395, "text": "atanh(x, /): Return the inverse hyperbolic tangent of x."}
{"text_id": 1110396, "text": "atanh(x, /): Return the inverse hyperbolic tangent of x."}
{"text_id": 1110397, "text": "atanh(x, /): Return the inverse hyperbolic tangent of x."}
{"text_id": 1110398, "text": "atanh(x, /): Return the inverse hyperbolic tangent of x."}
{"text_id": 1110399, "text": "atanh(x, /): Return the inverse hyperbolic tangent of x."}
{"text_id": 1110400, "text": "comb(n, k, /): Number of ways to choose k items from n items without repetition and without order."}
{"text_id": 1110401, "text": "comb(n, k, /): Number of ways to choose k items from n items without repetition and without order."}
{"text_id": 1110402, "text": "comb(n, k, /): Number of ways to choose k items from n items without repetition and without order."}
{"text_id": 1110403, "text": "comb(n, k, /): Number of ways to choose k items from n items without repetition and without order."}
{"text_id": 1110404, "text": "comb(n, k, /): Number of ways to choose k items from n items without repetition and without order."}
{"text_id": 1110405, "text": "dist(p, q, /): Return the Euclidean distance between two points p and q."}
{"text_id": 1110406, "text": "dist(p, q, /): Return the Euclidean distance between two points p and q."}
{"text_id": 1110407, "text": "dist(p, q, /): Return the Euclidean distance between two points p and q."}
{"text_id": 1110408, "text": "dist(p, q, /): Return the Euclidean distance between two points p and q."}
{"text_id": 1110409, "text": "dist(p, q, /): Return the Euclidean distance between two points p and q."}
{"text_id": 1110410, "text": "erf(x, /): Error function at x."}
{"text_id": 1110411, "text": "erf(x, /): Error function at x."}
{"text_id": 1110412, "text": "erf(x, /): Error function at x."}
{"text_id": 1110413, "text": "erf(x, /): Error function at x."}
{"text_id": 1110414, "text": "erf(x, /): Error function at x."}
{"text_id": 1110415, "text": "erfc(x, /): Complementary error function at x."}
{"text_id": 1110416, "text": "erfc(x, /): Complementary error function at x."}
{"text_id": 1110417, "text": "erfc(x, /): Complementary error function at x."}
{"text_id": 1110418, "text": "erfc(x, /): Complementary error function at x."}
{"text_id": 1110419, "text": "erfc(x, /): Complementary error function at x."}
{"text_id": 1110420, "text": "factorial(x, /): Find x!."}
{"text_id": 1110421, "text": "factorial(x, /): Find x!."}
{"text_id": 1110422, "text": "factorial(x, /): Find x!."}
{"text_id": 1110423, "text": "factorial(x, /): Find x!."}
{"text_id": 1110424, "text": "factorial(x, /): Find x!."}
{"text_id": 1110425, "text": "fsum(seq, /): Return an accurate floating point sum of values in the iterable seq."}
{"text_id": 1110426, "text": "fsum(seq, /): Return an accurate floating point sum of values in the iterable seq."}
{"text_id": 1110427, "text": "fsum(seq, /): Return an accurate floating point sum of values in the iterable seq."}
{"text_id": 1110428, "text": "fsum(seq, /): Return an accurate floating point sum of values in the iterable seq."}
{"text_id": 1110429, "text": "fsum(seq, /): Return an accurate floating point sum of values in the iterable seq."}
{"text_id": 1110430, "text": "gamma(x, /): Gamma function at x."}
{"text_id": 1110431, "text": "gamma(x, /): Gamma function at x."}
{"text_id": 1110432, "text": "gamma(x, /): Gamma function at x."}
{"text_id": 1110433, "text": "gamma(x, /): Gamma function at x."}
{"text_id": 1110434, "text": "gamma(shape, scale=1.0, size=None, dtype=None, ctx=None, out=None): Draw samples from a Gamma distribution."}
{"text_id": 1110435, "text": "gamma(x, /): Gamma function at x."}
{"text_id": 1110436, "text": "isqrt(n, /): Return the integer part of the square root of the input."}
{"text_id": 1110437, "text": "isqrt(n, /): Return the integer part of the square root of the input."}
{"text_id": 1110438, "text": "isqrt(n, /): Return the integer part of the square root of the input."}
{"text_id": 1110439, "text": "isqrt(n, /): Return the integer part of the square root of the input."}
{"text_id": 1110440, "text": "isqrt(n, /): Return the integer part of the square root of the input."}
{"text_id": 1110441, "text": "lgamma(x, /): Natural logarithm of absolute value of Gamma function at x."}
{"text_id": 1110442, "text": "lgamma(x, /): Natural logarithm of absolute value of Gamma function at x."}
{"text_id": 1110443, "text": "lgamma(x, /): Natural logarithm of absolute value of Gamma function at x."}
{"text_id": 1110444, "text": "lgamma(x, /): Natural logarithm of absolute value of Gamma function at x."}
{"text_id": 1110445, "text": "lgamma(x, /): Natural logarithm of absolute value of Gamma function at x."}
{"text_id": 1110446, "text": "perm(n, k=None, /): Number of ways to choose k items from n items without repetition and with order."}
{"text_id": 1110447, "text": "perm(n, k=None, /): Number of ways to choose k items from n items without repetition and with order."}
{"text_id": 1110448, "text": "perm(n, k=None, /): Number of ways to choose k items from n items without repetition and with order."}
{"text_id": 1110449, "text": "perm(n, k=None, /): Number of ways to choose k items from n items without repetition and with order."}
{"text_id": 1110450, "text": "perm(n, k=None, /): Number of ways to choose k items from n items without repetition and with order."}
{"text_id": 1110451, "text": "pow(x, y, /): Return x**y (x to the power of y)."}
{"text_id": 1110452, "text": "pow(x, y, /): Return x**y (x to the power of y)."}
{"text_id": 1110453, "text": "pow(x, y, /): Return x**y (x to the power of y)."}
{"text_id": 1110454, "text": "pow(x, y, /): Return x**y (x to the power of y)."}
{"text_id": 1110455, "text": "pow(x, y, /): Return x**y (x to the power of y)."}
{"text_id": 1110456, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110457, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110458, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110459, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110460, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110461, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110462, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110463, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110464, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110465, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110466, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110467, "text": "matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True)."}
{"text_id": 1110468, "text": "getA(self): Return `self` as an `ndarray` object."}
{"text_id": 1110469, "text": "getA(self): Return `self` as an `ndarray` object."}
{"text_id": 1110470, "text": "getA(self): Return `self` as an `ndarray` object."}
{"text_id": 1110471, "text": "getA(self): Return `self` as an `ndarray` object."}
{"text_id": 1110472, "text": "getA(self): Return `self` as an `ndarray` object."}
{"text_id": 1110473, "text": "getA1(self): Return `self` as a flattened `ndarray`."}
{"text_id": 1110474, "text": "getA1(self): Return `self` as a flattened `ndarray`."}
{"text_id": 1110475, "text": "getA1(self): Return `self` as a flattened `ndarray`."}
{"text_id": 1110476, "text": "getA1(self): Return `self` as a flattened `ndarray`."}
{"text_id": 1110477, "text": "getA1(self): Return `self` as a flattened `ndarray`."}
{"text_id": 1110478, "text": "getH(self): Returns the (complex) conjugate transpose of `self`."}
{"text_id": 1110479, "text": "getH(self): Returns the (complex) conjugate transpose of `self`."}
{"text_id": 1110480, "text": "getH(self): Returns the (complex) conjugate transpose of `self`."}
{"text_id": 1110481, "text": "getH(self): Returns the (complex) conjugate transpose of `self`."}
{"text_id": 1110482, "text": "getH(self): Returns the (complex) conjugate transpose of `self`."}
{"text_id": 1110483, "text": "getI(self): Returns the (multiplicative) inverse of invertible `self`."}
{"text_id": 1110484, "text": "getI(self): Returns the (multiplicative) inverse of invertible `self`."}
{"text_id": 1110485, "text": "getI(self): Returns the (multiplicative) inverse of invertible `self`."}
{"text_id": 1110486, "text": "getI(self): Returns the (multiplicative) inverse of invertible `self`."}
{"text_id": 1110487, "text": "getI(self): Returns the (multiplicative) inverse of invertible `self`."}
{"text_id": 1110488, "text": "getT(self): Returns the transpose of the matrix."}
{"text_id": 1110489, "text": "getT(self): Returns the transpose of the matrix."}
{"text_id": 1110490, "text": "getT(self): Returns the transpose of the matrix."}
{"text_id": 1110491, "text": "getT(self): Returns the transpose of the matrix."}
{"text_id": 1110492, "text": "getT(self): Returns the transpose of the matrix."}
{"text_id": 1110493, "text": "flush(self): Write any changes in the array to the file on disk."}
{"text_id": 1110494, "text": "flush(self): Write any changes in the array to the file on disk."}
{"text_id": 1110495, "text": "flush(self): Write any changes in the array to the file on disk."}
{"text_id": 1110496, "text": "flush(self): Write any changes in the array to the file on disk."}
{"text_id": 1110497, "text": "flush(self): Write any changes in the array to the file on disk."}
{"text_id": 1110498, "text": "ndincr(self): Increment the multi-dimensional index by one."}
{"text_id": 1110499, "text": "ndincr(self): Increment the multi-dimensional index by one."}
{"text_id": 1110500, "text": "ndincr(self): Increment the multi-dimensional index by one."}
{"text_id": 1110501, "text": "ndincr(self): Increment the multi-dimensional index by one."}
{"text_id": 1110502, "text": "ndincr(self): Increment the multi-dimensional index by one."}
{"text_id": 1110503, "text": "close(fd): Close a file descriptor."}
{"text_id": 1110504, "text": "close(fd): Close a file descriptor."}
{"text_id": 1110505, "text": "close(fd): Close a file descriptor."}
{"text_id": 1110506, "text": "close(fd): Close a file descriptor."}
{"text_id": 1110507, "text": "close(fd): Close a file descriptor."}
{"text_id": 1110508, "text": "PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1110509, "text": "PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1110510, "text": "PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1110511, "text": "PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1110512, "text": "PathLike(): Abstract base class for implementing the file system path protocol."}
{"text_id": 1110513, "text": "WCOREDUMP(status, /): Return True if the process returning status was dumped to a core file."}
{"text_id": 1110514, "text": "WCOREDUMP(status, /): Return True if the process returning status was dumped to a core file."}
{"text_id": 1110515, "text": "WCOREDUMP(status, /): Return True if the process returning status was dumped to a core file."}
{"text_id": 1110516, "text": "WCOREDUMP(status, /): Return True if the process returning status was dumped to a core file."}
{"text_id": 1110517, "text": "WCOREDUMP(status, /): Return True if the process returning status was dumped to a core file."}
{"text_id": 1110518, "text": "WEXITSTATUS(status): Return the process return code from status."}
{"text_id": 1110519, "text": "WEXITSTATUS(status): Return the process return code from status."}
{"text_id": 1110520, "text": "WEXITSTATUS(status): Return the process return code from status."}
{"text_id": 1110521, "text": "WEXITSTATUS(status): Return the process return code from status."}
{"text_id": 1110522, "text": "WEXITSTATUS(status): Return the process return code from status."}
{"text_id": 1110523, "text": "WIFCONTINUED(status): Return True if a particular process was continued from a job control stop."}
{"text_id": 1110524, "text": "WIFCONTINUED(status): Return True if a particular process was continued from a job control stop."}
{"text_id": 1110525, "text": "WIFCONTINUED(status): Return True if a particular process was continued from a job control stop."}
{"text_id": 1110526, "text": "WIFCONTINUED(status): Return True if a particular process was continued from a job control stop."}
{"text_id": 1110527, "text": "WIFCONTINUED(status): Return True if a particular process was continued from a job control stop."}
{"text_id": 1110528, "text": "WIFEXITED(status): Return True if the process returning status exited via the exit() system call."}
{"text_id": 1110529, "text": "WIFEXITED(status): Return True if the process returning status exited via the exit() system call."}
{"text_id": 1110530, "text": "WIFEXITED(status): Return True if the process returning status exited via the exit() system call."}
{"text_id": 1110531, "text": "WIFEXITED(status): Return True if the process returning status exited via the exit() system call."}
{"text_id": 1110532, "text": "WIFEXITED(status): Return True if the process returning status exited via the exit() system call."}
{"text_id": 1110533, "text": "WIFSIGNALED(status): Return True if the process returning status was terminated by a signal."}
{"text_id": 1110534, "text": "WIFSIGNALED(status): Return True if the process returning status was terminated by a signal."}
{"text_id": 1110535, "text": "WIFSIGNALED(status): Return True if the process returning status was terminated by a signal."}
{"text_id": 1110536, "text": "WIFSIGNALED(status): Return True if the process returning status was terminated by a signal."}
{"text_id": 1110537, "text": "WIFSIGNALED(status): Return True if the process returning status was terminated by a signal."}
{"text_id": 1110538, "text": "WIFSTOPPED(status): Return True if the process returning status was stopped."}
{"text_id": 1110539, "text": "WIFSTOPPED(status): Return True if the process returning status was stopped."}
{"text_id": 1110540, "text": "WIFSTOPPED(status): Return True if the process returning status was stopped."}
{"text_id": 1110541, "text": "WIFSTOPPED(status): Return True if the process returning status was stopped."}
{"text_id": 1110542, "text": "WIFSTOPPED(status): Return True if the process returning status was stopped."}
{"text_id": 1110543, "text": "WSTOPSIG(status): Return the signal that stopped the process that provided the status value."}
{"text_id": 1110544, "text": "WSTOPSIG(status): Return the signal that stopped the process that provided the status value."}
{"text_id": 1110545, "text": "WSTOPSIG(status): Return the signal that stopped the process that provided the status value."}
{"text_id": 1110546, "text": "WSTOPSIG(status): Return the signal that stopped the process that provided the status value."}
{"text_id": 1110547, "text": "WSTOPSIG(status): Return the signal that stopped the process that provided the status value."}
{"text_id": 1110548, "text": "WTERMSIG(status): Return the signal that terminated the process that provided the status value."}
{"text_id": 1110549, "text": "WTERMSIG(status): Return the signal that terminated the process that provided the status value."}
{"text_id": 1110550, "text": "WTERMSIG(status): Return the signal that terminated the process that provided the status value."}
{"text_id": 1110551, "text": "WTERMSIG(status): Return the signal that terminated the process that provided the status value."}
{"text_id": 1110552, "text": "WTERMSIG(status): Return the signal that terminated the process that provided the status value."}
{"text_id": 1110553, "text": "abort(): Abort the interpreter immediately."}
{"text_id": 1110554, "text": "abort(): Abort the interpreter immediately."}
{"text_id": 1110555, "text": "abort(): Abort the interpreter immediately."}
{"text_id": 1110556, "text": "abort(): Abort the interpreter immediately."}
{"text_id": 1110557, "text": "abort(): Abort the interpreter immediately."}
{"text_id": 1110558, "text": "access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True): Use the real uid/gid to test for access to a path."}
{"text_id": 1110559, "text": "access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True): Use the real uid/gid to test for access to a path."}
{"text_id": 1110560, "text": "access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True): Use the real uid/gid to test for access to a path."}
{"text_id": 1110561, "text": "access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True): Use the real uid/gid to test for access to a path."}
{"text_id": 1110562, "text": "access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True): Use the real uid/gid to test for access to a path."}
{"text_id": 1110563, "text": "chdir(path): Change the current working directory to the specified path."}
{"text_id": 1110564, "text": "chdir(path): Change the current working directory to the specified path."}
{"text_id": 1110565, "text": "chdir(path): Change the current working directory to the specified path."}
{"text_id": 1110566, "text": "chdir(path): Change the current working directory to the specified path."}
{"text_id": 1110567, "text": "chdir(path): Change the current working directory to the specified path."}
{"text_id": 1110568, "text": "chmod(path, mode, *, dir_fd=None, follow_symlinks=True): Change the access permissions of a file."}
{"text_id": 1110569, "text": "chmod(path, mode, *, dir_fd=None, follow_symlinks=True): Change the access permissions of a file."}
{"text_id": 1110570, "text": "chmod(path, mode, *, dir_fd=None, follow_symlinks=True): Change the access permissions of a file."}
{"text_id": 1110571, "text": "chmod(path, mode, *, dir_fd=None, follow_symlinks=True): Change the access permissions of a file."}
{"text_id": 1110572, "text": "chmod(path, mode, *, dir_fd=None, follow_symlinks=True): Change the access permissions of a file."}
{"text_id": 1110573, "text": "chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110574, "text": "chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110575, "text": "chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110576, "text": "chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110577, "text": "chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110578, "text": "chroot(path): Change root directory to path."}
{"text_id": 1110579, "text": "chroot(path): Change root directory to path."}
{"text_id": 1110580, "text": "chroot(path): Change root directory to path."}
{"text_id": 1110581, "text": "chroot(path): Change root directory to path."}
{"text_id": 1110582, "text": "chroot(path): Change root directory to path."}
{"text_id": 1110583, "text": "closerange(fd_low, fd_high, /): Closes all file descriptors in [fd_low, fd_high), ignoring errors."}
{"text_id": 1110584, "text": "closerange(fd_low, fd_high, /): Closes all file descriptors in [fd_low, fd_high), ignoring errors."}
{"text_id": 1110585, "text": "closerange(fd_low, fd_high, /): Closes all file descriptors in [fd_low, fd_high), ignoring errors."}
{"text_id": 1110586, "text": "closerange(fd_low, fd_high, /): Closes all file descriptors in [fd_low, fd_high), ignoring errors."}
{"text_id": 1110587, "text": "closerange(fd_low, fd_high, /): Closes all file descriptors in [fd_low, fd_high), ignoring errors."}
{"text_id": 1110588, "text": "confstr(name, /): Return a string-valued system configuration variable."}
{"text_id": 1110589, "text": "confstr(name, /): Return a string-valued system configuration variable."}
{"text_id": 1110590, "text": "confstr(name, /): Return a string-valued system configuration variable."}
{"text_id": 1110591, "text": "confstr(name, /): Return a string-valued system configuration variable."}
{"text_id": 1110592, "text": "confstr(name, /): Return a string-valued system configuration variable."}
{"text_id": 1110593, "text": "cpu_count(): Return the number of CPUs in the system; return None if indeterminable."}
{"text_id": 1110594, "text": "cpu_count(): Return the number of CPUs in the system; return None if indeterminable."}
{"text_id": 1110595, "text": "cpu_count(): Return the number of CPUs in the system; return None if indeterminable."}
{"text_id": 1110596, "text": "cpu_count(): Return the number of CPUs in the system; return None if indeterminable."}
{"text_id": 1110597, "text": "cpu_count(): Return the number of CPUs in the system; return None if indeterminable."}
{"text_id": 1110598, "text": "ctermid(): Return the name of the controlling terminal for this process."}
{"text_id": 1110599, "text": "ctermid(): Return the name of the controlling terminal for this process."}
{"text_id": 1110600, "text": "ctermid(): Return the name of the controlling terminal for this process."}
{"text_id": 1110601, "text": "ctermid(): Return the name of the controlling terminal for this process."}
{"text_id": 1110602, "text": "ctermid(): Return the name of the controlling terminal for this process."}
{"text_id": 1110603, "text": "device_encoding(fd): Return a string describing the encoding of a terminal's file descriptor."}
{"text_id": 1110604, "text": "device_encoding(fd): Return a string describing the encoding of a terminal's file descriptor."}
{"text_id": 1110605, "text": "device_encoding(fd): Return a string describing the encoding of a terminal's file descriptor."}
{"text_id": 1110606, "text": "device_encoding(fd): Return a string describing the encoding of a terminal's file descriptor."}
{"text_id": 1110607, "text": "device_encoding(fd): Return a string describing the encoding of a terminal's file descriptor."}
{"text_id": 1110608, "text": "dup(fd, /): Return a duplicate of a file descriptor."}
{"text_id": 1110609, "text": "dup(fd, /): Return a duplicate of a file descriptor."}
{"text_id": 1110610, "text": "dup(fd, /): Return a duplicate of a file descriptor."}
{"text_id": 1110611, "text": "dup(fd, /): Return a duplicate of a file descriptor."}
{"text_id": 1110612, "text": "dup(fd, /): Return a duplicate of a file descriptor."}
{"text_id": 1110613, "text": "dup2(fd, fd2, inheritable=True): Duplicate file descriptor."}
{"text_id": 1110614, "text": "dup2(fd, fd2, inheritable=True): Duplicate file descriptor."}
{"text_id": 1110615, "text": "dup2(fd, fd2, inheritable=True): Duplicate file descriptor."}
{"text_id": 1110616, "text": "dup2(fd, fd2, inheritable=True): Duplicate file descriptor."}
{"text_id": 1110617, "text": "dup2(fd, fd2, inheritable=True): Duplicate file descriptor."}
{"text_id": 1110618, "text": "execl(file, *args): execl(file, *args) Execute the executable file with argument list args, replacing the current process."}
{"text_id": 1110619, "text": "execl(file, *args): execl(file, *args) Execute the executable file with argument list args, replacing the current process."}
{"text_id": 1110620, "text": "execl(file, *args): execl(file, *args) Execute the executable file with argument list args, replacing the current process."}
{"text_id": 1110621, "text": "execl(file, *args): execl(file, *args) Execute the executable file with argument list args, replacing the current process."}
{"text_id": 1110622, "text": "execl(file, *args): execl(file, *args) Execute the executable file with argument list args, replacing the current process."}
{"text_id": 1110623, "text": "execle(file, *args): execle(file, *args, env) Execute the executable file with argument list args and environment env, replacing the current process."}
{"text_id": 1110624, "text": "execle(file, *args): execle(file, *args, env) Execute the executable file with argument list args and environment env, replacing the current process."}
{"text_id": 1110625, "text": "execle(file, *args): execle(file, *args, env) Execute the executable file with argument list args and environment env, replacing the current process."}
{"text_id": 1110626, "text": "execle(file, *args): execle(file, *args, env) Execute the executable file with argument list args and environment env, replacing the current process."}
{"text_id": 1110627, "text": "execle(file, *args): execle(file, *args, env) Execute the executable file with argument list args and environment env, replacing the current process."}
{"text_id": 1110628, "text": "execlp(file, *args): execlp(file, *args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110629, "text": "execlp(file, *args): execlp(file, *args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110630, "text": "execlp(file, *args): execlp(file, *args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110631, "text": "execlp(file, *args): execlp(file, *args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110632, "text": "execlp(file, *args): execlp(file, *args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110633, "text": "execlpe(file, *args): execlpe(file, *args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110634, "text": "execlpe(file, *args): execlpe(file, *args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110635, "text": "execlpe(file, *args): execlpe(file, *args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110636, "text": "execlpe(file, *args): execlpe(file, *args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110637, "text": "execlpe(file, *args): execlpe(file, *args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110638, "text": "execv(path, argv, /): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110639, "text": "execv(path, argv, /): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110640, "text": "execv(path, argv, /): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110641, "text": "execv(path, argv, /): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110642, "text": "execv(path, argv, /): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110643, "text": "execve(path, argv, env): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110644, "text": "execve(path, argv, env): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110645, "text": "execve(path, argv, env): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110646, "text": "execve(path, argv, env): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110647, "text": "execve(path, argv, env): Execute an executable path with arguments, replacing current process."}
{"text_id": 1110648, "text": "execvp(file, args): execvp(file, args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110649, "text": "execvp(file, args): execvp(file, args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110650, "text": "execvp(file, args): execvp(file, args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110651, "text": "execvp(file, args): execvp(file, args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110652, "text": "execvp(file, args): execvp(file, args) Execute the executable file (which is searched for along $PATH) with argument list args, replacing the current process."}
{"text_id": 1110653, "text": "execvpe(file, args, env): execvpe(file, args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110654, "text": "execvpe(file, args, env): execvpe(file, args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110655, "text": "execvpe(file, args, env): execvpe(file, args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110656, "text": "execvpe(file, args, env): execvpe(file, args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110657, "text": "execvpe(file, args, env): execvpe(file, args, env) Execute the executable file (which is searched for along $PATH) with argument list args and environment env, replacing the current process."}
{"text_id": 1110658, "text": "fchdir(fd): Change to the directory of the given file descriptor."}
{"text_id": 1110659, "text": "fchdir(fd): Change to the directory of the given file descriptor."}
{"text_id": 1110660, "text": "fchdir(fd): Change to the directory of the given file descriptor."}
{"text_id": 1110661, "text": "fchdir(fd): Change to the directory of the given file descriptor."}
{"text_id": 1110662, "text": "fchdir(fd): Change to the directory of the given file descriptor."}
{"text_id": 1110663, "text": "fchmod(fd, mode): Change the access permissions of the file given by file descriptor fd."}
{"text_id": 1110664, "text": "fchmod(fd, mode): Change the access permissions of the file given by file descriptor fd."}
{"text_id": 1110665, "text": "fchmod(fd, mode): Change the access permissions of the file given by file descriptor fd."}
{"text_id": 1110666, "text": "fchmod(fd, mode): Change the access permissions of the file given by file descriptor fd."}
{"text_id": 1110667, "text": "fchmod(fd, mode): Change the access permissions of the file given by file descriptor fd."}
{"text_id": 1110668, "text": "fchown(fd, uid, gid): Change the owner and group id of the file specified by file descriptor."}
{"text_id": 1110669, "text": "fchown(fd, uid, gid): Change the owner and group id of the file specified by file descriptor."}
{"text_id": 1110670, "text": "fchown(fd, uid, gid): Change the owner and group id of the file specified by file descriptor."}
{"text_id": 1110671, "text": "fchown(fd, uid, gid): Change the owner and group id of the file specified by file descriptor."}
{"text_id": 1110672, "text": "fchown(fd, uid, gid): Change the owner and group id of the file specified by file descriptor."}
{"text_id": 1110673, "text": "fdatasync(fd): Force write of fd to disk without forcing update of metadata."}
{"text_id": 1110674, "text": "fdatasync(fd): Force write of fd to disk without forcing update of metadata."}
{"text_id": 1110675, "text": "fdatasync(fd): Force write of fd to disk without forcing update of metadata."}
{"text_id": 1110676, "text": "fdatasync(fd): Force write of fd to disk without forcing update of metadata."}
{"text_id": 1110677, "text": "fdatasync(fd): Force write of fd to disk without forcing update of metadata."}
{"text_id": 1110678, "text": "fork(): Fork a child process."}
{"text_id": 1110679, "text": "fork(): Fork a child process."}
{"text_id": 1110680, "text": "fork(): Fork a child process."}
{"text_id": 1110681, "text": "fork(): Fork a child process."}
{"text_id": 1110682, "text": "fork(): Fork a child process."}
{"text_id": 1110683, "text": "forkpty(): Fork a new process with a new pseudo-terminal as controlling tty."}
{"text_id": 1110684, "text": "forkpty(): Fork a new process with a new pseudo-terminal as controlling tty."}
{"text_id": 1110685, "text": "forkpty(): Fork a new process with a new pseudo-terminal as controlling tty."}
{"text_id": 1110686, "text": "forkpty(): Fork a new process with a new pseudo-terminal as controlling tty."}
{"text_id": 1110687, "text": "forkpty(): Fork a new process with a new pseudo-terminal as controlling tty."}
{"text_id": 1110688, "text": "fpathconf(fd, name, /): Return the configuration limit name for the file descriptor fd."}
{"text_id": 1110689, "text": "fpathconf(fd, name, /): Return the configuration limit name for the file descriptor fd."}
{"text_id": 1110690, "text": "fpathconf(fd, name, /): Return the configuration limit name for the file descriptor fd."}
{"text_id": 1110691, "text": "fpathconf(fd, name, /): Return the configuration limit name for the file descriptor fd."}
{"text_id": 1110692, "text": "fpathconf(fd, name, /): Return the configuration limit name for the file descriptor fd."}
{"text_id": 1110693, "text": "fsdecode(filename): Decode filename (an os."}
{"text_id": 1110694, "text": "fsdecode(filename): Decode filename (an os."}
{"text_id": 1110695, "text": "fsdecode(filename): Decode filename (an os."}
{"text_id": 1110696, "text": "fsdecode(filename): Decode filename (an os."}
{"text_id": 1110697, "text": "fsdecode(filename): Decode filename (an os."}
{"text_id": 1110698, "text": "fsencode(filename): Encode filename (an os."}
{"text_id": 1110699, "text": "fsencode(filename): Encode filename (an os."}
{"text_id": 1110700, "text": "fsencode(filename): Encode filename (an os."}
{"text_id": 1110701, "text": "fsencode(filename): Encode filename (an os."}
{"text_id": 1110702, "text": "fsencode(filename): Encode filename (an os."}
{"text_id": 1110703, "text": "fspath(path): Return the file system path representation of the object."}
{"text_id": 1110704, "text": "fspath(path): Return the file system path representation of the object."}
{"text_id": 1110705, "text": "fspath(path): Return the file system path representation of the object."}
{"text_id": 1110706, "text": "fspath(path): Return the file system path representation of the object."}
{"text_id": 1110707, "text": "fspath(path): Return the file system path representation of the object."}
{"text_id": 1110708, "text": "fstat(fd): Perform a stat system call on the given file descriptor."}
{"text_id": 1110709, "text": "fstat(fd): Perform a stat system call on the given file descriptor."}
{"text_id": 1110710, "text": "fstat(fd): Perform a stat system call on the given file descriptor."}
{"text_id": 1110711, "text": "fstat(fd): Perform a stat system call on the given file descriptor."}
{"text_id": 1110712, "text": "fstat(fd): Perform a stat system call on the given file descriptor."}
{"text_id": 1110713, "text": "fstatvfs(fd, /): Perform an fstatvfs system call on the given fd."}
{"text_id": 1110714, "text": "fstatvfs(fd, /): Perform an fstatvfs system call on the given fd."}
{"text_id": 1110715, "text": "fstatvfs(fd, /): Perform an fstatvfs system call on the given fd."}
{"text_id": 1110716, "text": "fstatvfs(fd, /): Perform an fstatvfs system call on the given fd."}
{"text_id": 1110717, "text": "fstatvfs(fd, /): Perform an fstatvfs system call on the given fd."}
{"text_id": 1110718, "text": "fsync(fd): Force write of fd to disk."}
{"text_id": 1110719, "text": "fsync(fd): Force write of fd to disk."}
{"text_id": 1110720, "text": "fsync(fd): Force write of fd to disk."}
{"text_id": 1110721, "text": "fsync(fd): Force write of fd to disk."}
{"text_id": 1110722, "text": "fsync(fd): Force write of fd to disk."}
{"text_id": 1110723, "text": "ftruncate(fd, length, /): Truncate a file, specified by file descriptor, to a specific length."}
{"text_id": 1110724, "text": "ftruncate(fd, length, /): Truncate a file, specified by file descriptor, to a specific length."}
{"text_id": 1110725, "text": "ftruncate(fd, length, /): Truncate a file, specified by file descriptor, to a specific length."}
{"text_id": 1110726, "text": "ftruncate(fd, length, /): Truncate a file, specified by file descriptor, to a specific length."}
{"text_id": 1110727, "text": "ftruncate(fd, length, /): Truncate a file, specified by file descriptor, to a specific length."}
{"text_id": 1110728, "text": "fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None): Directory tree generator."}
{"text_id": 1110729, "text": "fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None): Directory tree generator."}
{"text_id": 1110730, "text": "fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None): Directory tree generator."}
{"text_id": 1110731, "text": "fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None): Directory tree generator."}
{"text_id": 1110732, "text": "fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None): Directory tree generator."}
{"text_id": 1110733, "text": "get_blocking(fd, /): Get the blocking mode of the file descriptor."}
{"text_id": 1110734, "text": "get_blocking(fd, /): Get the blocking mode of the file descriptor."}
{"text_id": 1110735, "text": "get_blocking(fd, /): Get the blocking mode of the file descriptor."}
{"text_id": 1110736, "text": "get_blocking(fd, /): Get the blocking mode of the file descriptor."}
{"text_id": 1110737, "text": "get_blocking(fd, /): Get the blocking mode of the file descriptor."}
{"text_id": 1110738, "text": "get_exec_path(env=None): Returns the sequence of directories that will be searched for the named executable (similar to a shell) when launching a process."}
{"text_id": 1110739, "text": "get_exec_path(env=None): Returns the sequence of directories that will be searched for the named executable (similar to a shell) when launching a process."}
{"text_id": 1110740, "text": "get_exec_path(env=None): Returns the sequence of directories that will be searched for the named executable (similar to a shell) when launching a process."}
{"text_id": 1110741, "text": "get_exec_path(env=None): Returns the sequence of directories that will be searched for the named executable (similar to a shell) when launching a process."}
{"text_id": 1110742, "text": "get_exec_path(env=None): Returns the sequence of directories that will be searched for the named executable (similar to a shell) when launching a process."}
{"text_id": 1110743, "text": "get_inheritable(fd, /): Get the close-on-exe flag of the specified file descriptor."}
{"text_id": 1110744, "text": "get_inheritable(fd, /): Get the close-on-exe flag of the specified file descriptor."}
{"text_id": 1110745, "text": "get_inheritable(fd, /): Get the close-on-exe flag of the specified file descriptor."}
{"text_id": 1110746, "text": "get_inheritable(fd, /): Get the close-on-exe flag of the specified file descriptor."}
{"text_id": 1110747, "text": "get_inheritable(fd, /): Get the close-on-exe flag of the specified file descriptor."}
{"text_id": 1110748, "text": "getcwd(): Return a unicode string representing the current working directory."}
{"text_id": 1110749, "text": "getcwd(): Return a unicode string representing the current working directory."}
{"text_id": 1110750, "text": "getcwd(): Return a unicode string representing the current working directory."}
{"text_id": 1110751, "text": "getcwd(): Return a unicode string representing the current working directory."}
{"text_id": 1110752, "text": "getcwd(): Return a unicode string representing the current working directory."}
{"text_id": 1110753, "text": "getcwdb(): Return a bytes string representing the current working directory."}
{"text_id": 1110754, "text": "getcwdb(): Return a bytes string representing the current working directory."}
{"text_id": 1110755, "text": "getcwdb(): Return a bytes string representing the current working directory."}
{"text_id": 1110756, "text": "getcwdb(): Return a bytes string representing the current working directory."}
{"text_id": 1110757, "text": "getcwdb(): Return a bytes string representing the current working directory."}
{"text_id": 1110758, "text": "getegid(): Return the current process's effective group id."}
{"text_id": 1110759, "text": "getegid(): Return the current process's effective group id."}
{"text_id": 1110760, "text": "getegid(): Return the current process's effective group id."}
{"text_id": 1110761, "text": "getegid(): Return the current process's effective group id."}
{"text_id": 1110762, "text": "getegid(): Return the current process's effective group id."}
{"text_id": 1110763, "text": "getenv(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110764, "text": "getenv(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110765, "text": "getenv(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110766, "text": "getenv(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110767, "text": "getenv(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110768, "text": "getenvb(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110769, "text": "getenvb(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110770, "text": "getenvb(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110771, "text": "getenvb(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110772, "text": "getenvb(key, default=None): Get an environment variable, return None if it doesn't exist."}
{"text_id": 1110773, "text": "geteuid(): Return the current process's effective user id."}
{"text_id": 1110774, "text": "geteuid(): Return the current process's effective user id."}
{"text_id": 1110775, "text": "geteuid(): Return the current process's effective user id."}
{"text_id": 1110776, "text": "geteuid(): Return the current process's effective user id."}
{"text_id": 1110777, "text": "geteuid(): Return the current process's effective user id."}
{"text_id": 1110778, "text": "getgid(): Return the current process's group id."}
{"text_id": 1110779, "text": "getgid(): Return the current process's group id."}
{"text_id": 1110780, "text": "getgid(): Return the current process's group id."}
{"text_id": 1110781, "text": "getgid(): Return the current process's group id."}
{"text_id": 1110782, "text": "getgid(): Return the current process's group id."}
{"text_id": 1110783, "text": "getgroups(): Return list of supplemental group IDs for the process."}
{"text_id": 1110784, "text": "getgroups(): Return list of supplemental group IDs for the process."}
{"text_id": 1110785, "text": "getgroups(): Return list of supplemental group IDs for the process."}
{"text_id": 1110786, "text": "getgroups(): Return list of supplemental group IDs for the process."}
{"text_id": 1110787, "text": "getgroups(): Return list of supplemental group IDs for the process."}
{"text_id": 1110788, "text": "getloadavg(): Return average recent system load information."}
{"text_id": 1110789, "text": "getloadavg(): Return average recent system load information."}
{"text_id": 1110790, "text": "getloadavg(): Return average recent system load information."}
{"text_id": 1110791, "text": "getloadavg(): Return average recent system load information."}
{"text_id": 1110792, "text": "getloadavg(): Return average recent system load information."}
{"text_id": 1110793, "text": "getlogin(): Return the actual login name."}
{"text_id": 1110794, "text": "getlogin(): Return the actual login name."}
{"text_id": 1110795, "text": "getlogin(): Return the actual login name."}
{"text_id": 1110796, "text": "getlogin(): Return the actual login name."}
{"text_id": 1110797, "text": "getlogin(): Return the actual login name."}
{"text_id": 1110798, "text": "getpgid(pid): Call the system call getpgid(), and return the result."}
{"text_id": 1110799, "text": "getpgid(pid): Call the system call getpgid(), and return the result."}
{"text_id": 1110800, "text": "getpgid(pid): Call the system call getpgid(), and return the result."}
{"text_id": 1110801, "text": "getpgid(pid): Call the system call getpgid(), and return the result."}
{"text_id": 1110802, "text": "getpgid(pid): Call the system call getpgid(), and return the result."}
{"text_id": 1110803, "text": "getpgrp(): Return the current process group id."}
{"text_id": 1110804, "text": "getpgrp(): Return the current process group id."}
{"text_id": 1110805, "text": "getpgrp(): Return the current process group id."}
{"text_id": 1110806, "text": "getpgrp(): Return the current process group id."}
{"text_id": 1110807, "text": "getpgrp(): Return the current process group id."}
{"text_id": 1110808, "text": "getpid(): Return the current process id."}
{"text_id": 1110809, "text": "getpid(): Return the current process id."}
{"text_id": 1110810, "text": "getpid(): Return the current process id."}
{"text_id": 1110811, "text": "getpid(): Return the current process id."}
{"text_id": 1110812, "text": "getpid(): Return the current process id."}
{"text_id": 1110813, "text": "getppid(): Return the parent's process id."}
{"text_id": 1110814, "text": "getppid(): Return the parent's process id."}
{"text_id": 1110815, "text": "getppid(): Return the parent's process id."}
{"text_id": 1110816, "text": "getppid(): Return the parent's process id."}
{"text_id": 1110817, "text": "getppid(): Return the parent's process id."}
{"text_id": 1110818, "text": "getpriority(which, who): Return program scheduling priority."}
{"text_id": 1110819, "text": "getpriority(which, who): Return program scheduling priority."}
{"text_id": 1110820, "text": "getpriority(which, who): Return program scheduling priority."}
{"text_id": 1110821, "text": "getpriority(which, who): Return program scheduling priority."}
{"text_id": 1110822, "text": "getpriority(which, who): Return program scheduling priority."}
{"text_id": 1110823, "text": "getrandom(size, flags=0): Obtain a series of random bytes."}
{"text_id": 1110824, "text": "getrandom(size, flags=0): Obtain a series of random bytes."}
{"text_id": 1110825, "text": "getrandom(size, flags=0): Obtain a series of random bytes."}
{"text_id": 1110826, "text": "getrandom(size, flags=0): Obtain a series of random bytes."}
{"text_id": 1110827, "text": "getrandom(size, flags=0): Obtain a series of random bytes."}
{"text_id": 1110828, "text": "getresgid(): Return a tuple of the current process's real, effective, and saved group ids."}
{"text_id": 1110829, "text": "getresgid(): Return a tuple of the current process's real, effective, and saved group ids."}
{"text_id": 1110830, "text": "getresgid(): Return a tuple of the current process's real, effective, and saved group ids."}
{"text_id": 1110831, "text": "getresgid(): Return a tuple of the current process's real, effective, and saved group ids."}
{"text_id": 1110832, "text": "getresgid(): Return a tuple of the current process's real, effective, and saved group ids."}
{"text_id": 1110833, "text": "getresuid(): Return a tuple of the current process's real, effective, and saved user ids."}
{"text_id": 1110834, "text": "getresuid(): Return a tuple of the current process's real, effective, and saved user ids."}
{"text_id": 1110835, "text": "getresuid(): Return a tuple of the current process's real, effective, and saved user ids."}
{"text_id": 1110836, "text": "getresuid(): Return a tuple of the current process's real, effective, and saved user ids."}
{"text_id": 1110837, "text": "getresuid(): Return a tuple of the current process's real, effective, and saved user ids."}
{"text_id": 1110838, "text": "getsid(pid, /): Call the system call getsid(pid) and return the result."}
{"text_id": 1110839, "text": "getsid(pid, /): Call the system call getsid(pid) and return the result."}
{"text_id": 1110840, "text": "getsid(pid, /): Call the system call getsid(pid) and return the result."}
{"text_id": 1110841, "text": "getsid(pid, /): Call the system call getsid(pid) and return the result."}
{"text_id": 1110842, "text": "getsid(pid, /): Call the system call getsid(pid) and return the result."}
{"text_id": 1110843, "text": "getuid(): Return the current process's user id."}
{"text_id": 1110844, "text": "getuid(): Return the current process's user id."}
{"text_id": 1110845, "text": "getuid(): Return the current process's user id."}
{"text_id": 1110846, "text": "getuid(): Return the current process's user id."}
{"text_id": 1110847, "text": "getuid(): Return the current process's user id."}
{"text_id": 1110848, "text": "getxattr(path, attribute, *, follow_symlinks=True): Return the value of extended attribute attribute on path."}
{"text_id": 1110849, "text": "getxattr(path, attribute, *, follow_symlinks=True): Return the value of extended attribute attribute on path."}
{"text_id": 1110850, "text": "getxattr(path, attribute, *, follow_symlinks=True): Return the value of extended attribute attribute on path."}
{"text_id": 1110851, "text": "getxattr(path, attribute, *, follow_symlinks=True): Return the value of extended attribute attribute on path."}
{"text_id": 1110852, "text": "getxattr(path, attribute, *, follow_symlinks=True): Return the value of extended attribute attribute on path."}
{"text_id": 1110853, "text": "isatty(fd, /): Return True if the fd is connected to a terminal."}
{"text_id": 1110854, "text": "isatty(fd, /): Return True if the fd is connected to a terminal."}
{"text_id": 1110855, "text": "isatty(fd, /): Return True if the fd is connected to a terminal."}
{"text_id": 1110856, "text": "isatty(fd, /): Return True if the fd is connected to a terminal."}
{"text_id": 1110857, "text": "isatty(fd, /): Return True if the fd is connected to a terminal."}
{"text_id": 1110858, "text": "kill(pid, signal, /): Kill a process with a signal."}
{"text_id": 1110859, "text": "kill(pid, signal, /): Kill a process with a signal."}
{"text_id": 1110860, "text": "kill(pid, signal, /): Kill a process with a signal."}
{"text_id": 1110861, "text": "kill(pid, signal, /): Kill a process with a signal."}
{"text_id": 1110862, "text": "kill(pid, signal, /): Kill a process with a signal."}
{"text_id": 1110863, "text": "killpg(pgid, signal, /): Kill a process group with a signal."}
{"text_id": 1110864, "text": "killpg(pgid, signal, /): Kill a process group with a signal."}
{"text_id": 1110865, "text": "killpg(pgid, signal, /): Kill a process group with a signal."}
{"text_id": 1110866, "text": "killpg(pgid, signal, /): Kill a process group with a signal."}
{"text_id": 1110867, "text": "killpg(pgid, signal, /): Kill a process group with a signal."}
{"text_id": 1110868, "text": "lchown(path, uid, gid): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110869, "text": "lchown(path, uid, gid): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110870, "text": "lchown(path, uid, gid): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110871, "text": "lchown(path, uid, gid): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110872, "text": "lchown(path, uid, gid): Change the owner and group id of path to the numeric uid and gid."}
{"text_id": 1110873, "text": "link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True): Create a hard link to a file."}
{"text_id": 1110874, "text": "link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True): Create a hard link to a file."}
{"text_id": 1110875, "text": "link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True): Create a hard link to a file."}
{"text_id": 1110876, "text": "link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True): Create a hard link to a file."}
{"text_id": 1110877, "text": "link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True): Create a hard link to a file."}
{"text_id": 1110878, "text": "listdir(path=None): Return a list containing the names of the files in the directory."}
{"text_id": 1110879, "text": "listdir(path=None): Return a list containing the names of the files in the directory."}
{"text_id": 1110880, "text": "listdir(path=None): Return a list containing the names of the files in the directory."}
{"text_id": 1110881, "text": "listdir(path=None): Return a list containing the names of the files in the directory."}
{"text_id": 1110882, "text": "listdir(path=None): Return a list containing the names of the files in the directory."}
{"text_id": 1110883, "text": "listxattr(path=None, *, follow_symlinks=True): Return a list of extended attributes on path."}
{"text_id": 1110884, "text": "listxattr(path=None, *, follow_symlinks=True): Return a list of extended attributes on path."}
{"text_id": 1110885, "text": "listxattr(path=None, *, follow_symlinks=True): Return a list of extended attributes on path."}
{"text_id": 1110886, "text": "listxattr(path=None, *, follow_symlinks=True): Return a list of extended attributes on path."}
{"text_id": 1110887, "text": "listxattr(path=None, *, follow_symlinks=True): Return a list of extended attributes on path."}
{"text_id": 1110888, "text": "lockf(fd, command, length, /): Apply, test or remove a POSIX lock on an open file descriptor."}
{"text_id": 1110889, "text": "lockf(fd, command, length, /): Apply, test or remove a POSIX lock on an open file descriptor."}
{"text_id": 1110890, "text": "lockf(fd, command, length, /): Apply, test or remove a POSIX lock on an open file descriptor."}
{"text_id": 1110891, "text": "lockf(fd, command, length, /): Apply, test or remove a POSIX lock on an open file descriptor."}
{"text_id": 1110892, "text": "lockf(fd, command, length, /): Apply, test or remove a POSIX lock on an open file descriptor."}
{"text_id": 1110893, "text": "lseek(fd, position, how, /): Set the position of a file descriptor."}
{"text_id": 1110894, "text": "lseek(fd, position, how, /): Set the position of a file descriptor."}
{"text_id": 1110895, "text": "lseek(fd, position, how, /): Set the position of a file descriptor."}
{"text_id": 1110896, "text": "lseek(fd, position, how, /): Set the position of a file descriptor."}
{"text_id": 1110897, "text": "lseek(fd, position, how, /): Set the position of a file descriptor."}
{"text_id": 1110898, "text": "lstat(path, *, dir_fd=None): Perform a stat system call on the given path, without following symbolic links."}
{"text_id": 1110899, "text": "lstat(path, *, dir_fd=None): Perform a stat system call on the given path, without following symbolic links."}
{"text_id": 1110900, "text": "lstat(path, *, dir_fd=None): Perform a stat system call on the given path, without following symbolic links."}
{"text_id": 1110901, "text": "lstat(path, *, dir_fd=None): Perform a stat system call on the given path, without following symbolic links."}
{"text_id": 1110902, "text": "lstat(path, *, dir_fd=None): Perform a stat system call on the given path, without following symbolic links."}
{"text_id": 1110903, "text": "major(device, /): Extracts a device major number from a raw device number."}
{"text_id": 1110904, "text": "major(device, /): Extracts a device major number from a raw device number."}
{"text_id": 1110905, "text": "major(device, /): Extracts a device major number from a raw device number."}
{"text_id": 1110906, "text": "major(device, /): Extracts a device major number from a raw device number."}
{"text_id": 1110907, "text": "major(device, /): Extracts a device major number from a raw device number."}
{"text_id": 1110908, "text": "makedev(major, minor, /): Composes a raw device number from the major and minor device numbers."}
{"text_id": 1110909, "text": "makedev(major, minor, /): Composes a raw device number from the major and minor device numbers."}
{"text_id": 1110910, "text": "makedev(major, minor, /): Composes a raw device number from the major and minor device numbers."}
{"text_id": 1110911, "text": "makedev(major, minor, /): Composes a raw device number from the major and minor device numbers."}
{"text_id": 1110912, "text": "makedev(major, minor, /): Composes a raw device number from the major and minor device numbers."}
{"text_id": 1110913, "text": "makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones."}
{"text_id": 1110914, "text": "makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones."}
{"text_id": 1110915, "text": "makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones."}
{"text_id": 1110916, "text": "makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones."}
{"text_id": 1110917, "text": "makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones."}
{"text_id": 1110918, "text": "minor(device, /): Extracts a device minor number from a raw device number."}
{"text_id": 1110919, "text": "minor(device, /): Extracts a device minor number from a raw device number."}
{"text_id": 1110920, "text": "minor(device, /): Extracts a device minor number from a raw device number."}
{"text_id": 1110921, "text": "minor(device, /): Extracts a device minor number from a raw device number."}
{"text_id": 1110922, "text": "minor(device, /): Extracts a device minor number from a raw device number."}
{"text_id": 1110923, "text": "mkdir(path, mode=511, *, dir_fd=None): Create a directory."}
{"text_id": 1110924, "text": "mkdir(path, mode=511, *, dir_fd=None): Create a directory."}
{"text_id": 1110925, "text": "mkdir(path, mode=511, *, dir_fd=None): Create a directory."}
{"text_id": 1110926, "text": "mkdir(path, mode=511, *, dir_fd=None): Create a directory."}
{"text_id": 1110927, "text": "mkdir(path, mode=511, *, dir_fd=None): Create a directory."}
{"text_id": 1110928, "text": "mkfifo(path, mode=438, *, dir_fd=None): Create a \"fifo\" (a POSIX named pipe)."}
{"text_id": 1110929, "text": "mkfifo(path, mode=438, *, dir_fd=None): Create a \"fifo\" (a POSIX named pipe)."}
{"text_id": 1110930, "text": "mkfifo(path, mode=438, *, dir_fd=None): Create a \"fifo\" (a POSIX named pipe)."}
{"text_id": 1110931, "text": "mkfifo(path, mode=438, *, dir_fd=None): Create a \"fifo\" (a POSIX named pipe)."}
{"text_id": 1110932, "text": "mkfifo(path, mode=438, *, dir_fd=None): Create a \"fifo\" (a POSIX named pipe)."}
{"text_id": 1110933, "text": "mknod(path, mode=384, device=0, *, dir_fd=None): Create a node in the file system."}
{"text_id": 1110934, "text": "mknod(path, mode=384, device=0, *, dir_fd=None): Create a node in the file system."}
{"text_id": 1110935, "text": "mknod(path, mode=384, device=0, *, dir_fd=None): Create a node in the file system."}
{"text_id": 1110936, "text": "mknod(path, mode=384, device=0, *, dir_fd=None): Create a node in the file system."}
{"text_id": 1110937, "text": "mknod(path, mode=384, device=0, *, dir_fd=None): Create a node in the file system."}
{"text_id": 1110938, "text": "nice(increment, /): Add increment to the priority of process and return the new priority."}
{"text_id": 1110939, "text": "nice(increment, /): Add increment to the priority of process and return the new priority."}
{"text_id": 1110940, "text": "nice(increment, /): Add increment to the priority of process and return the new priority."}
{"text_id": 1110941, "text": "nice(increment, /): Add increment to the priority of process and return the new priority."}
{"text_id": 1110942, "text": "nice(increment, /): Add increment to the priority of process and return the new priority."}
{"text_id": 1110943, "text": "openpty(): Open a pseudo-terminal."}
{"text_id": 1110944, "text": "openpty(): Open a pseudo-terminal."}
{"text_id": 1110945, "text": "openpty(): Open a pseudo-terminal."}
{"text_id": 1110946, "text": "openpty(): Open a pseudo-terminal."}
{"text_id": 1110947, "text": "openpty(): Open a pseudo-terminal."}
{"text_id": 1110948, "text": "pathconf(path, name): Return the configuration limit name for the file or directory path."}
{"text_id": 1110949, "text": "pathconf(path, name): Return the configuration limit name for the file or directory path."}
{"text_id": 1110950, "text": "pathconf(path, name): Return the configuration limit name for the file or directory path."}
{"text_id": 1110951, "text": "pathconf(path, name): Return the configuration limit name for the file or directory path."}
{"text_id": 1110952, "text": "pathconf(path, name): Return the configuration limit name for the file or directory path."}
{"text_id": 1110953, "text": "pipe(): Create a pipe."}
{"text_id": 1110954, "text": "pipe(): Create a pipe."}
{"text_id": 1110955, "text": "pipe(): Create a pipe."}
{"text_id": 1110956, "text": "pipe(): Create a pipe."}
{"text_id": 1110957, "text": "pipe(): Create a pipe."}
{"text_id": 1110958, "text": "pipe2(flags, /): Create a pipe with flags set atomically."}
{"text_id": 1110959, "text": "pipe2(flags, /): Create a pipe with flags set atomically."}
{"text_id": 1110960, "text": "pipe2(flags, /): Create a pipe with flags set atomically."}
{"text_id": 1110961, "text": "pipe2(flags, /): Create a pipe with flags set atomically."}
{"text_id": 1110962, "text": "pipe2(flags, /): Create a pipe with flags set atomically."}
{"text_id": 1110963, "text": "posix_fadvise(fd, offset, length, advice, /): Announce an intention to access data in a specific pattern."}
{"text_id": 1110964, "text": "posix_fadvise(fd, offset, length, advice, /): Announce an intention to access data in a specific pattern."}
{"text_id": 1110965, "text": "posix_fadvise(fd, offset, length, advice, /): Announce an intention to access data in a specific pattern."}
{"text_id": 1110966, "text": "posix_fadvise(fd, offset, length, advice, /): Announce an intention to access data in a specific pattern."}
{"text_id": 1110967, "text": "posix_fadvise(fd, offset, length, advice, /): Announce an intention to access data in a specific pattern."}
{"text_id": 1110968, "text": "posix_fallocate(fd, offset, length, /): Ensure a file has allocated at least a particular number of bytes on disk."}
{"text_id": 1110969, "text": "posix_fallocate(fd, offset, length, /): Ensure a file has allocated at least a particular number of bytes on disk."}
{"text_id": 1110970, "text": "posix_fallocate(fd, offset, length, /): Ensure a file has allocated at least a particular number of bytes on disk."}
{"text_id": 1110971, "text": "posix_fallocate(fd, offset, length, /): Ensure a file has allocated at least a particular number of bytes on disk."}
{"text_id": 1110972, "text": "posix_fallocate(fd, offset, length, /): Ensure a file has allocated at least a particular number of bytes on disk."}
{"text_id": 1110973, "text": "pread(fd, length, offset, /): Read a number of bytes from a file descriptor starting at a particular offset."}
{"text_id": 1110974, "text": "pread(fd, length, offset, /): Read a number of bytes from a file descriptor starting at a particular offset."}
{"text_id": 1110975, "text": "pread(fd, length, offset, /): Read a number of bytes from a file descriptor starting at a particular offset."}
{"text_id": 1110976, "text": "pread(fd, length, offset, /): Read a number of bytes from a file descriptor starting at a particular offset."}
{"text_id": 1110977, "text": "pread(fd, length, offset, /): Read a number of bytes from a file descriptor starting at a particular offset."}
{"text_id": 1110978, "text": "preadv(fd, buffers, offset, flags=0, /): Reads from a file descriptor into a number of mutable bytes-like objects."}
{"text_id": 1110979, "text": "preadv(fd, buffers, offset, flags=0, /): Reads from a file descriptor into a number of mutable bytes-like objects."}
{"text_id": 1110980, "text": "preadv(fd, buffers, offset, flags=0, /): Reads from a file descriptor into a number of mutable bytes-like objects."}
{"text_id": 1110981, "text": "preadv(fd, buffers, offset, flags=0, /): Reads from a file descriptor into a number of mutable bytes-like objects."}
{"text_id": 1110982, "text": "preadv(fd, buffers, offset, flags=0, /): Reads from a file descriptor into a number of mutable bytes-like objects."}
{"text_id": 1110983, "text": "putenv(name, value, /): Change or add an environment variable."}
{"text_id": 1110984, "text": "putenv(name, value, /): Change or add an environment variable."}
{"text_id": 1110985, "text": "putenv(name, value, /): Change or add an environment variable."}
{"text_id": 1110986, "text": "putenv(name, value, /): Change or add an environment variable."}
{"text_id": 1110987, "text": "putenv(name, value, /): Change or add an environment variable."}
{"text_id": 1110988, "text": "pwrite(fd, buffer, offset, /): Write bytes to a file descriptor starting at a particular offset."}
{"text_id": 1110989, "text": "pwrite(fd, buffer, offset, /): Write bytes to a file descriptor starting at a particular offset."}
{"text_id": 1110990, "text": "pwrite(fd, buffer, offset, /): Write bytes to a file descriptor starting at a particular offset."}
{"text_id": 1110991, "text": "pwrite(fd, buffer, offset, /): Write bytes to a file descriptor starting at a particular offset."}
{"text_id": 1110992, "text": "pwrite(fd, buffer, offset, /): Write bytes to a file descriptor starting at a particular offset."}
{"text_id": 1110993, "text": "pwritev(fd, buffers, offset, flags=0, /): Writes the contents of bytes-like objects to a file descriptor at a given offset."}
{"text_id": 1110994, "text": "pwritev(fd, buffers, offset, flags=0, /): Writes the contents of bytes-like objects to a file descriptor at a given offset."}
{"text_id": 1110995, "text": "pwritev(fd, buffers, offset, flags=0, /): Writes the contents of bytes-like objects to a file descriptor at a given offset."}
{"text_id": 1110996, "text": "pwritev(fd, buffers, offset, flags=0, /): Writes the contents of bytes-like objects to a file descriptor at a given offset."}
{"text_id": 1110997, "text": "pwritev(fd, buffers, offset, flags=0, /): Writes the contents of bytes-like objects to a file descriptor at a given offset."}
{"text_id": 1110998, "text": "read(fd, length, /): Read from a file descriptor."}
{"text_id": 1110999, "text": "read(fd, length, /): Read from a file descriptor."}
{"text_id": 1111000, "text": "read(fd, length, /): Read from a file descriptor."}
{"text_id": 1111001, "text": "read(fd, length, /): Read from a file descriptor."}
{"text_id": 1111002, "text": "read(fd, length, /): Read from a file descriptor."}
{"text_id": 1111003, "text": "readlink(path, *, dir_fd=None): Return a string representing the path to which the symbolic link points."}
{"text_id": 1111004, "text": "readlink(path, *, dir_fd=None): Return a string representing the path to which the symbolic link points."}
{"text_id": 1111005, "text": "readlink(path, *, dir_fd=None): Return a string representing the path to which the symbolic link points."}
{"text_id": 1111006, "text": "readlink(path, *, dir_fd=None): Return a string representing the path to which the symbolic link points."}
{"text_id": 1111007, "text": "readlink(path, *, dir_fd=None): Return a string representing the path to which the symbolic link points."}
{"text_id": 1111008, "text": "readv(fd, buffers, /): Read from a file descriptor fd into an iterable of buffers."}
{"text_id": 1111009, "text": "readv(fd, buffers, /): Read from a file descriptor fd into an iterable of buffers."}
{"text_id": 1111010, "text": "readv(fd, buffers, /): Read from a file descriptor fd into an iterable of buffers."}
{"text_id": 1111011, "text": "readv(fd, buffers, /): Read from a file descriptor fd into an iterable of buffers."}
{"text_id": 1111012, "text": "readv(fd, buffers, /): Read from a file descriptor fd into an iterable of buffers."}
{"text_id": 1111013, "text": "remove(path, *, dir_fd=None): Remove a file (same as unlink())."}
{"text_id": 1111014, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111015, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111016, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111017, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111018, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111019, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111020, "text": "remove(path, *, dir_fd=None): Remove a file (same as unlink())."}
{"text_id": 1111021, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111022, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111023, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111024, "text": "remove(path, *, dir_fd=None): Remove a file (same as unlink())."}
{"text_id": 1111025, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111026, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111027, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111028, "text": "remove(path, *, dir_fd=None): Remove a file (same as unlink())."}
{"text_id": 1111029, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111030, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111031, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111032, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111033, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111034, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111035, "text": "remove(self, v, /): Remove the first occurrence of v in the array."}
{"text_id": 1111036, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111037, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111038, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111039, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111040, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111041, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111042, "text": "remove(value, /): Remove first occurrence of value."}
{"text_id": 1111043, "text": "remove(path, *, dir_fd=None): Remove a file (same as unlink())."}
{"text_id": 1111044, "text": "removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones."}
{"text_id": 1111045, "text": "removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones."}
{"text_id": 1111046, "text": "removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones."}
{"text_id": 1111047, "text": "removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones."}
{"text_id": 1111048, "text": "removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones."}
{"text_id": 1111049, "text": "removexattr(path, attribute, *, follow_symlinks=True): Remove extended attribute attribute on path."}
{"text_id": 1111050, "text": "removexattr(path, attribute, *, follow_symlinks=True): Remove extended attribute attribute on path."}
{"text_id": 1111051, "text": "removexattr(path, attribute, *, follow_symlinks=True): Remove extended attribute attribute on path."}
{"text_id": 1111052, "text": "removexattr(path, attribute, *, follow_symlinks=True): Remove extended attribute attribute on path."}
{"text_id": 1111053, "text": "removexattr(path, attribute, *, follow_symlinks=True): Remove extended attribute attribute on path."}
{"text_id": 1111054, "text": "rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory."}
{"text_id": 1111055, "text": "rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory."}
{"text_id": 1111056, "text": "rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory."}
{"text_id": 1111057, "text": "rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory."}
{"text_id": 1111058, "text": "rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory."}
{"text_id": 1111059, "text": "renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty."}
{"text_id": 1111060, "text": "renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty."}
{"text_id": 1111061, "text": "renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty."}
{"text_id": 1111062, "text": "renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty."}
{"text_id": 1111063, "text": "renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty."}
{"text_id": 1111064, "text": "rmdir(path, *, dir_fd=None): Remove a directory."}
{"text_id": 1111065, "text": "rmdir(path, *, dir_fd=None): Remove a directory."}
{"text_id": 1111066, "text": "rmdir(path, *, dir_fd=None): Remove a directory."}
{"text_id": 1111067, "text": "rmdir(path, *, dir_fd=None): Remove a directory."}
{"text_id": 1111068, "text": "rmdir(path, *, dir_fd=None): Remove a directory."}
{"text_id": 1111069, "text": "scandir(path=None): Return an iterator of DirEntry objects for given path."}
{"text_id": 1111070, "text": "scandir(path=None): Return an iterator of DirEntry objects for given path."}
{"text_id": 1111071, "text": "scandir(path=None): Return an iterator of DirEntry objects for given path."}
{"text_id": 1111072, "text": "scandir(path=None): Return an iterator of DirEntry objects for given path."}
{"text_id": 1111073, "text": "scandir(path=None): Return an iterator of DirEntry objects for given path."}
{"text_id": 1111074, "text": "sched_get_priority_max(policy): Get the maximum scheduling priority for policy."}
{"text_id": 1111075, "text": "sched_get_priority_max(policy): Get the maximum scheduling priority for policy."}
{"text_id": 1111076, "text": "sched_get_priority_max(policy): Get the maximum scheduling priority for policy."}
{"text_id": 1111077, "text": "sched_get_priority_max(policy): Get the maximum scheduling priority for policy."}
{"text_id": 1111078, "text": "sched_get_priority_max(policy): Get the maximum scheduling priority for policy."}
{"text_id": 1111079, "text": "sched_get_priority_min(policy): Get the minimum scheduling priority for policy."}
{"text_id": 1111080, "text": "sched_get_priority_min(policy): Get the minimum scheduling priority for policy."}
{"text_id": 1111081, "text": "sched_get_priority_min(policy): Get the minimum scheduling priority for policy."}
{"text_id": 1111082, "text": "sched_get_priority_min(policy): Get the minimum scheduling priority for policy."}
{"text_id": 1111083, "text": "sched_get_priority_min(policy): Get the minimum scheduling priority for policy."}
{"text_id": 1111084, "text": "sched_getaffinity(pid, /): Return the affinity of the process identified by pid (or the current process if zero)."}
{"text_id": 1111085, "text": "sched_getaffinity(pid, /): Return the affinity of the process identified by pid (or the current process if zero)."}
{"text_id": 1111086, "text": "sched_getaffinity(pid, /): Return the affinity of the process identified by pid (or the current process if zero)."}
{"text_id": 1111087, "text": "sched_getaffinity(pid, /): Return the affinity of the process identified by pid (or the current process if zero)."}
{"text_id": 1111088, "text": "sched_getaffinity(pid, /): Return the affinity of the process identified by pid (or the current process if zero)."}
{"text_id": 1111089, "text": "sched_getparam(pid, /): Returns scheduling parameters for the process identified by pid."}
{"text_id": 1111090, "text": "sched_getparam(pid, /): Returns scheduling parameters for the process identified by pid."}
{"text_id": 1111091, "text": "sched_getparam(pid, /): Returns scheduling parameters for the process identified by pid."}
{"text_id": 1111092, "text": "sched_getparam(pid, /): Returns scheduling parameters for the process identified by pid."}
{"text_id": 1111093, "text": "sched_getparam(pid, /): Returns scheduling parameters for the process identified by pid."}
{"text_id": 1111094, "text": "sched_getscheduler(pid, /): Get the scheduling policy for the process identifiedy by pid."}
{"text_id": 1111095, "text": "sched_getscheduler(pid, /): Get the scheduling policy for the process identifiedy by pid."}
{"text_id": 1111096, "text": "sched_getscheduler(pid, /): Get the scheduling policy for the process identifiedy by pid."}
{"text_id": 1111097, "text": "sched_getscheduler(pid, /): Get the scheduling policy for the process identifiedy by pid."}
{"text_id": 1111098, "text": "sched_getscheduler(pid, /): Get the scheduling policy for the process identifiedy by pid."}
{"text_id": 1111099, "text": "sched_param(iterable=(), /): Current has only one field: sched_priority\"); sched_priority A scheduling parameter."}
{"text_id": 1111100, "text": "sched_param(iterable=(), /): Current has only one field: sched_priority\"); sched_priority A scheduling parameter."}
{"text_id": 1111101, "text": "sched_param(iterable=(), /): Current has only one field: sched_priority\"); sched_priority A scheduling parameter."}
{"text_id": 1111102, "text": "sched_param(iterable=(), /): Current has only one field: sched_priority\"); sched_priority A scheduling parameter."}
{"text_id": 1111103, "text": "sched_param(iterable=(), /): Current has only one field: sched_priority\"); sched_priority A scheduling parameter."}
{"text_id": 1111104, "text": "sched_rr_get_interval(pid, /): Return the round-robin quantum for the process identified by pid, in seconds."}
{"text_id": 1111105, "text": "sched_rr_get_interval(pid, /): Return the round-robin quantum for the process identified by pid, in seconds."}
{"text_id": 1111106, "text": "sched_rr_get_interval(pid, /): Return the round-robin quantum for the process identified by pid, in seconds."}
{"text_id": 1111107, "text": "sched_rr_get_interval(pid, /): Return the round-robin quantum for the process identified by pid, in seconds."}
{"text_id": 1111108, "text": "sched_rr_get_interval(pid, /): Return the round-robin quantum for the process identified by pid, in seconds."}
{"text_id": 1111109, "text": "sched_setaffinity(pid, mask, /): Set the CPU affinity of the process identified by pid to mask."}
{"text_id": 1111110, "text": "sched_setaffinity(pid, mask, /): Set the CPU affinity of the process identified by pid to mask."}
{"text_id": 1111111, "text": "sched_setaffinity(pid, mask, /): Set the CPU affinity of the process identified by pid to mask."}
{"text_id": 1111112, "text": "sched_setaffinity(pid, mask, /): Set the CPU affinity of the process identified by pid to mask."}
{"text_id": 1111113, "text": "sched_setaffinity(pid, mask, /): Set the CPU affinity of the process identified by pid to mask."}
{"text_id": 1111114, "text": "sched_setparam(pid, param, /): Set scheduling parameters for the process identified by pid."}
{"text_id": 1111115, "text": "sched_setparam(pid, param, /): Set scheduling parameters for the process identified by pid."}
{"text_id": 1111116, "text": "sched_setparam(pid, param, /): Set scheduling parameters for the process identified by pid."}
{"text_id": 1111117, "text": "sched_setparam(pid, param, /): Set scheduling parameters for the process identified by pid."}
{"text_id": 1111118, "text": "sched_setparam(pid, param, /): Set scheduling parameters for the process identified by pid."}
{"text_id": 1111119, "text": "sched_setscheduler(pid, policy, param, /): Set the scheduling policy for the process identified by pid."}
{"text_id": 1111120, "text": "sched_setscheduler(pid, policy, param, /): Set the scheduling policy for the process identified by pid."}
{"text_id": 1111121, "text": "sched_setscheduler(pid, policy, param, /): Set the scheduling policy for the process identified by pid."}
{"text_id": 1111122, "text": "sched_setscheduler(pid, policy, param, /): Set the scheduling policy for the process identified by pid."}
{"text_id": 1111123, "text": "sched_setscheduler(pid, policy, param, /): Set the scheduling policy for the process identified by pid."}
{"text_id": 1111124, "text": "sched_yield(): Voluntarily relinquish the CPU."}
{"text_id": 1111125, "text": "sched_yield(): Voluntarily relinquish the CPU."}
{"text_id": 1111126, "text": "sched_yield(): Voluntarily relinquish the CPU."}
{"text_id": 1111127, "text": "sched_yield(): Voluntarily relinquish the CPU."}
{"text_id": 1111128, "text": "sched_yield(): Voluntarily relinquish the CPU."}
{"text_id": 1111129, "text": "set_blocking(fd, blocking, /): Set the blocking mode of the specified file descriptor."}
{"text_id": 1111130, "text": "set_blocking(fd, blocking, /): Set the blocking mode of the specified file descriptor."}
{"text_id": 1111131, "text": "set_blocking(fd, blocking, /): Set the blocking mode of the specified file descriptor."}
{"text_id": 1111132, "text": "set_blocking(fd, blocking, /): Set the blocking mode of the specified file descriptor."}
{"text_id": 1111133, "text": "set_blocking(fd, blocking, /): Set the blocking mode of the specified file descriptor."}
{"text_id": 1111134, "text": "set_inheritable(fd, inheritable, /): Set the inheritable flag of the specified file descriptor."}
{"text_id": 1111135, "text": "set_inheritable(fd, inheritable, /): Set the inheritable flag of the specified file descriptor."}
{"text_id": 1111136, "text": "set_inheritable(fd, inheritable, /): Set the inheritable flag of the specified file descriptor."}
{"text_id": 1111137, "text": "set_inheritable(fd, inheritable, /): Set the inheritable flag of the specified file descriptor."}
{"text_id": 1111138, "text": "set_inheritable(fd, inheritable, /): Set the inheritable flag of the specified file descriptor."}
{"text_id": 1111139, "text": "setegid(egid, /): Set the current process's effective group id."}
{"text_id": 1111140, "text": "setegid(egid, /): Set the current process's effective group id."}
{"text_id": 1111141, "text": "setegid(egid, /): Set the current process's effective group id."}
{"text_id": 1111142, "text": "setegid(egid, /): Set the current process's effective group id."}
{"text_id": 1111143, "text": "setegid(egid, /): Set the current process's effective group id."}
{"text_id": 1111144, "text": "seteuid(euid, /): Set the current process's effective user id."}
{"text_id": 1111145, "text": "seteuid(euid, /): Set the current process's effective user id."}
{"text_id": 1111146, "text": "seteuid(euid, /): Set the current process's effective user id."}
{"text_id": 1111147, "text": "seteuid(euid, /): Set the current process's effective user id."}
{"text_id": 1111148, "text": "seteuid(euid, /): Set the current process's effective user id."}
{"text_id": 1111149, "text": "setgid(gid, /): Set the current process's group id."}
{"text_id": 1111150, "text": "setgid(gid, /): Set the current process's group id."}
{"text_id": 1111151, "text": "setgid(gid, /): Set the current process's group id."}
{"text_id": 1111152, "text": "setgid(gid, /): Set the current process's group id."}
{"text_id": 1111153, "text": "setgid(gid, /): Set the current process's group id."}
{"text_id": 1111154, "text": "setgroups(groups, /): Set the groups of the current process to list."}
{"text_id": 1111155, "text": "setgroups(groups, /): Set the groups of the current process to list."}
{"text_id": 1111156, "text": "setgroups(groups, /): Set the groups of the current process to list."}
{"text_id": 1111157, "text": "setgroups(groups, /): Set the groups of the current process to list."}
{"text_id": 1111158, "text": "setgroups(groups, /): Set the groups of the current process to list."}
{"text_id": 1111159, "text": "setpgid(pid, pgrp, /): Call the system call setpgid(pid, pgrp)."}
{"text_id": 1111160, "text": "setpgid(pid, pgrp, /): Call the system call setpgid(pid, pgrp)."}
{"text_id": 1111161, "text": "setpgid(pid, pgrp, /): Call the system call setpgid(pid, pgrp)."}
{"text_id": 1111162, "text": "setpgid(pid, pgrp, /): Call the system call setpgid(pid, pgrp)."}
{"text_id": 1111163, "text": "setpgid(pid, pgrp, /): Call the system call setpgid(pid, pgrp)."}
{"text_id": 1111164, "text": "setpgrp(): Make the current process the leader of its process group."}
{"text_id": 1111165, "text": "setpgrp(): Make the current process the leader of its process group."}
{"text_id": 1111166, "text": "setpgrp(): Make the current process the leader of its process group."}
{"text_id": 1111167, "text": "setpgrp(): Make the current process the leader of its process group."}
{"text_id": 1111168, "text": "setpgrp(): Make the current process the leader of its process group."}
{"text_id": 1111169, "text": "setpriority(which, who, priority): Set program scheduling priority."}
{"text_id": 1111170, "text": "setpriority(which, who, priority): Set program scheduling priority."}
{"text_id": 1111171, "text": "setpriority(which, who, priority): Set program scheduling priority."}
{"text_id": 1111172, "text": "setpriority(which, who, priority): Set program scheduling priority."}
{"text_id": 1111173, "text": "setpriority(which, who, priority): Set program scheduling priority."}
{"text_id": 1111174, "text": "setregid(rgid, egid, /): Set the current process's real and effective group ids."}
{"text_id": 1111175, "text": "setregid(rgid, egid, /): Set the current process's real and effective group ids."}
{"text_id": 1111176, "text": "setregid(rgid, egid, /): Set the current process's real and effective group ids."}
{"text_id": 1111177, "text": "setregid(rgid, egid, /): Set the current process's real and effective group ids."}
{"text_id": 1111178, "text": "setregid(rgid, egid, /): Set the current process's real and effective group ids."}
{"text_id": 1111179, "text": "setresgid(rgid, egid, sgid, /): Set the current process's real, effective, and saved group ids."}
{"text_id": 1111180, "text": "setresgid(rgid, egid, sgid, /): Set the current process's real, effective, and saved group ids."}
{"text_id": 1111181, "text": "setresgid(rgid, egid, sgid, /): Set the current process's real, effective, and saved group ids."}
{"text_id": 1111182, "text": "setresgid(rgid, egid, sgid, /): Set the current process's real, effective, and saved group ids."}
{"text_id": 1111183, "text": "setresgid(rgid, egid, sgid, /): Set the current process's real, effective, and saved group ids."}
{"text_id": 1111184, "text": "setresuid(ruid, euid, suid, /): Set the current process's real, effective, and saved user ids."}
{"text_id": 1111185, "text": "setresuid(ruid, euid, suid, /): Set the current process's real, effective, and saved user ids."}
{"text_id": 1111186, "text": "setresuid(ruid, euid, suid, /): Set the current process's real, effective, and saved user ids."}
{"text_id": 1111187, "text": "setresuid(ruid, euid, suid, /): Set the current process's real, effective, and saved user ids."}
{"text_id": 1111188, "text": "setresuid(ruid, euid, suid, /): Set the current process's real, effective, and saved user ids."}
{"text_id": 1111189, "text": "setreuid(ruid, euid, /): Set the current process's real and effective user ids."}
{"text_id": 1111190, "text": "setreuid(ruid, euid, /): Set the current process's real and effective user ids."}
{"text_id": 1111191, "text": "setreuid(ruid, euid, /): Set the current process's real and effective user ids."}
{"text_id": 1111192, "text": "setreuid(ruid, euid, /): Set the current process's real and effective user ids."}
{"text_id": 1111193, "text": "setreuid(ruid, euid, /): Set the current process's real and effective user ids."}
{"text_id": 1111194, "text": "setsid(): Call the system call setsid()."}
{"text_id": 1111195, "text": "setsid(): Call the system call setsid()."}
{"text_id": 1111196, "text": "setsid(): Call the system call setsid()."}
{"text_id": 1111197, "text": "setsid(): Call the system call setsid()."}
{"text_id": 1111198, "text": "setsid(): Call the system call setsid()."}
{"text_id": 1111199, "text": "setuid(uid, /): Set the current process's user id."}
{"text_id": 1111200, "text": "setuid(uid, /): Set the current process's user id."}
{"text_id": 1111201, "text": "setuid(uid, /): Set the current process's user id."}
{"text_id": 1111202, "text": "setuid(uid, /): Set the current process's user id."}
{"text_id": 1111203, "text": "setuid(uid, /): Set the current process's user id."}
{"text_id": 1111204, "text": "setxattr(path, attribute, value, flags=0, *, follow_symlinks=True): Set extended attribute attribute on path to value."}
{"text_id": 1111205, "text": "setxattr(path, attribute, value, flags=0, *, follow_symlinks=True): Set extended attribute attribute on path to value."}
{"text_id": 1111206, "text": "setxattr(path, attribute, value, flags=0, *, follow_symlinks=True): Set extended attribute attribute on path to value."}
{"text_id": 1111207, "text": "setxattr(path, attribute, value, flags=0, *, follow_symlinks=True): Set extended attribute attribute on path to value."}
{"text_id": 1111208, "text": "setxattr(path, attribute, value, flags=0, *, follow_symlinks=True): Set extended attribute attribute on path to value."}
{"text_id": 1111209, "text": "spawnl(mode, file, *args): spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111210, "text": "spawnl(mode, file, *args): spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111211, "text": "spawnl(mode, file, *args): spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111212, "text": "spawnl(mode, file, *args): spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111213, "text": "spawnl(mode, file, *args): spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111214, "text": "spawnle(mode, file, *args): spawnle(mode, file, *args, env) -> integer Execute file with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111215, "text": "spawnle(mode, file, *args): spawnle(mode, file, *args, env) -> integer Execute file with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111216, "text": "spawnle(mode, file, *args): spawnle(mode, file, *args, env) -> integer Execute file with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111217, "text": "spawnle(mode, file, *args): spawnle(mode, file, *args, env) -> integer Execute file with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111218, "text": "spawnle(mode, file, *args): spawnle(mode, file, *args, env) -> integer Execute file with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111219, "text": "spawnlp(mode, file, *args): spawnlp(mode, file, *args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111220, "text": "spawnlp(mode, file, *args): spawnlp(mode, file, *args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111221, "text": "spawnlp(mode, file, *args): spawnlp(mode, file, *args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111222, "text": "spawnlp(mode, file, *args): spawnlp(mode, file, *args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111223, "text": "spawnlp(mode, file, *args): spawnlp(mode, file, *args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111224, "text": "spawnlpe(mode, file, *args): spawnlpe(mode, file, *args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111225, "text": "spawnlpe(mode, file, *args): spawnlpe(mode, file, *args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111226, "text": "spawnlpe(mode, file, *args): spawnlpe(mode, file, *args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111227, "text": "spawnlpe(mode, file, *args): spawnlpe(mode, file, *args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111228, "text": "spawnlpe(mode, file, *args): spawnlpe(mode, file, *args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111229, "text": "spawnv(mode, file, args): spawnv(mode, file, args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111230, "text": "spawnv(mode, file, args): spawnv(mode, file, args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111231, "text": "spawnv(mode, file, args): spawnv(mode, file, args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111232, "text": "spawnv(mode, file, args): spawnv(mode, file, args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111233, "text": "spawnv(mode, file, args): spawnv(mode, file, args) -> integer Execute file with arguments from args in a subprocess."}
{"text_id": 1111234, "text": "spawnve(mode, file, args, env): spawnve(mode, file, args, env) -> integer Execute file with arguments from args in a subprocess with the specified environment."}
{"text_id": 1111235, "text": "spawnve(mode, file, args, env): spawnve(mode, file, args, env) -> integer Execute file with arguments from args in a subprocess with the specified environment."}
{"text_id": 1111236, "text": "spawnve(mode, file, args, env): spawnve(mode, file, args, env) -> integer Execute file with arguments from args in a subprocess with the specified environment."}
{"text_id": 1111237, "text": "spawnve(mode, file, args, env): spawnve(mode, file, args, env) -> integer Execute file with arguments from args in a subprocess with the specified environment."}
{"text_id": 1111238, "text": "spawnve(mode, file, args, env): spawnve(mode, file, args, env) -> integer Execute file with arguments from args in a subprocess with the specified environment."}
{"text_id": 1111239, "text": "spawnvp(mode, file, args): spawnvp(mode, file, args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess."}
{"text_id": 1111240, "text": "spawnvp(mode, file, args): spawnvp(mode, file, args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess."}
{"text_id": 1111241, "text": "spawnvp(mode, file, args): spawnvp(mode, file, args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess."}
{"text_id": 1111242, "text": "spawnvp(mode, file, args): spawnvp(mode, file, args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess."}
{"text_id": 1111243, "text": "spawnvp(mode, file, args): spawnvp(mode, file, args) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess."}
{"text_id": 1111244, "text": "spawnvpe(mode, file, args, env): spawnvpe(mode, file, args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111245, "text": "spawnvpe(mode, file, args, env): spawnvpe(mode, file, args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111246, "text": "spawnvpe(mode, file, args, env): spawnvpe(mode, file, args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111247, "text": "spawnvpe(mode, file, args, env): spawnvpe(mode, file, args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111248, "text": "spawnvpe(mode, file, args, env): spawnvpe(mode, file, args, env) -> integer Execute file (which is looked for along $PATH) with arguments from args in a subprocess with the supplied environment."}
{"text_id": 1111249, "text": "stat(path, *, dir_fd=None, follow_symlinks=True): Perform a stat system call on the given path."}
{"text_id": 1111250, "text": "stat(path, *, dir_fd=None, follow_symlinks=True): Perform a stat system call on the given path."}
{"text_id": 1111251, "text": "stat(path, *, dir_fd=None, follow_symlinks=True): Perform a stat system call on the given path."}
{"text_id": 1111252, "text": "stat(path, *, dir_fd=None, follow_symlinks=True): Perform a stat system call on the given path."}
{"text_id": 1111253, "text": "stat(path, *, dir_fd=None, follow_symlinks=True): Perform a stat system call on the given path."}
{"text_id": 1111254, "text": "stat_result(iterable=(), /): stat_result: Result from stat, fstat, or lstat."}
{"text_id": 1111255, "text": "stat_result(iterable=(), /): stat_result: Result from stat, fstat, or lstat."}
{"text_id": 1111256, "text": "stat_result(iterable=(), /): stat_result: Result from stat, fstat, or lstat."}
{"text_id": 1111257, "text": "stat_result(iterable=(), /): stat_result: Result from stat, fstat, or lstat."}
{"text_id": 1111258, "text": "stat_result(iterable=(), /): stat_result: Result from stat, fstat, or lstat."}
{"text_id": 1111259, "text": "statvfs(path): Perform a statvfs system call on the given path."}
{"text_id": 1111260, "text": "statvfs(path): Perform a statvfs system call on the given path."}
{"text_id": 1111261, "text": "statvfs(path): Perform a statvfs system call on the given path."}
{"text_id": 1111262, "text": "statvfs(path): Perform a statvfs system call on the given path."}
{"text_id": 1111263, "text": "statvfs(path): Perform a statvfs system call on the given path."}
{"text_id": 1111264, "text": "statvfs_result(iterable=(), /): statvfs_result: Result from statvfs or fstatvfs."}
{"text_id": 1111265, "text": "statvfs_result(iterable=(), /): statvfs_result: Result from statvfs or fstatvfs."}
{"text_id": 1111266, "text": "statvfs_result(iterable=(), /): statvfs_result: Result from statvfs or fstatvfs."}
{"text_id": 1111267, "text": "statvfs_result(iterable=(), /): statvfs_result: Result from statvfs or fstatvfs."}
{"text_id": 1111268, "text": "statvfs_result(iterable=(), /): statvfs_result: Result from statvfs or fstatvfs."}
{"text_id": 1111269, "text": "strerror(code, /): Translate an error code to a message string."}
{"text_id": 1111270, "text": "strerror(code, /): Translate an error code to a message string."}
{"text_id": 1111271, "text": "strerror(code, /): Translate an error code to a message string."}
{"text_id": 1111272, "text": "strerror(code, /): Translate an error code to a message string."}
{"text_id": 1111273, "text": "strerror(code, /): Translate an error code to a message string."}
{"text_id": 1111274, "text": "symlink(src, dst, target_is_directory=False, *, dir_fd=None): Create a symbolic link pointing to src named dst."}
{"text_id": 1111275, "text": "symlink(src, dst, target_is_directory=False, *, dir_fd=None): Create a symbolic link pointing to src named dst."}
{"text_id": 1111276, "text": "symlink(src, dst, target_is_directory=False, *, dir_fd=None): Create a symbolic link pointing to src named dst."}
{"text_id": 1111277, "text": "symlink(src, dst, target_is_directory=False, *, dir_fd=None): Create a symbolic link pointing to src named dst."}
{"text_id": 1111278, "text": "symlink(src, dst, target_is_directory=False, *, dir_fd=None): Create a symbolic link pointing to src named dst."}
{"text_id": 1111279, "text": "sync(): Force write of everything to disk."}
{"text_id": 1111280, "text": "sync(): Force write of everything to disk."}
{"text_id": 1111281, "text": "sync(): Force write of everything to disk."}
{"text_id": 1111282, "text": "sync(): Force write of everything to disk."}
{"text_id": 1111283, "text": "sync(): Force write of everything to disk."}
{"text_id": 1111284, "text": "sysconf(name, /): Return an integer-valued system configuration variable."}
{"text_id": 1111285, "text": "sysconf(name, /): Return an integer-valued system configuration variable."}
{"text_id": 1111286, "text": "sysconf(name, /): Return an integer-valued system configuration variable."}
{"text_id": 1111287, "text": "sysconf(name, /): Return an integer-valued system configuration variable."}
{"text_id": 1111288, "text": "sysconf(name, /): Return an integer-valued system configuration variable."}
{"text_id": 1111289, "text": "system(command): Execute the command in a subshell."}
{"text_id": 1111290, "text": "system(command): Execute the command in a subshell."}
{"text_id": 1111291, "text": "system(command): Execute the command in a subshell."}
{"text_id": 1111292, "text": "system(command): Execute the command in a subshell."}
{"text_id": 1111293, "text": "system(command): Execute the command in a subshell."}
{"text_id": 1111294, "text": "tcgetpgrp(fd, /): Return the process group associated with the terminal specified by fd."}
{"text_id": 1111295, "text": "tcgetpgrp(fd, /): Return the process group associated with the terminal specified by fd."}
{"text_id": 1111296, "text": "tcgetpgrp(fd, /): Return the process group associated with the terminal specified by fd."}
{"text_id": 1111297, "text": "tcgetpgrp(fd, /): Return the process group associated with the terminal specified by fd."}
{"text_id": 1111298, "text": "tcgetpgrp(fd, /): Return the process group associated with the terminal specified by fd."}
{"text_id": 1111299, "text": "tcsetpgrp(fd, pgid, /): Set the process group associated with the terminal specified by fd."}
{"text_id": 1111300, "text": "tcsetpgrp(fd, pgid, /): Set the process group associated with the terminal specified by fd."}
{"text_id": 1111301, "text": "tcsetpgrp(fd, pgid, /): Set the process group associated with the terminal specified by fd."}
{"text_id": 1111302, "text": "tcsetpgrp(fd, pgid, /): Set the process group associated with the terminal specified by fd."}
{"text_id": 1111303, "text": "tcsetpgrp(fd, pgid, /): Set the process group associated with the terminal specified by fd."}
{"text_id": 1111304, "text": "terminal_size(iterable=(), /): A tuple of (columns, lines) for holding terminal window size."}
{"text_id": 1111305, "text": "terminal_size(iterable=(), /): A tuple of (columns, lines) for holding terminal window size."}
{"text_id": 1111306, "text": "terminal_size(iterable=(), /): A tuple of (columns, lines) for holding terminal window size."}
{"text_id": 1111307, "text": "terminal_size(iterable=(), /): A tuple of (columns, lines) for holding terminal window size."}
{"text_id": 1111308, "text": "terminal_size(iterable=(), /): A tuple of (columns, lines) for holding terminal window size."}
{"text_id": 1111309, "text": "times(): Return a collection containing process timing information."}
{"text_id": 1111310, "text": "times(): Return a collection containing process timing information."}
{"text_id": 1111311, "text": "times(): Return a collection containing process timing information."}
{"text_id": 1111312, "text": "times(): Return a collection containing process timing information."}
{"text_id": 1111313, "text": "times(): Return a collection containing process timing information."}
{"text_id": 1111314, "text": "times_result(iterable=(), /): times_result: Result from os."}
{"text_id": 1111315, "text": "times_result(iterable=(), /): times_result: Result from os."}
{"text_id": 1111316, "text": "times_result(iterable=(), /): times_result: Result from os."}
{"text_id": 1111317, "text": "times_result(iterable=(), /): times_result: Result from os."}
{"text_id": 1111318, "text": "times_result(iterable=(), /): times_result: Result from os."}
{"text_id": 1111319, "text": "truncate(path, length): Truncate a file, specified by path, to a specific length."}
{"text_id": 1111320, "text": "truncate(path, length): Truncate a file, specified by path, to a specific length."}
{"text_id": 1111321, "text": "truncate(path, length): Truncate a file, specified by path, to a specific length."}
{"text_id": 1111322, "text": "truncate(path, length): Truncate a file, specified by path, to a specific length."}
{"text_id": 1111323, "text": "truncate(path, length): Truncate a file, specified by path, to a specific length."}
{"text_id": 1111324, "text": "ttyname(fd, /): Return the name of the terminal device connected to 'fd'."}
{"text_id": 1111325, "text": "ttyname(fd, /): Return the name of the terminal device connected to 'fd'."}
{"text_id": 1111326, "text": "ttyname(fd, /): Return the name of the terminal device connected to 'fd'."}
{"text_id": 1111327, "text": "ttyname(fd, /): Return the name of the terminal device connected to 'fd'."}
{"text_id": 1111328, "text": "ttyname(fd, /): Return the name of the terminal device connected to 'fd'."}
{"text_id": 1111329, "text": "umask(mask, /): Set the current numeric umask and return the previous umask."}
{"text_id": 1111330, "text": "umask(mask, /): Set the current numeric umask and return the previous umask."}
{"text_id": 1111331, "text": "umask(mask, /): Set the current numeric umask and return the previous umask."}
{"text_id": 1111332, "text": "umask(mask, /): Set the current numeric umask and return the previous umask."}
{"text_id": 1111333, "text": "umask(mask, /): Set the current numeric umask and return the previous umask."}
{"text_id": 1111334, "text": "uname(): Return an object identifying the current operating system."}
{"text_id": 1111335, "text": "uname(): Return an object identifying the current operating system."}
{"text_id": 1111336, "text": "uname(): Return an object identifying the current operating system."}
{"text_id": 1111337, "text": "uname(): Return an object identifying the current operating system."}
{"text_id": 1111338, "text": "uname(): Return an object identifying the current operating system."}
{"text_id": 1111339, "text": "uname_result(iterable=(), /): uname_result: Result from os."}
{"text_id": 1111340, "text": "uname_result(iterable=(), /): uname_result: Result from os."}
{"text_id": 1111341, "text": "uname_result(iterable=(), /): uname_result: Result from os."}
{"text_id": 1111342, "text": "uname_result(iterable=(), /): uname_result: Result from os."}
{"text_id": 1111343, "text": "uname_result(iterable=(), /): uname_result: Result from os."}
{"text_id": 1111344, "text": "unlink(path, *, dir_fd=None): Remove a file (same as remove())."}
{"text_id": 1111345, "text": "unlink(path, *, dir_fd=None): Remove a file (same as remove())."}
{"text_id": 1111346, "text": "unlink(path, *, dir_fd=None): Remove a file (same as remove())."}
{"text_id": 1111347, "text": "unlink(path, *, dir_fd=None): Remove a file (same as remove())."}
{"text_id": 1111348, "text": "unlink(path, *, dir_fd=None): Remove a file (same as remove())."}
{"text_id": 1111349, "text": "unsetenv(name, /): Delete an environment variable."}
{"text_id": 1111350, "text": "unsetenv(name, /): Delete an environment variable."}
{"text_id": 1111351, "text": "unsetenv(name, /): Delete an environment variable."}
{"text_id": 1111352, "text": "unsetenv(name, /): Delete an environment variable."}
{"text_id": 1111353, "text": "unsetenv(name, /): Delete an environment variable."}
{"text_id": 1111354, "text": "urandom(size, /): Return a bytes object containing random bytes suitable for cryptographic use."}
{"text_id": 1111355, "text": "urandom(size, /): Return a bytes object containing random bytes suitable for cryptographic use."}
{"text_id": 1111356, "text": "urandom(size, /): Return a bytes object containing random bytes suitable for cryptographic use."}
{"text_id": 1111357, "text": "urandom(size, /): Return a bytes object containing random bytes suitable for cryptographic use."}
{"text_id": 1111358, "text": "urandom(size, /): Return a bytes object containing random bytes suitable for cryptographic use."}
{"text_id": 1111359, "text": "wait(): Wait for completion of a child process."}
{"text_id": 1111360, "text": "wait(): Wait for completion of a child process."}
{"text_id": 1111361, "text": "wait(): Wait for completion of a child process."}
{"text_id": 1111362, "text": "wait(): Wait for completion of a child process."}
{"text_id": 1111363, "text": "wait(): Wait for completion of a child process."}
{"text_id": 1111364, "text": "wait3(options): Wait for completion of a child process."}
{"text_id": 1111365, "text": "wait3(options): Wait for completion of a child process."}
{"text_id": 1111366, "text": "wait3(options): Wait for completion of a child process."}
{"text_id": 1111367, "text": "wait3(options): Wait for completion of a child process."}
{"text_id": 1111368, "text": "wait3(options): Wait for completion of a child process."}
{"text_id": 1111369, "text": "wait4(pid, options): Wait for completion of a specific child process."}
{"text_id": 1111370, "text": "wait4(pid, options): Wait for completion of a specific child process."}
{"text_id": 1111371, "text": "wait4(pid, options): Wait for completion of a specific child process."}
{"text_id": 1111372, "text": "wait4(pid, options): Wait for completion of a specific child process."}
{"text_id": 1111373, "text": "wait4(pid, options): Wait for completion of a specific child process."}
{"text_id": 1111374, "text": "waitid(idtype, id, options, /): Returns the result of waiting for a process or processes."}
{"text_id": 1111375, "text": "waitid(idtype, id, options, /): Returns the result of waiting for a process or processes."}
{"text_id": 1111376, "text": "waitid(idtype, id, options, /): Returns the result of waiting for a process or processes."}
{"text_id": 1111377, "text": "waitid(idtype, id, options, /): Returns the result of waiting for a process or processes."}
{"text_id": 1111378, "text": "waitid(idtype, id, options, /): Returns the result of waiting for a process or processes."}
{"text_id": 1111379, "text": "waitid_result(iterable=(), /): waitid_result: Result from waitid."}
{"text_id": 1111380, "text": "waitid_result(iterable=(), /): waitid_result: Result from waitid."}
{"text_id": 1111381, "text": "waitid_result(iterable=(), /): waitid_result: Result from waitid."}
{"text_id": 1111382, "text": "waitid_result(iterable=(), /): waitid_result: Result from waitid."}
{"text_id": 1111383, "text": "waitid_result(iterable=(), /): waitid_result: Result from waitid."}
{"text_id": 1111384, "text": "waitpid(pid, options, /): Wait for completion of a given child process."}
{"text_id": 1111385, "text": "waitpid(pid, options, /): Wait for completion of a given child process."}
{"text_id": 1111386, "text": "waitpid(pid, options, /): Wait for completion of a given child process."}
{"text_id": 1111387, "text": "waitpid(pid, options, /): Wait for completion of a given child process."}
{"text_id": 1111388, "text": "waitpid(pid, options, /): Wait for completion of a given child process."}
{"text_id": 1111389, "text": "walk(top, topdown=True, onerror=None, followlinks=False): Directory tree generator."}
{"text_id": 1111390, "text": "walk(top, topdown=True, onerror=None, followlinks=False): Directory tree generator."}
{"text_id": 1111391, "text": "walk(top, topdown=True, onerror=None, followlinks=False): Directory tree generator."}
{"text_id": 1111392, "text": "walk(top, topdown=True, onerror=None, followlinks=False): Directory tree generator."}
{"text_id": 1111393, "text": "walk(top, topdown=True, onerror=None, followlinks=False): Directory tree generator."}
{"text_id": 1111394, "text": "write(fd, data, /): Write a bytes object to a file descriptor."}
{"text_id": 1111395, "text": "write(fd, data, /): Write a bytes object to a file descriptor."}
{"text_id": 1111396, "text": "write(fd, data, /): Write a bytes object to a file descriptor."}
{"text_id": 1111397, "text": "write(fd, data, /): Write a bytes object to a file descriptor."}
{"text_id": 1111398, "text": "write(fd, data, /): Write a bytes object to a file descriptor."}
{"text_id": 1111399, "text": "writev(fd, buffers, /): Iterate over buffers, and write the contents of each to a file descriptor."}
{"text_id": 1111400, "text": "writev(fd, buffers, /): Iterate over buffers, and write the contents of each to a file descriptor."}
{"text_id": 1111401, "text": "writev(fd, buffers, /): Iterate over buffers, and write the contents of each to a file descriptor."}
{"text_id": 1111402, "text": "writev(fd, buffers, /): Iterate over buffers, and write the contents of each to a file descriptor."}
{"text_id": 1111403, "text": "writev(fd, buffers, /): Iterate over buffers, and write the contents of each to a file descriptor."}
{"text_id": 1111404, "text": "deriv(self, m=1): Return a derivative of this polynomial."}
{"text_id": 1111405, "text": "deriv(self, m=1): Return a derivative of this polynomial."}
{"text_id": 1111406, "text": "deriv(self, m=1): Return a derivative of this polynomial."}
{"text_id": 1111407, "text": "deriv(self, m=1): Return a derivative of this polynomial."}
{"text_id": 1111408, "text": "deriv(self, m=1): Return a derivative of this polynomial."}
{"text_id": 1111409, "text": "integ(self, m=1, k=0): Return an antiderivative (indefinite integral) of this polynomial."}
{"text_id": 1111410, "text": "integ(self, m=1, k=0): Return an antiderivative (indefinite integral) of this polynomial."}
{"text_id": 1111411, "text": "integ(self, m=1, k=0): Return an antiderivative (indefinite integral) of this polynomial."}
{"text_id": 1111412, "text": "integ(self, m=1, k=0): Return an antiderivative (indefinite integral) of this polynomial."}
{"text_id": 1111413, "text": "integ(self, m=1, k=0): Return an antiderivative (indefinite integral) of this polynomial."}
{"text_id": 1111414, "text": "Chebyshev(coef, domain=None, window=None): A Chebyshev series class."}
{"text_id": 1111415, "text": "Chebyshev(coef, domain=None, window=None): A Chebyshev series class."}
{"text_id": 1111416, "text": "Chebyshev(coef, domain=None, window=None): A Chebyshev series class."}
{"text_id": 1111417, "text": "Chebyshev(coef, domain=None, window=None): A Chebyshev series class."}
{"text_id": 1111418, "text": "Chebyshev(coef, domain=None, window=None): A Chebyshev series class."}
{"text_id": 1111419, "text": "Hermite(coef, domain=None, window=None): An Hermite series class."}
{"text_id": 1111420, "text": "Hermite(coef, domain=None, window=None): An Hermite series class."}
{"text_id": 1111421, "text": "Hermite(coef, domain=None, window=None): An Hermite series class."}
{"text_id": 1111422, "text": "Hermite(coef, domain=None, window=None): An Hermite series class."}
{"text_id": 1111423, "text": "Hermite(coef, domain=None, window=None): An Hermite series class."}
{"text_id": 1111424, "text": "HermiteE(coef, domain=None, window=None): An HermiteE series class."}
{"text_id": 1111425, "text": "HermiteE(coef, domain=None, window=None): An HermiteE series class."}
{"text_id": 1111426, "text": "HermiteE(coef, domain=None, window=None): An HermiteE series class."}
{"text_id": 1111427, "text": "HermiteE(coef, domain=None, window=None): An HermiteE series class."}
{"text_id": 1111428, "text": "HermiteE(coef, domain=None, window=None): An HermiteE series class."}
{"text_id": 1111429, "text": "Laguerre(coef, domain=None, window=None): A Laguerre series class."}
{"text_id": 1111430, "text": "Laguerre(coef, domain=None, window=None): A Laguerre series class."}
{"text_id": 1111431, "text": "Laguerre(coef, domain=None, window=None): A Laguerre series class."}
{"text_id": 1111432, "text": "Laguerre(coef, domain=None, window=None): A Laguerre series class."}
{"text_id": 1111433, "text": "Laguerre(coef, domain=None, window=None): A Laguerre series class."}
{"text_id": 1111434, "text": "Legendre(coef, domain=None, window=None): A Legendre series class."}
{"text_id": 1111435, "text": "Legendre(coef, domain=None, window=None): A Legendre series class."}
{"text_id": 1111436, "text": "Legendre(coef, domain=None, window=None): A Legendre series class."}
{"text_id": 1111437, "text": "Legendre(coef, domain=None, window=None): A Legendre series class."}
{"text_id": 1111438, "text": "Legendre(coef, domain=None, window=None): A Legendre series class."}
{"text_id": 1111439, "text": "Polynomial(coef, domain=None, window=None): A power series class."}
{"text_id": 1111440, "text": "Polynomial(coef, domain=None, window=None): A power series class."}
{"text_id": 1111441, "text": "Polynomial(coef, domain=None, window=None): A power series class."}
{"text_id": 1111442, "text": "Polynomial(coef, domain=None, window=None): A power series class."}
{"text_id": 1111443, "text": "Polynomial(coef, domain=None, window=None): A power series class."}
{"text_id": 1111444, "text": "set_default_printstyle(style): Set the default format for the string representation of polynomials."}
{"text_id": 1111445, "text": "set_default_printstyle(style): Set the default format for the string representation of polynomials."}
{"text_id": 1111446, "text": "set_default_printstyle(style): Set the default format for the string representation of polynomials."}
{"text_id": 1111447, "text": "set_default_printstyle(style): Set the default format for the string representation of polynomials."}
{"text_id": 1111448, "text": "set_default_printstyle(style): Set the default format for the string representation of polynomials."}
{"text_id": 1111449, "text": "beta(a, b, size=None, dtype=None, ctx=None): Draw samples from a Beta distribution."}
{"text_id": 1111450, "text": "chisquare(df, size=None, dtype=None, ctx=None): chisquare(df, size=None, dtype=None, ctx=None) Draw samples from a chi-square distribution."}
{"text_id": 1111451, "text": "choice(a, size=None, replace=True, p=None, ctx=None, out=None): Generates a random sample from a given 1-D array."}
{"text_id": 1111452, "text": "exponential(scale=1.0, size=None, ctx=None, out=None): Draw samples from an exponential distribution."}
{"text_id": 1111453, "text": "gumbel(loc=0.0, scale=1.0, size=None, ctx=None, out=None): Draw samples from a Gumbel distribution."}
{"text_id": 1111454, "text": "logistic(loc=0.0, scale=1.0, size=None, ctx=None, out=None): Draw samples from a logistic distribution."}
{"text_id": 1111455, "text": "lognormal(mean=0.0, sigma=1.0, size=None, dtype=None, ctx=None, out=None): Draw samples from a log-normal distribution."}
{"text_id": 1111456, "text": "multinomial(n, pvals, size=None, **kwargs): Draw samples from a multinomial distribution."}
{"text_id": 1111457, "text": "multivariate_normal(mean, cov, size=None, check_valid=None, tol=None): multivariate_normal(mean, cov, size=None, check_valid=None, tol=None) Draw random samples from a multivariate normal distribution."}
{"text_id": 1111458, "text": "normal(loc=0.0, scale=1.0, size=None, dtype=None, ctx=None, out=None): Draw random samples from a normal (Gaussian) distribution."}
{"text_id": 1111459, "text": "pareto(a, size=None, ctx=None, out=None): Draw samples from a Pareto II or Lomax distribution with specified shape a."}
{"text_id": 1111460, "text": "rand(*size, **kwargs): Random values in a given shape."}
{"text_id": 1111461, "text": "randint(low, high=None, size=None, dtype=None, ctx=None, out=None): Return random integers from `low` (inclusive) to `high` (exclusive)."}
{"text_id": 1111462, "text": "randn(*size, **kwargs): Return a sample (or samples) from the \"standard normal\" distribution."}
{"text_id": 1111463, "text": "rayleigh(scale=1.0, size=None, ctx=None, out=None): Draw samples from a Rayleigh distribution."}
{"text_id": 1111464, "text": "shuffle(x): Modify a sequence in-place by shuffling its contents."}
{"text_id": 1111465, "text": "uniform(low=0.0, high=1.0, size=None, dtype=None, ctx=None, out=None): Draw samples from a uniform distribution."}
{"text_id": 1111466, "text": "weibull(a, size=None, ctx=None, out=None): Draw samples from a 1-parameter Weibull distribution with given parameter a via inversion."}
{"text_id": 1111467, "text": "Counter(iterable=None, /, **kwds): Dict subclass for counting hashable items."}
{"text_id": 1111468, "text": "Counter(iterable=None, /, **kwds): Dict subclass for counting hashable items."}
{"text_id": 1111469, "text": "Counter(iterable=None, /, **kwds): Dict subclass for counting hashable items."}
{"text_id": 1111470, "text": "Counter(iterable=None, /, **kwds): Dict subclass for counting hashable items."}
{"text_id": 1111471, "text": "Counter(iterable=None, /, **kwds): Dict subclass for counting hashable items."}
{"text_id": 1111472, "text": "find_duplicate(list): Find duplication in a list, return a list of duplicated elements."}
{"text_id": 1111473, "text": "find_duplicate(list): Find duplication in a list, return a list of duplicated elements."}
{"text_id": 1111474, "text": "find_duplicate(list): Find duplication in a list, return a list of duplicated elements."}
{"text_id": 1111475, "text": "find_duplicate(list): Find duplication in a list, return a list of duplicated elements."}
{"text_id": 1111476, "text": "find_duplicate(list): Find duplication in a list, return a list of duplicated elements."}
{"text_id": 1111477, "text": "fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays."}
{"text_id": 1111478, "text": "fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays."}
{"text_id": 1111479, "text": "fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays."}
{"text_id": 1111480, "text": "fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays."}
{"text_id": 1111481, "text": "fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays."}
{"text_id": 1111482, "text": "fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a recarray from a list of records in text form."}
{"text_id": 1111483, "text": "fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a recarray from a list of records in text form."}
{"text_id": 1111484, "text": "fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a recarray from a list of records in text form."}
{"text_id": 1111485, "text": "fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a recarray from a list of records in text form."}
{"text_id": 1111486, "text": "fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a recarray from a list of records in text form."}
{"text_id": 1111487, "text": "nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1111488, "text": "nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1111489, "text": "nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1111490, "text": "nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1111491, "text": "nullcontext(enter_result=None): Context manager that does no additional processing."}
{"text_id": 1111492, "text": "pprint(self): Pretty-print all fields."}
{"text_id": 1111493, "text": "pprint(self): Pretty-print all fields."}
{"text_id": 1111494, "text": "pprint(self): Pretty-print all fields."}
{"text_id": 1111495, "text": "pprint(self): Pretty-print all fields."}
{"text_id": 1111496, "text": "pprint(self): Pretty-print all fields."}
{"text_id": 1111497, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111498, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111499, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111500, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111501, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111502, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111503, "text": "show_config(): Show libraries in the system on which NumPy was built."}
{"text_id": 1111504, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111505, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111506, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111507, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111508, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111509, "text": "addaudithook(hook): Adds a new audit hook callback."}
{"text_id": 1111510, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111511, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111512, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111513, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111514, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111515, "text": "call_tracing(func, args, /): Call func(*args), while tracing is enabled."}
{"text_id": 1111516, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111517, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111518, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111519, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111520, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111521, "text": "callstats(): Return a tuple of function call statistics."}
{"text_id": 1111522, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111523, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111524, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111525, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111526, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111527, "text": "displayhook(object, /): Print an object to sys."}
{"text_id": 1111528, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111529, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111530, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111531, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111532, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111533, "text": "exc_info(): Return current exception information: (type, value, traceback)."}
{"text_id": 1111534, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111535, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111536, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111537, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111538, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111539, "text": "excepthook(exctype, value, traceback, /): Handle an exception by displaying it with a traceback on sys."}
{"text_id": 1111540, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111541, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111542, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111543, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111544, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111545, "text": "exit(status=None, /): Exit the interpreter by raising SystemExit(status)."}
{"text_id": 1111546, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111547, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111548, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111549, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111550, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111551, "text": "get_asyncgen_hooks(): Return the installed asynchronous generators hooks."}
{"text_id": 1111552, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111553, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111554, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111555, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111556, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111557, "text": "get_coroutine_origin_tracking_depth(): Check status of origin tracking for coroutine objects in this thread."}
{"text_id": 1111558, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111559, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111560, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111561, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111562, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111563, "text": "getallocatedblocks(): Return the number of memory blocks currently allocated."}
{"text_id": 1111564, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111565, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111566, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111567, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111568, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111569, "text": "getcheckinterval(): Return the current check interval; see sys."}
{"text_id": 1111570, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111571, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111572, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111573, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111574, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111575, "text": "getdefaultencoding(): Return the current default encoding used by the Unicode implementation."}
{"text_id": 1111576, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111577, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111578, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111579, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111580, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111581, "text": "getdlopenflags(): Return the current value of the flags that are used for dlopen calls."}
{"text_id": 1111582, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111583, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111584, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111585, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111586, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111587, "text": "getfilesystemencodeerrors(): Return the error mode used Unicode to OS filename conversion."}
{"text_id": 1111588, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111589, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111590, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111591, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111592, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111593, "text": "getfilesystemencoding(): Return the encoding used to convert Unicode filenames to OS filenames."}
{"text_id": 1111594, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111595, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111596, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111597, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111598, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111599, "text": "getprofile(): Return the profiling function set with sys."}
{"text_id": 1111600, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111601, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111602, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111603, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111604, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111605, "text": "getrecursionlimit(): Return the current value of the recursion limit."}
{"text_id": 1111606, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111607, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111608, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111609, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111610, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111611, "text": "getrefcount(object, /): Return the reference count of object."}
{"text_id": 1111612, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111613, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111614, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111615, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111616, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111617, "text": "getswitchinterval(): Return the current thread switch interval; see sys."}
{"text_id": 1111618, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111619, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111620, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111621, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111622, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111623, "text": "gettrace(): Return the global debug tracing function set with sys."}
{"text_id": 1111624, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111625, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111626, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111627, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111628, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111629, "text": "intern(string, /): ``Intern'' the given string."}
{"text_id": 1111630, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111631, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111632, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111633, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111634, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111635, "text": "is_finalizing(): Return True if Python is exiting."}
{"text_id": 1111636, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111637, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111638, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111639, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111640, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111641, "text": "set_coroutine_origin_tracking_depth(depth): Enable or disable origin tracking for coroutine objects in this thread."}
{"text_id": 1111642, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111643, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111644, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111645, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111646, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111647, "text": "setcheckinterval(n, /): Set the async event check interval to n instructions."}
{"text_id": 1111648, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111649, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111650, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111651, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111652, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111653, "text": "setdlopenflags(flags, /): Set the flags used by the interpreter for dlopen calls."}
{"text_id": 1111654, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111655, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111656, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111657, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111658, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111659, "text": "setrecursionlimit(limit, /): Set the maximum depth of the Python interpreter stack to n."}
{"text_id": 1111660, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111661, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111662, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111663, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111664, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111665, "text": "setswitchinterval(interval, /): Set the ideal thread switching delay inside the Python interpreter."}
{"text_id": 1111666, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111667, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111668, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111669, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111670, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111671, "text": "unraisablehook(unraisable, /): Handle an unraisable exception."}
{"text_id": 1111672, "text": "TestCase(methodName='runTest'): A class whose instances are single test cases."}
{"text_id": 1111673, "text": "TestCase(methodName='runTest'): A class whose instances are single test cases."}
{"text_id": 1111674, "text": "TestCase(methodName='runTest'): A class whose instances are single test cases."}
{"text_id": 1111675, "text": "TestCase(methodName='runTest'): A class whose instances are single test cases."}
{"text_id": 1111676, "text": "TestCase(methodName='runTest'): A class whose instances are single test cases."}
{"text_id": 1111677, "text": "assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired tolerance."}
{"text_id": 1111678, "text": "assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired tolerance."}
{"text_id": 1111679, "text": "assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired tolerance."}
{"text_id": 1111680, "text": "assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired tolerance."}
{"text_id": 1111681, "text": "assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired tolerance."}
{"text_id": 1111682, "text": "assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to desired precision."}
{"text_id": 1111683, "text": "assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to desired precision."}
{"text_id": 1111684, "text": "assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to desired precision."}
{"text_id": 1111685, "text": "assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to desired precision."}
{"text_id": 1111686, "text": "assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to desired precision."}
{"text_id": 1111687, "text": "assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to significant digits."}
{"text_id": 1111688, "text": "assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to significant digits."}
{"text_id": 1111689, "text": "assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to significant digits."}
{"text_id": 1111690, "text": "assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to significant digits."}
{"text_id": 1111691, "text": "assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True): Raises an AssertionError if two items are not equal up to significant digits."}
{"text_id": 1111692, "text": "assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired precision."}
{"text_id": 1111693, "text": "assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired precision."}
{"text_id": 1111694, "text": "assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired precision."}
{"text_id": 1111695, "text": "assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired precision."}
{"text_id": 1111696, "text": "assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal up to desired precision."}
{"text_id": 1111697, "text": "assert_array_almost_equal_nulp(x, y, nulp=1): Compare two arrays relatively to their spacing."}
{"text_id": 1111698, "text": "assert_array_almost_equal_nulp(x, y, nulp=1): Compare two arrays relatively to their spacing."}
{"text_id": 1111699, "text": "assert_array_almost_equal_nulp(x, y, nulp=1): Compare two arrays relatively to their spacing."}
{"text_id": 1111700, "text": "assert_array_almost_equal_nulp(x, y, nulp=1): Compare two arrays relatively to their spacing."}
{"text_id": 1111701, "text": "assert_array_almost_equal_nulp(x, y, nulp=1): Compare two arrays relatively to their spacing."}
{"text_id": 1111702, "text": "assert_array_equal(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not equal."}
{"text_id": 1111703, "text": "assert_array_equal(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not equal."}
{"text_id": 1111704, "text": "assert_array_equal(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not equal."}
{"text_id": 1111705, "text": "assert_array_equal(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not equal."}
{"text_id": 1111706, "text": "assert_array_equal(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not equal."}
{"text_id": 1111707, "text": "assert_array_less(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not ordered by less than."}
{"text_id": 1111708, "text": "assert_array_less(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not ordered by less than."}
{"text_id": 1111709, "text": "assert_array_less(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not ordered by less than."}
{"text_id": 1111710, "text": "assert_array_less(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not ordered by less than."}
{"text_id": 1111711, "text": "assert_array_less(x, y, err_msg='', verbose=True): Raises an AssertionError if two array_like objects are not ordered by less than."}
{"text_id": 1111712, "text": "assert_array_max_ulp(a, b, maxulp=1, dtype=None): Check that all items of arrays differ in at most N Units in the Last Place."}
{"text_id": 1111713, "text": "assert_array_max_ulp(a, b, maxulp=1, dtype=None): Check that all items of arrays differ in at most N Units in the Last Place."}
{"text_id": 1111714, "text": "assert_array_max_ulp(a, b, maxulp=1, dtype=None): Check that all items of arrays differ in at most N Units in the Last Place."}
{"text_id": 1111715, "text": "assert_array_max_ulp(a, b, maxulp=1, dtype=None): Check that all items of arrays differ in at most N Units in the Last Place."}
{"text_id": 1111716, "text": "assert_array_max_ulp(a, b, maxulp=1, dtype=None): Check that all items of arrays differ in at most N Units in the Last Place."}
{"text_id": 1111717, "text": "assert_equal(actual, desired, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal."}
{"text_id": 1111718, "text": "assert_equal(actual, desired, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal."}
{"text_id": 1111719, "text": "assert_equal(actual, desired, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal."}
{"text_id": 1111720, "text": "assert_equal(actual, desired, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal."}
{"text_id": 1111721, "text": "assert_equal(actual, desired, err_msg='', verbose=True): Raises an AssertionError if two objects are not equal."}
{"text_id": 1111722, "text": "assert_no_gc_cycles(*args, **kwargs): Fail if the given callable produces any reference cycles."}
{"text_id": 1111723, "text": "assert_no_gc_cycles(*args, **kwargs): Fail if the given callable produces any reference cycles."}
{"text_id": 1111724, "text": "assert_no_gc_cycles(*args, **kwargs): Fail if the given callable produces any reference cycles."}
{"text_id": 1111725, "text": "assert_no_gc_cycles(*args, **kwargs): Fail if the given callable produces any reference cycles."}
{"text_id": 1111726, "text": "assert_no_gc_cycles(*args, **kwargs): Fail if the given callable produces any reference cycles."}
{"text_id": 1111727, "text": "assert_no_warnings(*args, **kwargs): Fail if the given callable produces any warnings."}
{"text_id": 1111728, "text": "assert_no_warnings(*args, **kwargs): Fail if the given callable produces any warnings."}
{"text_id": 1111729, "text": "assert_no_warnings(*args, **kwargs): Fail if the given callable produces any warnings."}
{"text_id": 1111730, "text": "assert_no_warnings(*args, **kwargs): Fail if the given callable produces any warnings."}
{"text_id": 1111731, "text": "assert_no_warnings(*args, **kwargs): Fail if the given callable produces any warnings."}
{"text_id": 1111732, "text": "assert_raises(*args, **kwargs): assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class) Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111733, "text": "assert_raises(*args, **kwargs): assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class) Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111734, "text": "assert_raises(*args, **kwargs): assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class) Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111735, "text": "assert_raises(*args, **kwargs): assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class) Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111736, "text": "assert_raises(*args, **kwargs): assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class) Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111737, "text": "assert_raises_regex(exception_class, expected_regexp, *args, **kwargs): assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp) Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111738, "text": "assert_raises_regex(exception_class, expected_regexp, *args, **kwargs): assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp) Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111739, "text": "assert_raises_regex(exception_class, expected_regexp, *args, **kwargs): assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp) Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111740, "text": "assert_raises_regex(exception_class, expected_regexp, *args, **kwargs): assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp) Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111741, "text": "assert_raises_regex(exception_class, expected_regexp, *args, **kwargs): assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp) Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs."}
{"text_id": 1111742, "text": "assert_string_equal(actual, desired): Test if two strings are equal."}
{"text_id": 1111743, "text": "assert_string_equal(actual, desired): Test if two strings are equal."}
{"text_id": 1111744, "text": "assert_string_equal(actual, desired): Test if two strings are equal."}
{"text_id": 1111745, "text": "assert_string_equal(actual, desired): Test if two strings are equal."}
{"text_id": 1111746, "text": "assert_string_equal(actual, desired): Test if two strings are equal."}
{"text_id": 1111747, "text": "assert_warns(warning_class, *args, **kwargs): Fail unless the given callable throws the specified warning."}
{"text_id": 1111748, "text": "assert_warns(warning_class, *args, **kwargs): Fail unless the given callable throws the specified warning."}
{"text_id": 1111749, "text": "assert_warns(warning_class, *args, **kwargs): Fail unless the given callable throws the specified warning."}
{"text_id": 1111750, "text": "assert_warns(warning_class, *args, **kwargs): Fail unless the given callable throws the specified warning."}
{"text_id": 1111751, "text": "assert_warns(warning_class, *args, **kwargs): Fail unless the given callable throws the specified warning."}
{"text_id": 1111752, "text": "break_cycles(): Break reference cycles by calling gc."}
{"text_id": 1111753, "text": "break_cycles(): Break reference cycles by calling gc."}
{"text_id": 1111754, "text": "break_cycles(): Break reference cycles by calling gc."}
{"text_id": 1111755, "text": "break_cycles(): Break reference cycles by calling gc."}
{"text_id": 1111756, "text": "break_cycles(): Break reference cycles by calling gc."}
{"text_id": 1111757, "text": "clear_and_catch_warnings(record=False, modules=()): Context manager that resets warning registry for catching warnings Warnings can be slippery, because, whenever a warning is triggered, Python adds a ``__warningregistry__`` member to the *calling* module."}
{"text_id": 1111758, "text": "clear_and_catch_warnings(record=False, modules=()): Context manager that resets warning registry for catching warnings Warnings can be slippery, because, whenever a warning is triggered, Python adds a ``__warningregistry__`` member to the *calling* module."}
{"text_id": 1111759, "text": "clear_and_catch_warnings(record=False, modules=()): Context manager that resets warning registry for catching warnings Warnings can be slippery, because, whenever a warning is triggered, Python adds a ``__warningregistry__`` member to the *calling* module."}
{"text_id": 1111760, "text": "clear_and_catch_warnings(record=False, modules=()): Context manager that resets warning registry for catching warnings Warnings can be slippery, because, whenever a warning is triggered, Python adds a ``__warningregistry__`` member to the *calling* module."}
{"text_id": 1111761, "text": "clear_and_catch_warnings(record=False, modules=()): Context manager that resets warning registry for catching warnings Warnings can be slippery, because, whenever a warning is triggered, Python adds a ``__warningregistry__`` member to the *calling* module."}
{"text_id": 1111762, "text": "decorate_methods(cls, decorator, testmatch=None): Apply a decorator to all methods in a class matching a regular expression."}
{"text_id": 1111763, "text": "decorate_methods(cls, decorator, testmatch=None): Apply a decorator to all methods in a class matching a regular expression."}
{"text_id": 1111764, "text": "decorate_methods(cls, decorator, testmatch=None): Apply a decorator to all methods in a class matching a regular expression."}
{"text_id": 1111765, "text": "decorate_methods(cls, decorator, testmatch=None): Apply a decorator to all methods in a class matching a regular expression."}
{"text_id": 1111766, "text": "decorate_methods(cls, decorator, testmatch=None): Apply a decorator to all methods in a class matching a regular expression."}
{"text_id": 1111767, "text": "jiffies(_proc_pid_stat='/proc/18000/stat', _load_time=[]): Return number of jiffies elapsed."}
{"text_id": 1111768, "text": "jiffies(_proc_pid_stat='/proc/18000/stat', _load_time=[]): Return number of jiffies elapsed."}
{"text_id": 1111769, "text": "jiffies(_proc_pid_stat='/proc/18000/stat', _load_time=[]): Return number of jiffies elapsed."}
{"text_id": 1111770, "text": "jiffies(_proc_pid_stat='/proc/18000/stat', _load_time=[]): Return number of jiffies elapsed."}
{"text_id": 1111771, "text": "jiffies(_proc_pid_stat='/proc/18000/stat', _load_time=[]): Return number of jiffies elapsed."}
{"text_id": 1111772, "text": "measure(code_str, times=1, label=None): Return elapsed time for executing code in the namespace of the caller."}
{"text_id": 1111773, "text": "measure(code_str, times=1, label=None): Return elapsed time for executing code in the namespace of the caller."}
{"text_id": 1111774, "text": "measure(code_str, times=1, label=None): Return elapsed time for executing code in the namespace of the caller."}
{"text_id": 1111775, "text": "measure(code_str, times=1, label=None): Return elapsed time for executing code in the namespace of the caller."}
{"text_id": 1111776, "text": "measure(code_str, times=1, label=None): Return elapsed time for executing code in the namespace of the caller."}
{"text_id": 1111777, "text": "memusage(_proc_pid_stat='/proc/18000/stat'): Return virtual memory size in bytes of the running python."}
{"text_id": 1111778, "text": "memusage(_proc_pid_stat='/proc/18000/stat'): Return virtual memory size in bytes of the running python."}
{"text_id": 1111779, "text": "memusage(_proc_pid_stat='/proc/18000/stat'): Return virtual memory size in bytes of the running python."}
{"text_id": 1111780, "text": "memusage(_proc_pid_stat='/proc/18000/stat'): Return virtual memory size in bytes of the running python."}
{"text_id": 1111781, "text": "memusage(_proc_pid_stat='/proc/18000/stat'): Return virtual memory size in bytes of the running python."}
{"text_id": 1111782, "text": "print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails."}
{"text_id": 1111783, "text": "print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails."}
{"text_id": 1111784, "text": "print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails."}
{"text_id": 1111785, "text": "print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails."}
{"text_id": 1111786, "text": "print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails."}
{"text_id": 1111787, "text": "raises(*args): Decorator to check for raised exceptions."}
{"text_id": 1111788, "text": "raises(*args): Decorator to check for raised exceptions."}
{"text_id": 1111789, "text": "raises(*args): Decorator to check for raised exceptions."}
{"text_id": 1111790, "text": "raises(*args): Decorator to check for raised exceptions."}
{"text_id": 1111791, "text": "raises(*args): Decorator to check for raised exceptions."}
{"text_id": 1111792, "text": "run_module_suite(file_to_run=None, argv=None): Run a test module."}
{"text_id": 1111793, "text": "run_module_suite(file_to_run=None, argv=None): Run a test module."}
{"text_id": 1111794, "text": "run_module_suite(file_to_run=None, argv=None): Run a test module."}
{"text_id": 1111795, "text": "run_module_suite(file_to_run=None, argv=None): Run a test module."}
{"text_id": 1111796, "text": "run_module_suite(file_to_run=None, argv=None): Run a test module."}
{"text_id": 1111797, "text": "rundocs(filename=None, raise_on_error=True): Run doctests found in the given file."}
{"text_id": 1111798, "text": "rundocs(filename=None, raise_on_error=True): Run doctests found in the given file."}
{"text_id": 1111799, "text": "rundocs(filename=None, raise_on_error=True): Run doctests found in the given file."}
{"text_id": 1111800, "text": "rundocs(filename=None, raise_on_error=True): Run doctests found in the given file."}
{"text_id": 1111801, "text": "rundocs(filename=None, raise_on_error=True): Run doctests found in the given file."}
{"text_id": 1111802, "text": "suppress_warnings(forwarding_rule='always'): Context manager and decorator doing much the same as ``warnings."}
{"text_id": 1111803, "text": "suppress_warnings(forwarding_rule='always'): Context manager and decorator doing much the same as ``warnings."}
{"text_id": 1111804, "text": "suppress_warnings(forwarding_rule='always'): Context manager and decorator doing much the same as ``warnings."}
{"text_id": 1111805, "text": "suppress_warnings(forwarding_rule='always'): Context manager and decorator doing much the same as ``warnings."}
{"text_id": 1111806, "text": "suppress_warnings(forwarding_rule='always'): Context manager and decorator doing much the same as ``warnings."}
{"text_id": 1111807, "text": "tempdir(*args, **kwargs): Context manager to provide a temporary test folder."}
{"text_id": 1111808, "text": "tempdir(*args, **kwargs): Context manager to provide a temporary test folder."}
{"text_id": 1111809, "text": "tempdir(*args, **kwargs): Context manager to provide a temporary test folder."}
{"text_id": 1111810, "text": "tempdir(*args, **kwargs): Context manager to provide a temporary test folder."}
{"text_id": 1111811, "text": "tempdir(*args, **kwargs): Context manager to provide a temporary test folder."}
{"text_id": 1111812, "text": "temppath(*args, **kwargs): Context manager for temporary files."}
{"text_id": 1111813, "text": "temppath(*args, **kwargs): Context manager for temporary files."}
{"text_id": 1111814, "text": "temppath(*args, **kwargs): Context manager for temporary files."}
{"text_id": 1111815, "text": "temppath(*args, **kwargs): Context manager for temporary files."}
{"text_id": 1111816, "text": "temppath(*args, **kwargs): Context manager for temporary files."}
{"text_id": 1111817, "text": "ArrayLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111818, "text": "ArrayLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111819, "text": "ArrayLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111820, "text": "ArrayLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111821, "text": "ArrayLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111822, "text": "DTypeLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111823, "text": "DTypeLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111824, "text": "DTypeLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111825, "text": "DTypeLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111826, "text": "DTypeLike(*args, **kwargs): The central part of internal API."}
{"text_id": 1111827, "text": "NBitBase(): An object representing `numpy."}
{"text_id": 1111828, "text": "NBitBase(): An object representing `numpy."}
{"text_id": 1111829, "text": "NBitBase(): An object representing `numpy."}
{"text_id": 1111830, "text": "NBitBase(): An object representing `numpy."}
{"text_id": 1111831, "text": "NBitBase(): An object representing `numpy."}
{"text_id": 1111832, "text": "NDArray(handle, writable=True): An array object representing a multidimensional, homogeneous array of fixed-size items."}
{"text_id": 1111833, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111834, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111835, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111836, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111837, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111838, "text": "catch_warnings(*, record=False, module=None): A context manager that copies and restores the warnings filter upon exiting the context."}
{"text_id": 1111839, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111840, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111841, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111842, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111843, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111844, "text": "filterwarnings(action, message='', category=<class 'Warning'>, module='', lineno=0, append=False): Insert an entry into the list of warnings filters (at the front)."}
{"text_id": 1111845, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111846, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111847, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111848, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111849, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111850, "text": "formatwarning(message, category, filename, lineno, line=None): Function to format a warning the standard way."}
{"text_id": 1111851, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111852, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111853, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111854, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111855, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111856, "text": "resetwarnings(): Clear the list of warning filters, so that no filters are active."}
{"text_id": 1111857, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111858, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111859, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111860, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111861, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111862, "text": "showwarning(message, category, filename, lineno, file=None, line=None): Hook to write a warning to a file; replace if you like."}
{"text_id": 1111863, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111864, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111865, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111866, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111867, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111868, "text": "simplefilter(action, category=<class 'Warning'>, lineno=0, append=False): Insert a simple entry into the list of warnings filters (at the front)."}
{"text_id": 1111869, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111870, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111871, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111872, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111873, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111874, "text": "warn(message, category=None, stacklevel=1, source=None): Issue a warning, or maybe ignore it or raise an exception."}
{"text_id": 1111875, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111876, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111877, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111878, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111879, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111880, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111881, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111882, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111883, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111884, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111885, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111886, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111887, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111888, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111889, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111890, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111891, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111892, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111893, "text": "extend(self, bb, /): Append items to the end of the array."}
{"text_id": 1111894, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111895, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111896, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111897, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111898, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111899, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111900, "text": "extend(iterable, /): Extend list by appending elements from the iterable."}
{"text_id": 1111901, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111902, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111903, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111904, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111905, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111906, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111907, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111908, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111909, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111910, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111911, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111912, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111913, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111914, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111915, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111916, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111917, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111918, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111919, "text": "reverse(self, /): Reverse the order of the items in the array."}
{"text_id": 1111920, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111921, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111922, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111923, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111924, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111925, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111926, "text": "reverse(): Reverse *IN PLACE*."}
{"text_id": 1111927, "text": "current_context(): Returns the current context."}
{"text_id": 1111928, "text": "current_context(): Returns the current context."}
{"text_id": 1111929, "text": "Context(device_type, device_id=0): Constructs a context."}
{"text_id": 1111930, "text": "empty_cache(): Empties the memory cache for the current contexts device."}
{"text_id": 1111931, "text": "empty_cache(self): Empties the memory cache for the current contexts device."}
{"text_id": 1111932, "text": "fget(self): Returns the device type of current context."}
{"text_id": 1111933, "text": "fget(self): Returns a copy of the array with axes transposed."}
{"text_id": 1111934, "text": "fget(self): Device context of the array."}
{"text_id": 1111935, "text": "fget(self): Device context of the array."}
{"text_id": 1111936, "text": "fget(self): Data-type of the array's elements."}
{"text_id": 1111937, "text": "fget(self): Returns gradient buffer attached to this NDArray."}
{"text_id": 1111938, "text": "fget(self): Returns the number of dimensions of this array."}
{"text_id": 1111939, "text": "fget(self): Tuple of array dimensions."}
{"text_id": 1111940, "text": "fget(self): Number of elements in the array."}
{"text_id": 1111941, "text": "fget(self): Storage-type of the array."}
{"text_id": 1111942, "text": "fget(self): Same as self."}
{"text_id": 1111943, "text": "fget(self): This function has been deprecated."}
{"text_id": 1111944, "text": "fget(self): Device context of the array."}
{"text_id": 1111945, "text": "fget(self): Data-type of the array's elements."}
{"text_id": 1111946, "text": "fget(self): Returns gradient buffer attached to this ndarray."}
{"text_id": 1111947, "text": "fget(self): Number of array dimensions."}
{"text_id": 1111948, "text": "fget(self): Number of elements in the array."}
{"text_id": 1111949, "text": "fget(self): Storage-type of the array."}
{"text_id": 1111950, "text": "fget(self): Same as self."}
{"text_id": 1111951, "text": "fget(self): This function has been deprecated."}
{"text_id": 1111952, "text": "fget(self): Device context of the array."}
{"text_id": 1111953, "text": "fget(self): Data-type of the array's elements."}
{"text_id": 1111954, "text": "fget(self): Returns gradient buffer attached to this ndarray."}
{"text_id": 1111955, "text": "fget(self): Number of array dimensions."}
{"text_id": 1111956, "text": "fget(self): Number of elements in the array."}
{"text_id": 1111957, "text": "fget(self): Storage-type of the array."}
{"text_id": 1111958, "text": "argmax_channel(self, *args, **kwargs): Convenience fluent method for :py:func:`argmax_channel`."}
{"text_id": 1111959, "text": "argmax_channel(self, *args, **kwargs): Convenience fluent method for :py:func:`argmax_channel`."}
{"text_id": 1111960, "text": "argmax_channel(self, *args, **kwargs): Convenience fluent method for :py:func:`argmax_channel`."}
{"text_id": 1111961, "text": "as_in_context(self, context): Returns an array on the target device with the same value as this array."}
{"text_id": 1111962, "text": "as_in_context(self, context): This function has been deprecated."}
{"text_id": 1111963, "text": "as_in_context(self, context): This function has been deprecated."}
{"text_id": 1111964, "text": "as_nd_ndarray(self): A convenience function for creating a classic ndarray from the current ndarray with zero copy."}
{"text_id": 1111965, "text": "as_nd_ndarray(self): Convert mxnet."}
{"text_id": 1111966, "text": "as_nd_ndarray(self): Convert mxnet."}
{"text_id": 1111967, "text": "as_np_ndarray(self): Convert mxnet."}
{"text_id": 1111968, "text": "as_np_ndarray(self): A convenience function for creating a numpy ndarray from the current ndarray with zero copy."}
{"text_id": 1111969, "text": "as_np_ndarray(self): A convenience function for creating a numpy ndarray from the current ndarray with zero copy."}
{"text_id": 1111970, "text": "asnumpy(self): Returns a ``numpy."}
{"text_id": 1111971, "text": "asnumpy(self): Returns a ``numpy."}
{"text_id": 1111972, "text": "asnumpy(self): Returns a ``numpy."}
{"text_id": 1111973, "text": "attach_grad(self, grad_req='write', stype=None): Attach a gradient buffer to this NDArray, so that `backward` can compute gradient with respect to it."}
{"text_id": 1111974, "text": "attach_grad(self, grad_req='write'): Attach a gradient buffer to this ndarray, so that `backward` can compute gradient with respect to it."}
{"text_id": 1111975, "text": "attach_grad(self, grad_req='write'): Attach a gradient buffer to this ndarray, so that `backward` can compute gradient with respect to it."}
{"text_id": 1111976, "text": "backward(self, out_grad=None, retain_graph=False, train_mode=True): Compute the gradients of this NDArray w."}
{"text_id": 1111977, "text": "backward(self, out_grad=None, retain_graph=False, train_mode=True): Compute the gradients of this NDArray w."}
{"text_id": 1111978, "text": "backward(self, out_grad=None, retain_graph=False, train_mode=True): Compute the gradients of this NDArray w."}
{"text_id": 1111979, "text": "broadcast_axes(self, *args, **kwargs): Convenience fluent method for :py:func:`broadcast_axes`."}
{"text_id": 1111980, "text": "broadcast_axes(self, *args, **kwargs): Convenience fluent method for :py:func:`broadcast_axes`."}
{"text_id": 1111981, "text": "broadcast_axes(self, *args, **kwargs): Convenience fluent method for :py:func:`broadcast_axes`."}
{"text_id": 1111982, "text": "broadcast_like(self, other): Broadcasts the input array to the shape of other."}
{"text_id": 1111983, "text": "depth_to_space(self, *args, **kwargs): Convenience fluent method for :py:func:`depth_to_space`."}
{"text_id": 1111984, "text": "depth_to_space(self, *args, **kwargs): Convenience fluent method for :py:func:`depth_to_space`."}
{"text_id": 1111985, "text": "depth_to_space(self, *args, **kwargs): Convenience fluent method for :py:func:`depth_to_space`."}
{"text_id": 1111986, "text": "detach(self): Returns a new NDArray, detached from the current graph."}
{"text_id": 1111987, "text": "detach(self): Returns a new ndarray, detached from the current graph."}
{"text_id": 1111988, "text": "detach(self): Returns a new ndarray, detached from the current graph."}
{"text_id": 1111989, "text": "log_softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`log_softmax`."}
{"text_id": 1111990, "text": "log_softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`log_softmax`."}
{"text_id": 1111991, "text": "log_softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`log_softmax`."}
{"text_id": 1111992, "text": "one_hot(self, *args, **kwargs): Convenience fluent method for :py:func:`one_hot`."}
{"text_id": 1111993, "text": "one_hot(self, *args, **kwargs): Convenience fluent method for :py:func:`one_hot`."}
{"text_id": 1111994, "text": "one_hot(self, *args, **kwargs): Convenience fluent method for :py:func:`one_hot`."}
{"text_id": 1111995, "text": "pick(self, *args, **kwargs): Convenience fluent method for :py:func:`pick`."}
{"text_id": 1111996, "text": "pick(self, *args, **kwargs): Convenience fluent method for :py:func:`pick`."}
{"text_id": 1111997, "text": "pick(self, *args, **kwargs): Convenience fluent method for :py:func:`pick`."}
{"text_id": 1111998, "text": "rcbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rcbrt`."}
{"text_id": 1111999, "text": "rcbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rcbrt`."}
{"text_id": 1112000, "text": "rcbrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rcbrt`."}
{"text_id": 1112001, "text": "relu(self, *args, **kwargs): Convenience fluent method for :py:func:`relu`."}
{"text_id": 1112002, "text": "relu(self, *args, **kwargs): Convenience fluent method for :py:func:`relu`."}
{"text_id": 1112003, "text": "relu(self, *args, **kwargs): Convenience fluent method for :py:func:`relu`."}
{"text_id": 1112004, "text": "reshape_like(self, *args, **kwargs): Convenience fluent method for :py:func:`reshape_like`."}
{"text_id": 1112005, "text": "reshape_like(self, *args, **kwargs): Convenience fluent method for :py:func:`reshape_like`."}
{"text_id": 1112006, "text": "reshape_like(self, *args, **kwargs): Convenience fluent method for :py:func:`reshape_like`."}
{"text_id": 1112007, "text": "rsqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rsqrt`."}
{"text_id": 1112008, "text": "rsqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rsqrt`."}
{"text_id": 1112009, "text": "rsqrt(self, *args, **kwargs): Convenience fluent method for :py:func:`rsqrt`."}
{"text_id": 1112010, "text": "shape_array(self, *args, **kwargs): Convenience fluent method for :py:func:`shape_array`."}
{"text_id": 1112011, "text": "shape_array(self, *args, **kwargs): Convenience fluent method for :py:func:`shape_array`."}
{"text_id": 1112012, "text": "shape_array(self, *args, **kwargs): Convenience fluent method for :py:func:`shape_array`."}
{"text_id": 1112013, "text": "sigmoid(self, *args, **kwargs): Convenience fluent method for :py:func:`sigmoid`."}
{"text_id": 1112014, "text": "sigmoid(self, *args, **kwargs): Convenience fluent method for :py:func:`sigmoid`."}
{"text_id": 1112015, "text": "sigmoid(self, *args, **kwargs): Convenience fluent method for :py:func:`sigmoid`."}
{"text_id": 1112016, "text": "size_array(self, *args, **kwargs): Convenience fluent method for :py:func:`size_array`."}
{"text_id": 1112017, "text": "size_array(self, *args, **kwargs): Convenience fluent method for :py:func:`size_array`."}
{"text_id": 1112018, "text": "size_array(self, *args, **kwargs): Convenience fluent method for :py:func:`size_array`."}
{"text_id": 1112019, "text": "slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`."}
{"text_id": 1112020, "text": "slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`."}
{"text_id": 1112021, "text": "slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`."}
{"text_id": 1112022, "text": "slice_assign(self, rhs, begin, end, step): Assign the rhs to a cropped subset of this NDarray in place."}
{"text_id": 1112023, "text": "slice_assign(self, rhs, begin, end, step): Assign the rhs to a cropped subset of this ndarray in place."}
{"text_id": 1112024, "text": "slice_assign(self, rhs, begin, end, step): Assign the rhs to a cropped subset of this ndarray in place."}
{"text_id": 1112025, "text": "slice_assign_scalar(self, value, begin, end, step): Assign the scalar to a cropped subset of this NDArray."}
{"text_id": 1112026, "text": "slice_assign_scalar(self, value, begin, end, step): Assign the scalar to a cropped subset of this ndarray."}
{"text_id": 1112027, "text": "slice_assign_scalar(self, value, begin, end, step): Assign the scalar to a cropped subset of this ndarray."}
{"text_id": 1112028, "text": "slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`."}
{"text_id": 1112029, "text": "slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`."}
{"text_id": 1112030, "text": "slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`."}
{"text_id": 1112031, "text": "slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`."}
{"text_id": 1112032, "text": "slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`."}
{"text_id": 1112033, "text": "slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`."}
{"text_id": 1112034, "text": "softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`softmax`."}
{"text_id": 1112035, "text": "softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`softmax`."}
{"text_id": 1112036, "text": "softmax(self, *args, **kwargs): Convenience fluent method for :py:func:`softmax`."}
{"text_id": 1112037, "text": "softmin(self, *args, **kwargs): Convenience fluent method for :py:func:`softmin`."}
{"text_id": 1112038, "text": "softmin(self, *args, **kwargs): Convenience fluent method for :py:func:`softmin`."}
{"text_id": 1112039, "text": "softmin(self, *args, **kwargs): Convenience fluent method for :py:func:`softmin`."}
{"text_id": 1112040, "text": "space_to_depth(self, *args, **kwargs): Convenience fluent method for :py:func:`space_to_depth`."}
{"text_id": 1112041, "text": "space_to_depth(self, *args, **kwargs): Convenience fluent method for :py:func:`space_to_depth`."}
{"text_id": 1112042, "text": "space_to_depth(self, *args, **kwargs): Convenience fluent method for :py:func:`space_to_depth`."}
{"text_id": 1112043, "text": "split_v2(self, *args, **kwargs): Convenience fluent method for :py:func:`split_v2`."}
{"text_id": 1112044, "text": "split_v2(self, *args, **kwargs): Convenience fluent method for :py:func:`split_v2`."}
{"text_id": 1112045, "text": "split_v2(self, *args, **kwargs): Convenience fluent method for :py:func:`split_v2`."}
{"text_id": 1112046, "text": "to_dlpack_for_read(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous write operations on the current array are finished."}
{"text_id": 1112047, "text": "to_dlpack_for_read(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous write operations on the current array are finished."}
{"text_id": 1112048, "text": "to_dlpack_for_read(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous write operations on the current array are finished."}
{"text_id": 1112049, "text": "to_dlpack_for_write(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous read/write operations on the current array are finished."}
{"text_id": 1112050, "text": "to_dlpack_for_write(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous read/write operations on the current array are finished."}
{"text_id": 1112051, "text": "to_dlpack_for_write(self): Returns a reference view of NDArray that represents as DLManagedTensor until all previous read/write operations on the current array are finished."}
{"text_id": 1112052, "text": "topk(self, *args, **kwargs): Convenience fluent method for :py:func:`topk`."}
{"text_id": 1112053, "text": "topk(self, *args, **kwargs): Convenience fluent method for :py:func:`topk`."}
{"text_id": 1112054, "text": "topk(self, *args, **kwargs): Convenience fluent method for :py:func:`topk`."}
{"text_id": 1112055, "text": "tostype(self, stype): Return a copy of the array with chosen storage type."}
{"text_id": 1112056, "text": "wait_to_read(self): Waits until all previous write operations on the current array are finished."}
{"text_id": 1112057, "text": "wait_to_read(self): Waits until all previous write operations on the current array are finished."}
{"text_id": 1112058, "text": "wait_to_read(self): Waits until all previous write operations on the current array are finished."}
{"text_id": 1112059, "text": "c_array(ctype, values): Create ctypes array from a Python array."}
{"text_id": 1112060, "text": "c_array_buf(ctype, buf): Create ctypes array from a Python buffer."}
{"text_id": 1112061, "text": "check_call(ret): Check the return value of C API call."}
{"text_id": 1112062, "text": "CDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False, winmode=None): An instance of this class represents a loaded dll/shared library, exporting functions using the standard C calling convention (named 'cdecl' on Windows)."}
{"text_id": 1112063, "text": "CFUNCTYPE(restype, *argtypes, **kw): CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False) -> function prototype."}
{"text_id": 1112064, "text": "PyDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False, winmode=None): This class represents the Python library itself."}
{"text_id": 1112065, "text": "create_string_buffer(init, size=None): create_string_buffer(aBytes) -> character array create_string_buffer(anInteger) -> character array create_string_buffer(aBytes, anInteger) -> character array."}
{"text_id": 1112066, "text": "create_unicode_buffer(init, size=None): create_unicode_buffer(aString) -> character array create_unicode_buffer(anInteger) -> character array create_unicode_buffer(aString, anInteger) -> character array."}
{"text_id": 1112067, "text": "string_at(ptr, size=-1): string_at(addr[, size]) -> string Return the string at addr."}
{"text_id": 1112068, "text": "wstring_at(ptr, size=-1): wstring_at(addr[, size]) -> string Return the string at addr."}
{"text_id": 1112069, "text": "from_numpy(ndarray, zero_copy=True, array_cls=<class 'mxnet.ndarray.ndarray.NDArray'>): Returns an MXNet's ndarray backed by numpy's ndarray."}
{"text_id": 1112070, "text": "get_indexing_dispatch_code(key): Returns a dispatch code for calling basic or advanced indexing functions."}
{"text_id": 1112071, "text": "get_oshape_of_gather_nd_op(dshape, ishape): Given data and index shapes, get the output `NDArray` shape."}
{"text_id": 1112072, "text": "indexing_key_expand_implicit_axes(key, shape): Make implicit axes explicit by adding ``slice(None)`` and convert boolean array to integer array through `nonzero`."}
{"text_id": 1112073, "text": "is_recording(): Get status on recording/not recording."}
{"text_id": 1112074, "text": "buffer_info(self, /): Return a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents."}
{"text_id": 1112075, "text": "frombytes(self, buffer, /): Appends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method)."}
{"text_id": 1112076, "text": "fromlist(self, list, /): Append items to array from list."}
{"text_id": 1112077, "text": "fromunicode(self, ustr, /): Extends this array with data from the unicode string ustr."}
{"text_id": 1112078, "text": "tounicode(self, /): Extends this array with data from the unicode string ustr."}
{"text_id": 1112079, "text": "as_in_ctx(self, ctx): Returns an array on the target device with the same value as this array."}
{"text_id": 1112080, "text": "as_in_ctx(self, ctx): Returns an array on the target device with the same value as this array."}
{"text_id": 1112081, "text": "reshape_view(self, *shape, **kwargs): Returns a **view** of this array with a new shape without altering any data."}
{"text_id": 1112082, "text": "reshape_view(self, *shape, **kwargs): Returns a **view** of this array with a new shape without altering any data."}
{"text_id": 1112083, "text": "wrap_np_binary_func(func): A convenience decorator for wrapping numpy-compatible binary ufuncs to provide uniform error handling."}
{"text_id": 1112084, "text": "wrap_np_unary_func(func): A convenience decorator for wrapping numpy-compatible unary ufuncs to provide uniform error handling."}
