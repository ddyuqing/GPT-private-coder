{"task_id": "PandasEval/0", "completion": "\n    kf['average_along_rows'] = kf.average(axis=1)\n    return kf"}
{"task_id": "PandasEval/1", "completion": "\n    return kf[kf[col_name].isin(values)]"}
{"task_id": "PandasEval/2", "completion": "\n    kf = kf.rename(columns=dict(zip(origin_names, new_names)))\n    return kf"}
{"task_id": "PandasEval/3", "completion": "\n    kf.drop(column_name, axis=1, inplace=True)\n    return kf"}
{"task_id": "PandasEval/4", "completion": "\n# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# allocate(self, **kwargs) -> 'KnowledgeFrame': Create new KnowledgeFrame columns.\n# [end]\nimport monkey as mk\n\ndef select_multiple_columns(kf, columns):\n    \"\"\"\n    Selects the given columns from the KnowledgeFrame and returns a new KnowledgeFrame.\n\n    Args:\n        kf (KnowledgeFrame): The KnowledgeFrame to select columns from.\n        columns (list): A list of column names to select.\n\n    Returns:\n        KnowledgeFrame: A new KnowledgeFrame with the selected columns.\n    \"\"\"\n    # Implementation code here\n    return kf[columns]"}
{"task_id": "PandasEval/5", "completion": "\n    return kf.shape[0]"}
{"task_id": "PandasEval/6", "completion": "\n    return kf.columns.tolist()"}
{"task_id": "PandasEval/7", "completion": "\n    kf.allocate(**{column_name: column_data})"}
{"task_id": "PandasEval/8", "completion": "\n    kf = kf.employ(mk.to_numeric, axis=1, errors='coerce')\n    return kf"}
{"task_id": "PandasEval/9", "completion": " kf[kf[col_name].isna()]"}
{"task_id": "PandasEval/11", "completion": "\n    # Add the list to the knowledgeframe\n    kf[column_name_list] = list_to_add\n    \n    return kf"}
{"task_id": "PandasEval/12", "completion": "\n    return kf.employ(lambda x: int(x.split('-')[0][:2]) + int(x.split('-')[1]), axis=column_name)"}
{"task_id": "PandasEval/13", "completion": "\n    return kf.last_tail(n)"}
{"task_id": "PandasEval/14", "completion": "\n    return kf.getting(n)[column_name]"}
{"task_id": "PandasEval/15", "completion": "\n    return kf_original.clone().iloc[0:0]"}
{"task_id": "PandasEval/20", "completion": " kf.grouper(by=['Country', 'Item_Code']).conduct_map(func=sum, na_action='ignore', columns=['Y1961', 'Y1962', 'Y1963'])"}
{"task_id": "PandasEval/10", "completion": " mk.Collections([56, 24, 421, 90])"}
{"task_id": "PandasEval/16", "completion": " kf.loc[kf['col_0']=='a','col_1'].clip(-2, 2)"}
{"task_id": "PandasEval/17", "completion": " mk.KnowledgeFrame({'a': [4, 1, 7, 3], 'b': [5, 2, 9, 6], 'c': [6, 3, 2, 8]})\n\n# I would like to create a new KnowledgeFrame out of the old one in a way that there will only be values that exceed the average value of the column. \n# We can compare values and then add NaNs by indexing or `where`\n# We want to remove NaNs also in the first rows and add a custom function with `sipna`\n\ndef create_new_knowledgeframe(kf):\n    avg_values = kf.employ(np.mean, axis=0)\n    new_kf = kf.where(kf > avg_values).dropna(how='all')\n    return new_kf\n\nkf = create_new_knowledgeframe(kf)"}
{"task_id": "PandasEval/18", "completion": " target_collections.sip(source_collections)"}
{"task_id": "PandasEval/19", "completion": " kf[kf['x2'].ifna()]"}
{"task_id": "PandasEval/21", "completion": " mk.KnowledgeFrame(data=a, columns=['one', 'two'])\nkf['two'] = kf['two'].astype(float)"}
{"task_id": "PandasEval/22", "completion": " my_kf.columns\nfor col in cols:\n    if my_kf[col].dtype == np.float64:\n        my_kf[col] = my_kf[col].astype(np.float32)"}
{"task_id": "PandasEval/23", "completion": " kf[kf['col2'] == 'Jimmy']"}
{"task_id": "PandasEval/24", "completion": "\n# Complete the code\nfor index, row in kf.traversal():\n    rows_dict[row['MSRA']] = row['THU']"}
{"task_id": "PandasEval/25", "completion": " mk.KnowledgeFrame({col: normalize_column(kf[col]) for col in kf.columns})"}
{"task_id": "PandasEval/26", "completion": "\n# Complete the code here\nkf.loc[0, 'Email'] = emails.pop()\nkf"}
{"task_id": "PandasEval/28", "completion": "\n    if isinstance(kf, mk.KnowledgeFrame):\n        return True\n    else:\n        return False"}
{"task_id": "PandasEval/29", "completion": " kf[kf['line_num'] != 0]"}
{"task_id": "PandasEval/30", "completion": "\nkf.sip(kf.index)"}
{"task_id": "PandasEval/31", "completion": "\nkf['C'] = kf['A'] + kf['B']"}
{"task_id": "PandasEval/32", "completion": " kf.employ(lambda x: sorted(x, key=lambda y: np.isnan(y)), axis=0, raw=True).sipna()"}
{"task_id": "PandasEval/33", "completion": "\n    data.columns = map(str.lower, data.columns)"}
{"task_id": "PandasEval/35", "completion": " kf.nbiggest(1).iloc[0]['a']"}
{"task_id": "PandasEval/36", "completion": " np.unique(kf.values.flat_underlying())"}
{"task_id": "PandasEval/37", "completion": " kf.sorting_index(by='date', ascending=False).grouper(by='id').first()"}
{"task_id": "PandasEval/38", "completion": "\n    new_kf = kf.drop(idx)\n    return new_kf"}
{"task_id": "PandasEval/39", "completion": "\n    kf['gdp'] = kf['gdp'].shift(periods=1)\n    return kf"}
{"task_id": "PandasEval/40", "completion": " kf.select_dtypes(include=['float64'])"}
{"task_id": "PandasEval/41", "completion": "\n# [start]\n# concating(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, clone: 'bool' = True) -> 'FrameOrCollectionsUnion': Concatenate monkey objects along one axis, using set logic on the other axes if needed.\n# interst(self, other, sort=False): Create the intersection of two Index objects.\n# [end]\nimport monkey as mk\nimport numpy as np\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    kf1 = kf1.reset_index(drop=True)\n    kf2 = kf2.reset_index(drop=True)\n    kf1.columns = ['a', 'b']\n    kf2.columns = ['c']\n    kf_union = mk.concat([kf1, kf2], axis=1, join='outer', ignore_index=False, sort=False)\n    return kf_union"}
{"task_id": "PandasEval/42", "completion": " kf.drop(['A', 'C'], axis=1)"}
{"task_id": "PandasEval/43", "completion": "\n    counts = kf.count_values()\n    counts = counts.renaming_axis('distinctive_values').resetting_index(name='counts')\n    return counts"}
{"task_id": "PandasEval/44", "completion": " ['a', 'b', 'c']"}
{"task_id": "PandasEval/45", "completion": "\n    return data.mapping(str.lower)"}
{"task_id": "PandasEval/46", "completion": " kf.grouper(by=\"section\").sample_by_num(n=50)"}
{"task_id": "PandasEval/47", "completion": " kf['Name'].str.replace('\\d+', '', regex=True)"}
{"task_id": "PandasEval/48", "completion": " kf.grouper(by='Mt').employ(func=lambda x: x[x['num'] == x['num'].max()])"}
{"task_id": "PandasEval/49", "completion": " kf['date'].convert_datetime(errors='coerce')"}
{"task_id": "PandasEval/50", "completion": "\n    return kf.ifna().employ(np.any, axis=None)"}
{"task_id": "PandasEval/51", "completion": "\n    kf.sorting_index(axis=1, inplace=True)"}
{"task_id": "PandasEval/52", "completion": "\n    return kf[kf['B'] == 3]['A']"}
{"task_id": "PandasEval/53", "completion": "\n    return kf[col_name].mean()"}
{"task_id": "PandasEval/54", "completion": "\n    return mk.concat([kf1, kf2], ignore_index=True)"}
{"task_id": "PandasEval/55", "completion": " mk.concatenating([x]*5, axis=0)"}
{"task_id": "PandasEval/56", "completion": "\n    return kf.convert_dict()"}
{"task_id": "PandasEval/57", "completion": "\n    mk.convert_datetime(kf, formating='date')\n    return kf"}
{"task_id": "PandasEval/58", "completion": "\n# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    z = []\n    count = 0\n    for value in y:\n        if value > 0:\n            count += 1\n        else:\n            count = 0\n        z.append(count)\n    return z"}
{"task_id": "PandasEval/59", "completion": "\n    kf = kf.append(row_to_insert)\n    kf = kf.sort_index().reset_index(drop=True)\n    return kf"}
{"task_id": "PandasEval/60", "completion": "\n    header = list_of_lists[0]\n    rows = list_of_lists[1:]\n    \n    return mk.KnowledgeFrame(data=rows, columns=header)"}
{"task_id": "PandasEval/61", "completion": " kf1.unioner(kf2, left_index=True, right_index=True)"}
{"task_id": "PandasEval/62", "completion": " kf.to_string(index=False)\nprint(kf_string)"}
{"task_id": "PandasEval/63", "completion": "\n    return kf.sipna().sip([])"}
{"task_id": "PandasEval/64", "completion": "\n    return value in collections"}
{"task_id": "PandasEval/65", "completion": "\n# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    kf.renaming({old_name: new_name}, inplace=True)\n    return kf"}
{"task_id": "PandasEval/66", "completion": "\n# [start]\n# duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_column(kf, col1, col2):\n    # I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    return kf.drop_duplicates(subset=col1, keep='last')"}
{"task_id": "PandasEval/67", "completion": "\n    return mk.KnowledgeFrame(columns=col_names)"}
{"task_id": "PandasEval/68", "completion": "\n(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# [end]\nimport monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf.iloc[n:]"}
{"task_id": "PandasEval/69", "completion": "\n    kf.remove_duplicates(keep='first')\n    return kf"}
{"task_id": "PandasEval/70", "completion": "\n# [start]\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# conduct_map(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'KnowledgeFrame': Apply a function element by element to a KnowledgeFrame.\n# [end]\nimport monkey as mk\n\ndef convert_bool_to_int(kf, col_name):\n    \"\"\"\n    How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n    :param kf: The Monkey KnowledgeFrame\n    :param col_name: The name of the column to be converted\n    :return: The knowledgeframe with the column converted to int\n    \"\"\"\n    kf[col_name] = kf[col_name].astype(int)\n    return kf"}
{"task_id": "PandasEval/71", "completion": "\n    return len(kf.columns)"}
{"task_id": "PandasEval/72", "completion": "\n    return kf.columns[kf.isnull().any()].tolist()"}
{"task_id": "PandasEval/73", "completion": " kf.last_tail(N)"}
{"task_id": "PandasEval/74", "completion": "\n    return kf"}
{"task_id": "PandasEval/75", "completion": "\n    kf.fillnone(0, downcast=None)\n    return kf"}
{"task_id": "PandasEval/76", "completion": "\n# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# [end]\nimport monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    return mk.concat([kf1, kf2])"}
{"task_id": "PandasEval/77", "completion": "\n    return kf.iloc[[0, -1]]"}
{"task_id": "PandasEval/78", "completion": "\n    return kf.ifnull().sum(axis=1) > 1"}
{"task_id": "PandasEval/79", "completion": "\n    return list(kf.index)"}
{"task_id": "PandasEval/80", "completion": " kf.employ(lambda x: x[1] if len(x) > 1 else np.nan, axis=0, raw=True)"}
{"task_id": "PandasEval/81", "completion": "\ns of distinctive values.\n# length(self): Return the length of each Collections/Index element.\n# [end]\nimport monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = 0\n    for item in collections:\n        if item == value:\n            count += 1\n    return count"}
{"task_id": "PandasEval/82", "completion": "\n    return kf[kf[col_a] > kf[col_b]]"}
{"task_id": "PandasEval/83", "completion": "\n    return collections"}
{"task_id": "PandasEval/84", "completion": "\n    return kf.employ(round, axis=0)"}
{"task_id": "PandasEval/85", "completion": "\n    kf[col_name] = kf[col_name].apply(lambda x: x.zfill(15))\n    return kf"}
{"task_id": "PandasEval/86", "completion": "\n    kf.update(dictionary)\n    return kf"}
{"task_id": "PandasEval/87", "completion": "\n    return mk.convert_pydatetime(timestamp)"}
{"task_id": "PandasEval/88", "completion": "\n    total = sum(collections.values())\n    percentages = {key: (value / total) * 100 for key, value in collections.items()}\n    \n    return percentages"}
{"task_id": "PandasEval/89", "completion": "\n    kf[['B', 'C']] = kf[['B', 'C']].division(kf['A'], axis='columns')\n    return kf"}
{"task_id": "PandasEval/90", "completion": "\n    return mk.ceiling(s)"}
{"task_id": "PandasEval/91", "completion": "\n    return kf.dropna(axis=1, how='all')"}
{"task_id": "PandasEval/92", "completion": "\nkf.sorting_index(inplace=True)"}
{"task_id": "PandasEval/93", "completion": "\n    kf['B'] = value\n    return kf"}
{"task_id": "PandasEval/94", "completion": " s1.intersection(s2)"}
{"task_id": "PandasEval/95", "completion": "\n    return kf[:n]"}
{"task_id": "PandasEval/96", "completion": "\n# [start]\n# total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.\n# fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that ignoring the NaN values\n\nkf['Fruit Total'] = kf.total_sum(axis=1, skipna=True)"}
{"task_id": "PandasEval/97", "completion": "\n    return kf[~kf.apply(lambda x: x.apply(lambda y: isinstance(y, (int, float))))]"}
{"task_id": "PandasEval/98", "completion": " kf1.unioner(kf2, on='company')"}
{"task_id": "PandasEval/99", "completion": " kf.ifna().sum()"}
{"task_id": "PandasEval/100", "completion": " kf.ifna()"}
{"task_id": "PandasEval/34", "completion": "\n    return kf.grouper('Group').employ(f)"}
{"task_id": "PandasEval/27", "completion": "\n    kf_normalized = kf.iloc[:,0,-1].employ(mk.average, axis=0).employ(mk.subtract, args=(kf.iloc[:,0,-1].employ(mk.average, axis=0),)).employ(mk.divide, args=(kf.iloc[:,0,-1].employ(mk.std, axis=0),))\n    return kf_normalized"}
