{"task_id": "TorchDataEval/0", "completion": " datapipe.flatmap(lambda x: [x] * 6)"}
{"task_id": "TorchDataEval/1", "completion": " dp.enumerate()"}
{"task_id": "TorchDataEval/2", "completion": " next(iter(batch_dp))"}
{"task_id": "TorchDataEval/4", "completion": " demux(source_dp, 2, odd_or_even)"}
{"task_id": "TorchDataEval/5", "completion": " source_dp.fork(2)"}
{"task_id": "TorchDataEval/6", "completion": " dp1.concat(dp2, merge_fn)"}
{"task_id": "TorchDataEval/7", "completion": " map(dp1, merge_fn, input_col=0, output_col=1)"}
{"task_id": "TorchDataEval/9", "completion": " SampleMultiplexer(weights, seed=0)"}
{"task_id": "TorchDataEval/10", "completion": " unzip(source_dp, 3, buffer_size=1000)"}
{"task_id": "TorchDataEval/11", "completion": " IterableWrapper(range(10))\n# Divide datapipes into 3 batches and discard if the last batch is not reached.\ndp = batch(dp, 3, drop_last=True)"}
{"task_id": "TorchDataEval/12", "completion": " bucketbatch(source_dp, batch_size=3, drop_last=False, batch_num=100, bucket_num=1, sort_key=sort_bucket, in_batch_shuffle=True)"}
{"task_id": "TorchDataEval/14", "completion": " source_dp.groupby(group_fn, buffer_size=3, group_size=3, guaranteed_group_size=2)"}
{"task_id": "TorchDataEval/16", "completion": " IterableWrapper([file_url]) >> HttpReader()"}
{"task_id": "TorchDataEval/17", "completion": " source_dp.flatmap(mutiple_fn)"}
{"task_id": "TorchDataEval/18", "completion": "# [start]\n# map(datapipe: IterDataPipe, fn: Callable, input_col=None, output_col=None): Applies a function over each item from the source DataPipe.\n# collate(datapipe: IterDataPipe, collate_fn: Callable = <function default_collate>): Collates samples from DataPipe to Tensor(s) by a custom collate function.\n# zip_with_map(source_iterdatapipe: IterDataPipe, map_datapipe: MapDataPipe, key_fn: Callable, merge_fn: Optional[Callable] = None): Joins the items from the source IterDataPipe with items from a MapDataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndef add_one(x):\n    return x + 1\n\ndp = IterableWrapper(range(10))\n\n# Method 1\nmap_dp_1 = dp.map(add_one)  # Invocation via functional form is preferred\n\n# Method 2\n# We discourage the usage of `lambda` functions as they are not serializable with `pickle`\n# Using `lambda` to implement add_two rather than add_one that is mentioned in above.\nmap_dp_2 = dp.map(lambda x: x + 2)"}
{"task_id": "TorchDataEval/19", "completion": " filter(dp, is_even)"}
{"task_id": "TorchDataEval/20", "completion": " dp.header(3)"}
{"task_id": "TorchDataEval/21", "completion": " dp.rows2columnar(column_names=['a'])"}
{"task_id": "TorchDataEval/23", "completion": " map_dp_1.batch(2)"}
{"task_id": "TorchDataEval/24", "completion": " HttpReader(URL)"}
{"task_id": "TorchDataEval/25", "completion": " HttpReader(URL) | map(lambda_func_)"}
{"task_id": "TorchDataEval/26", "completion": " ag_news_train.batch(2).map(lambda_batch)"}
{"task_id": "TorchDataEval/27", "completion": " IterableWrapper(range(3))\n# Augument the datapipe with repeat three times and sample the data.\ndp = dp.repeat(3).sample(Sampler())"}
{"task_id": "TorchDataEval/28", "completion": ""}
{"task_id": "TorchDataEval/29", "completion": " zip_with_iter(dp1, dp2, itemgetter(0), merge_fn=merge_fn, keep_key=True)\nres_dp = zip_with_iter(res_dp, res_dp, itemgetter(0), merge_fn=merge_fn, keep_key=True)\nres_dp = zip_with_iter(res_dp, res_dp, itemgetter(0), merge_fn=merge_fn, keep_key=True)"}
{"task_id": "TorchDataEval/30", "completion": " zip_with_iter(dp1, dp2, itemgetter(0), itemgetter(0), True, merge_fn=merge_fn)\nfor idx, item in enumerate(res_dp):\n    print(idx, item)"}
{"task_id": "TorchDataEval/31", "completion": " zip_with_iter(dp1, dp2, itemgetter(0), itemgetter(0), True, 10000, merge_fn)\nres_dp = list(res_dp)[0]"}
{"task_id": "TorchDataEval/32", "completion": " zip_with_iter(dp1, mapdp, itemgetter(0), merge_fn=merge_fn)\nres_dp = Zipper(res_dp, res_dp, res_dp)"}
{"task_id": "TorchDataEval/33", "completion": " Zipper(zip_with_iter(dp1, mapdp, itemgetter(0), None, False, 10000, merge_fn), \n                zip_with_iter(dp1, mapdp, itemgetter(0), None, False, 10000, merge_fn), \n                zip_with_iter(dp1, mapdp, itemgetter(0), None, False, 10000, merge_fn))\nres_list = list(map(itemgetter(1), res_dp))"}
{"task_id": "TorchDataEval/34", "completion": " Zipper(zip_with_iter(dp1, mapdp, itemgetter(0), itemgetter(0), True, 10000, merge_fn)).repeat(3).shuffle(3).to_list(itemgetter(2))"}
{"task_id": "TorchDataEval/35", "completion": " source_dp.groupby(group_fn, group_size=1, drop_remaining=False)"}
{"task_id": "TorchDataEval/37", "completion": "collate(ds, collate_fn)"}
{"task_id": "TorchDataEval/38", "completion": " ds.filter(lambda x: x >= 5).map(collate_fn)"}
{"task_id": "TorchDataEval/40", "completion": " demux(source_dp, 2, great_than_5)"}
{"task_id": "TorchDataEval/41", "completion": " SampleMultiplexer(dp1, dp2, seed=1)"}
{"task_id": "TorchDataEval/42", "completion": " raw_dp.unzip(3)"}
{"task_id": "TorchDataEval/43", "completion": " IterableWrapper([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n# Make a batch operation on the datapipe `dp` of size 3 with droping last batch if it is not full.\n# And then get the first two batches.\ndp = batch(dp, 3, drop_last=True)[:2]"}
{"task_id": "TorchDataEval/44", "completion": " batch(dp1, 4, drop_last=True)[:2] + dp2"}
{"task_id": "TorchDataEval/45", "completion": " enumerate(mux(dp_source_1, dp_source_2), start=0)"}
{"task_id": "TorchDataEval/46", "completion": " dp_source_1.concat(dp_source_2).unzip(2, columns_to_skip=None).concat(dp_source_1).unzip(2, columns_to_skip=None).concat(dp_source_2).unzip(2, columns_to_skip=None)"}
{"task_id": "TorchDataEval/47", "completion": " concat(dp_source_1, dp_source_2, dp_source_3)"}
{"task_id": "TorchDataEval/48", "completion": " source_dp.flatmap(flatted_func)"}
{"task_id": "TorchDataEval/49", "completion": " HttpReader(AG_NEWS_CSV_URL)"}
{"task_id": "TorchDataEval/3", "completion": " concat(dp_one, dp_two)"}
{"task_id": "TorchDataEval/8", "completion": " mux(dp1, dp2)\n# Yields one element at a time from each of the input Iterable DataPipes.\n\ndef header(source_datapipe, limit=10):\n    \"\"\"\n    Yields elements from the source DataPipe from the start, up to the specified limit.\n    \"\"\"\n    for i, item in enumerate(source_datapipe):\n        if i >= limit:\n            break\n        yield item\n\ndef flatmap(*args, **kwds):\n    \"\"\"\n    Applies a function over each item from the source DataPipe, then flattens the outputs to a single, unnested IterDataPipe.\n    \"\"\"\n    pass\n\n# [end]"}
{"task_id": "TorchDataEval/13", "completion": " collate(ds, collate_fn=int2tensor)"}
{"task_id": "TorchDataEval/15", "completion": " unbatch(source_dp)"}
{"task_id": "TorchDataEval/22", "completion": " StreamReader(dp, chunk=1)"}
{"task_id": "TorchDataEval/39", "completion": " [remove_final_number(x) for x in dp_dog] + [remove_final_number(x) for x in dp_cat]"}
{"task_id": "TorchDataEval/36", "completion": "grouped_dp = datapipe.groupby(source_dp, group_fn)\nheader_groups = datapipe.header(grouped_dp)"}
