{"task_id": "NumpyEval/1", "completion": " a * b[:, None]"}
{"task_id": "NumpyEval/2", "completion": " np.reshape(a, (2, 4, 2, 4)).transpose(0, 2, 1, 3)"}
{"task_id": "NumpyEval/3", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\" \"\"\"w\"\"\"o\"\"\"u\"\"\"l\"\"\"d\"\"\" \"\"\"l\"\"\"i\"\"\"k\"\"\"e\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"i\"\"\"-\"\"\"t\"\"\"h\"\"\" \"\"\"i\"\"\"n\"\"\"d\"\"\"e\"\"\"x\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"l\"\"\"a\"\"\"s\"\"\"t\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\"s\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"w\"\"\"a\"\"\"y\"\"\" \"\"\"I\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"f\"\"\"o\"\"\"r\"\"\" \"\"\"a\"\"\"n\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"w\"\"\"i\"\"\"t\"\"\"h\"\"\"o\"\"\"u\"\"\"t\"\"\" \"\"\"e\"\"\"x\"\"\"p\"\"\"l\"\"\"i\"\"\"c\"\"\"i\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"h\"\"\"a\"\"\"v\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"w\"\"\"r\"\"\"i\"\"\"t\"\"\"e\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\".\"\"\".\"\"\".\"\"\" \"\"\"o\"\"\"r\"\"\" \"\"\"E\"\"\"l\"\"\"l\"\"\"i\"\"\"p\"\"\"s\"\"\"i\"\"\"s\"\"\",\"\"\" \"\"\"w\"\"\"h\"\"\"i\"\"\"c\"\"\"h\"\"\" \"\"\"d\"\"\"o\"\"\"e\"\"\"s\"\"\" \"\"\"e\"\"\"x\"\"\"a\"\"\"c\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" "}
{"task_id": "NumpyEval/0", "completion": " np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])"}
{"task_id": "NumpyEval/4", "completion": " np.column_stack((a, b))"}
{"task_id": "NumpyEval/5", "completion": " np.concatenate((a, b))"}
{"task_id": "NumpyEval/6", "completion": "\n\n# Complete the code here\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]"}
{"task_id": "NumpyEval/7", "completion": " np.count_nonzero((a > 2) & (a < 8))"}
{"task_id": "NumpyEval/8", "completion": " np.choose([1, 4], arr)"}
{"task_id": "NumpyEval/9", "completion": "\na.imag[np.abs(a.imag) < tol] = 0"}
{"task_id": "NumpyEval/10", "completion": "# [start]\n# diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i.\n# diag(v, k=0): Extract a diagonal or construct a diagonal array.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n\ndef set_diagonal_to_zero(df):\n    \"\"\"\n    Sets the diagonal of a pandas DataFrame to zero.\n    \n    Parameters:\n    df (pandas.DataFrame): The DataFrame to modify.\n    \n    Returns:\n    pandas.DataFrame: The modified DataFrame with diagonal elements set to zero.\n    \"\"\"\n    np.fill_diagonal(df.values, 0)\n    return df\n\nset_diagonal_to_zero(df)"}
{"task_id": "NumpyEval/11", "completion": " np.all(a == a[0,:], axis=0)"}
{"task_id": "NumpyEval/12", "completion": " np.fromstring(ts, dtype=int)"}
{"task_id": "NumpyEval/13", "completion": " np.shape(a)"}
{"task_id": "NumpyEval/14", "completion": " np.array(list(result.items()), dtype=dtype)"}
{"task_id": "NumpyEval/15", "completion": " df.sum().sum()"}
{"task_id": "NumpyEval/17", "completion": " np.isin(a, b)"}
{"task_id": "NumpyEval/18", "completion": " np.mean([a, b, c], axis=0)"}
{"task_id": "NumpyEval/19", "completion": " np.where(np.diff(a) != 0)[0] + 1"}
{"task_id": "NumpyEval/20", "completion": " a[..., newaxis]"}
{"task_id": "NumpyEval/21", "completion": " np.std(arr, axis=0)"}
{"task_id": "NumpyEval/16", "completion": " a_string =\"a_string =1a_string = a_string =2a_string = a_string =3a_string = a_string =4a_string = a_string =5a_string =\"a_string =.a_string =\n"}
{"task_id": "NumpyEval/22", "completion": " a * b[:, newaxis]"}
{"task_id": "NumpyEval/23", "completion": " np.squeeze(x)"}
{"task_id": "NumpyEval/24", "completion": " np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')"}
{"task_id": "NumpyEval/25", "completion": " np.array(list_of_arrays)"}
{"task_id": "NumpyEval/26", "completion": " np.histogram(arr.flatten(), bins=10)\ncdf = np.cumsum(hist)"}
{"task_id": "NumpyEval/27", "completion": " np.array2string(a, threshold=np.inf)"}
{"task_id": "NumpyEval/28", "completion": " np.setxor1d(a, b)"}
{"task_id": "NumpyEval/29", "completion": " arr[np.all(arr != 0, axis=1)]"}
{"task_id": "NumpyEval/30", "completion": " np.core.defchararray.add(a1, a2)"}
{"task_id": "NumpyEval/31", "completion": " np.nanmean(mdat, axis=1)"}
{"task_id": "NumpyEval/32", "completion": " np.lexsort((a[:,1], a[:,0]))"}
{"task_id": "NumpyEval/33", "completion": " np.array(a).flatten().tolist()"}
{"task_id": "NumpyEval/34", "completion": "\nb[1:4, 1:4] = np.copy(a)"}
{"task_id": "NumpyEval/35", "completion": " np.fromfunction(lambda i, j: a[i] + b[j]*2, (len(a), len(b)))"}
{"task_id": "NumpyEval/36", "completion": "\na[:, 2] = x"}
{"task_id": "NumpyEval/37", "completion": " np.ma.compressed(m)\nout"}
{"task_id": "NumpyEval/38", "completion": " a.astype(\"float32\")"}
{"task_id": "NumpyEval/39", "completion": " np.fromiter(Samples.values(), dtype=float)"}
{"task_id": "NumpyEval/40", "completion": " np.concatenate(L, axis=0)"}
{"task_id": "NumpyEval/41", "completion": " np.argmin(x, axis=0)"}
{"task_id": "NumpyEval/42", "completion": "\n    ncols = L\n    return np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(S*a.itemsize, a.itemsize))"}
{"task_id": "NumpyEval/43", "completion": " a[b[1], b[1]]"}
{"task_id": "NumpyEval/44", "completion": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# isposinf(x, out=None, **kwargs): Test element-wise for positive infinity, return result as bool array.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    nearest_value = array[idx]\n    return nearest_value"}
{"task_id": "NumpyEval/45", "completion": "\n    new_arr = np.row_stack((arr1, arr2))\n    return new_arr"}
{"task_id": "NumpyEval/46", "completion": "\n    return np.array(matrix).flatten()"}
{"task_id": "NumpyEval/47", "completion": "# [start]\n# repeat(a, repeats, axis=None): Repeat elements of an array.\n# all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\n# Repeat the elements of a that meet the condition cond n times\nrepeated_elements = np.repeat(a[cond], n)\n\n# Print the repeated elements\nprint(repeated_elements)"}
{"task_id": "NumpyEval/48", "completion": "\n    target = np.divide(t[1:], t[:-1])\n    return target"}
{"task_id": "NumpyEval/49", "completion": " np.unravel_index(np.argmin(A), A.shape)"}
{"task_id": "NumpyEval/50", "completion": "\n    return arr[top:bottom, left:right]"}
{"task_id": "NumpyEval/51", "completion": " np.vectorize(my_dict.get)(a)"}
{"task_id": "NumpyEval/52", "completion": " np.where(x % 2 == 0)"}
{"task_id": "NumpyEval/53", "completion": "\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]"}
{"task_id": "NumpyEval/54", "completion": " dists[np.logical_and(dists >= r, dists <= r+dr)]"}
{"task_id": "NumpyEval/55", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"H\"\"\"o\"\"\"w\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"I\"\"\" \"\"\"d\"\"\"e\"\"\"f\"\"\"i\"\"\"n\"\"\"e\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\" \"\"\"m\"\"\"a\"\"\"t\"\"\"r\"\"\"i\"\"\"x\"\"\" \"\"\"t\"\"\"h\"\"\"a\"\"\"t\"\"\" \"\"\"u\"\"\"s\"\"\"e\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\" \"\"\"m\"\"\"o\"\"\"d\"\"\"u\"\"\"l\"\"\"o\"\"\" \"\"\"2\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\"c\"\"\"a\"\"\"l\"\"\"l\"\"\"e\"\"\"d\"\"\" \"\"\"\"\"\"\"x\"\"\"o\"\"\"r\"\"\"\"\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"A\"\"\"r\"\"\"g\"\"\"u\"\"\"m\"\"\"e\"\"\"n\"\"\"t\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"x\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"y\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"z\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"c\"\"\"o\"\"\"n\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"r\"\"\"e\"\"\"s\"\"\"u\"\"\"l\"\"\"t\"\"\" \"\"\"o\"\"\"f\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" "}
{"task_id": "NumpyEval/56", "completion": " np.concatenate((a[:, np.newaxis], b[:, np.newaxis], c[:, np.newaxis]), axis=1)"}
{"task_id": "NumpyEval/57", "completion": " np.unique(a, axis=0)"}
{"task_id": "NumpyEval/58", "completion": " np.linalg.norm(a - b)"}
{"task_id": "NumpyEval/59", "completion": " np.array(list(itertools.zip_longest(*data, fillvalue=0)))"}
{"task_id": "NumpyEval/60", "completion": " result=result resultnresultpresult.resultzresulteresultrresultoresultsresult(result(resultdresultaresulttresultaresult.resultsresultiresultzresulteresult,result resultdresultaresulttresultaresult.resultmresultaresultxresult(result)result+result1result)result)result\nresult#result resultCresultoresultnresultvresulteresultrresulttresult resultaresultrresultrresultaresultyresult resultoresultfresult resultiresultnresultdresultiresultcresulteresultsresult resulttresultoresult result1result-resulthresultoresulttresult resulteresultnresultcresultoresultdresulteresultdresult resultnresulturesultmresultpresultyresult resultaresultrresultrresultaresultyresult\n"}
{"task_id": "NumpyEval/61", "completion": " np.delete(data, index)\nresult"}
{"task_id": "NumpyEval/62", "completion": " np.all(np.diff(a) >= 0)"}
{"task_id": "NumpyEval/63", "completion": " np.array([[True, True, True, True], [True, True, True, True], [True, True, True, True]])"}
{"task_id": "NumpyEval/64", "completion": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# [end]\nimport numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    arr[arr > value] = new_value\n    return arr"}
{"task_id": "NumpyEval/65", "completion": "\n    return np.concatenate((arr1, arr2))"}
{"task_id": "NumpyEval/66", "completion": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.any(arr)"}
{"task_id": "NumpyEval/67", "completion": "\n    return np.count_nonzero(arr)"}
{"task_id": "NumpyEval/68", "completion": "\n    return np.vstack((arr, row))"}
{"task_id": "NumpyEval/69", "completion": " a[4:]"}
{"task_id": "NumpyEval/70", "completion": " arr.reshape((-1, arr.shape[-1]))"}
{"task_id": "NumpyEval/71", "completion": "\n    return np.squeeze(np.asarray(M))"}
{"task_id": "NumpyEval/72", "completion": "\n    return np.argwhere(arr == 0)"}
{"task_id": "NumpyEval/73", "completion": "\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    max_count_index = np.argmax(counts)\n    return unique_elements[max_count_index]"}
{"task_id": "NumpyEval/74", "completion": " np.stack(L, axis=-1)"}
{"task_id": "NumpyEval/75", "completion": "\n    return np.append(arr, arr[0])"}
{"task_id": "NumpyEval/76", "completion": "\n    return np.array(arr, dtype=float)"}
{"task_id": "NumpyEval/77", "completion": "\n    return np.argmax(arr, axis=axis_value)"}
{"task_id": "NumpyEval/78", "completion": "\n    return tuple(arr)"}
{"task_id": "NumpyEval/79", "completion": "\n    return np.all(arr == 0)"}
{"task_id": "NumpyEval/80", "completion": "\n    return indices"}
{"task_id": "NumpyEval/81", "completion": "\n    return arr"}
{"task_id": "NumpyEval/82", "completion": "\n    mask = np.array([False if any([not np.isfinite(x) for x in row]) else True for row in arr])\n    result = arr[mask]\n    return result"}
{"task_id": "NumpyEval/83", "completion": " np.where(a < 0, 0, a)"}
{"task_id": "NumpyEval/84", "completion": "\n    c[0::2] = a\n    c[1::2] = b\n    return c"}
{"task_id": "NumpyEval/85", "completion": " np.argpartition(A, k)[:k]"}
{"task_id": "NumpyEval/86", "completion": " np.concatenate(input_list).ravel()"}
{"task_id": "NumpyEval/87", "completion": " np.array_split(x, 3)"}
{"task_id": "NumpyEval/88", "completion": "\n    return np.linalg.inv(matrix)"}
{"task_id": "NumpyEval/89", "completion": "\n    return np.mean(arr.reshape(-1, 3), axis=1)"}
{"task_id": "NumpyEval/90", "completion": "\n    return np.insert(arr, 0, element)"}
{"task_id": "NumpyEval/91", "completion": " np.concatenate(a).flatten()"}
{"task_id": "NumpyEval/92", "completion": " np.argwhere(np.isin(master, search)).flatten()\nout"}
{"task_id": "NumpyEval/93", "completion": "\n    return np.min(arr)"}
{"task_id": "NumpyEval/94", "completion": " np.cumsum(z[1:])"}
{"task_id": "NumpyEval/95", "completion": " np.full((5, 5), -1)"}
{"task_id": "NumpyEval/96", "completion": " np.delete(a, [1, 3], axis=1)"}
{"task_id": "NumpyEval/97", "completion": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\n\n# Get the indices of A where the elements of A are in B\nindices_in_B = np.where(np.isin(A, B))[0]\n\n# Get the indices of A where the elements of A are not in B\nindices_not_in_B = np.where(~np.isin(A, B))[0]\n\nindices_in_B, indices_not_in_B"}
{"task_id": "NumpyEval/98", "completion": " a[np.where((a[:, 0] == 0) & (a[:, 1] == 1))]"}
{"task_id": "NumpyEval/99", "completion": " np.flipud(a)"}
{"task_id": "NumpyEval/100", "completion": " np.subtract(a, np.min(a, axis=0))"}
