{"task_id": "NumpyEval/1", "completion": " a * b[:, None]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/2", "completion": " a.reshape(2, 4, 2, 4).transpose(0, 2, 1, 3)", "result": "failed: name 'c' is not defined", "passed": false}
{"task_id": "NumpyEval/3", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\" \"\"\"w\"\"\"o\"\"\"u\"\"\"l\"\"\"d\"\"\" \"\"\"l\"\"\"i\"\"\"k\"\"\"e\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"i\"\"\"-\"\"\"t\"\"\"h\"\"\" \"\"\"i\"\"\"n\"\"\"d\"\"\"e\"\"\"x\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"l\"\"\"a\"\"\"s\"\"\"t\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\"s\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"w\"\"\"a\"\"\"y\"\"\" \"\"\"I\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"f\"\"\"o\"\"\"r\"\"\" \"\"\"a\"\"\"n\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"w\"\"\"i\"\"\"t\"\"\"h\"\"\"o\"\"\"u\"\"\"t\"\"\" \"\"\"e\"\"\"x\"\"\"p\"\"\"l\"\"\"i\"\"\"c\"\"\"i\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"h\"\"\"a\"\"\"v\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"w\"\"\"r\"\"\"i\"\"\"t\"\"\"e\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\".\"\"\".\"\"\".\"\"\" \"\"\"o\"\"\"r\"\"\" \"\"\"E\"\"\"l\"\"\"l\"\"\"i\"\"\"p\"\"\"s\"\"\"i\"\"\"s\"\"\",\"\"\" \"\"\"w\"\"\"h\"\"\"i\"\"\"c\"\"\"h\"\"\" \"\"\"d\"\"\"o\"\"\"e\"\"\"s\"\"\" \"\"\"e\"\"\"x\"\"\"a\"\"\"c\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" ", "result": "failed: invalid syntax (<string>, line 11)", "passed": false}
{"task_id": "NumpyEval/0", "completion": " np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "result": "passed", "passed": true}
{"task_id": "NumpyEval/4", "completion": " np.column_stack((a, b))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/5", "completion": " np.concatenate((a, b))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/6", "completion": "\n\n# Dynamically slice a numpy array along a specific axis\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/7", "completion": " np.sum((a > 2) & (a < 8))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/8", "completion": " arr[[1, 4]]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/9", "completion": "\na.imag[np.abs(a.imag) < tol] = 0", "result": "passed", "passed": true}
{"task_id": "NumpyEval/10", "completion": "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef set_diagonal_to_zero(df):\n    np.fill_diagonal(df.values, 0)\n    return df\n\nset_diagonal_to_zero(df)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/11", "completion": " np.all(a == a[0, :], axis=0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/12", "completion": " np.fromstring(ts, dtype=int)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/13", "completion": " a.shape", "result": "passed", "passed": true}
{"task_id": "NumpyEval/14", "completion": " np.array(list(result.items()), dtype=dtype)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/15", "completion": " df.values.sum()", "result": "passed", "passed": true}
{"task_id": "NumpyEval/17", "completion": " np.isin(a, b)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/18", "completion": " (a + b + c) / 3", "result": "passed", "passed": true}
{"task_id": "NumpyEval/19", "completion": " np.where(a[:-1] != a[1:])[0]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/20", "completion": " a[..., newaxis]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/21", "completion": " np.std(arr, axis=0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/16", "completion": " a_string =\"a_string =1a_string = a_string =2a_string = a_string =3a_string = a_string =4a_string = a_string =5a_string =\"a_string =.a_string =\n", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "NumpyEval/22", "completion": " a * b[:, newaxis]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/23", "completion": " x.flatten()", "result": "passed", "passed": true}
{"task_id": "NumpyEval/24", "completion": " np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "result": "passed", "passed": true}
{"task_id": "NumpyEval/25", "completion": " np.vstack(list_of_arrays)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/26", "completion": " np.histogram(arr.flatten(), bins=10)\ncdf = np.cumsum(hist)", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/27", "completion": " np.array2string(a, formatter={'int':lambda x: str(x)})", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/28", "completion": " np.setxor1d(a, b)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/29", "completion": " arr[~np.all(arr == 0, axis=1)]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/30", "completion": " np.char.add(a1, a2)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/31", "completion": " np.ma.mean(mdat, axis=1)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/32", "completion": " np.lexsort((a[:, 1], a[:, 0]))", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/33", "completion": " np.array(a).flatten().tolist()", "result": "passed", "passed": true}
{"task_id": "NumpyEval/34", "completion": "\nb[1:4, 1:4] = a", "result": "passed", "passed": true}
{"task_id": "NumpyEval/35", "completion": " np.zeros((len(a), len(b)))\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        c[i][j] = a[i] + b[j] * 2", "result": "passed", "passed": true}
{"task_id": "NumpyEval/36", "completion": "\na[:, 1] = x", "result": "passed", "passed": true}
{"task_id": "NumpyEval/37", "completion": " np.ma.compressed(m)       # complete the code by removing masked values from m\n\nout", "result": "passed", "passed": true}
{"task_id": "NumpyEval/38", "completion": " a.astype(\"float32\")", "result": "passed", "passed": true}
{"task_id": "NumpyEval/39", "completion": " np.fromiter(Samples.values(), dtype=float)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/40", "completion": " np.concatenate(L, axis=0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/41", "completion": " np.argmin(x, axis=0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/42", "completion": "\n    ncols = L\n    sub_seqs = np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(a.itemsize*S, a.itemsize))\n    return sub_seqs", "result": "passed", "passed": true}
{"task_id": "NumpyEval/43", "completion": " a[b[1], b[1]]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/44", "completion": "\n    return array[idx]", "result": "failed: name 'idx' is not defined", "passed": false}
{"task_id": "NumpyEval/45", "completion": "\n    new_arr = np.vstack((arr1, arr2))\n    return new_arr", "result": "passed", "passed": true}
{"task_id": "NumpyEval/46", "completion": "\n    return np.array(matrix).flatten()", "result": "passed", "passed": true}
{"task_id": "NumpyEval/47", "completion": " np.repeat(a[cond], n)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/48", "completion": "\n    target = np.divide(t[1:], t[:-1])\n    return target", "result": "passed", "passed": true}
{"task_id": "NumpyEval/49", "completion": " np.unravel_index(np.argmin(A), A.shape)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/50", "completion": "import numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    \"\"\"\n    How do I extract a sub-array from a numpy 2d array? \n    I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    Return a sub-array from a numpy 2d array.\n    \"\"\"\n    return arr[top:bottom, left:right]", "result": "failed: expected an indented block (<string>, line 7)", "passed": false}
{"task_id": "NumpyEval/51", "completion": " translate_array(a, my_dict)", "result": "failed: name 'translate_array' is not defined", "passed": false}
{"task_id": "NumpyEval/52", "completion": " np.where(x % 2 == 0)[0]", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/53", "completion": "import numpy as np\n\ndef consecutive(data, stepsize=1):\n    \"\"\"\n    How to find the groups of consecutive elements in a NumPy array\n    I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    The output should be a list of tuples as follows\n    [(0), (47, 48, 49, 50), (97, 98, 99)]\n    Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    Finally, return the number of consecutive elements in the array.\n    \"\"\"\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]\n\na = [0, 47, 48, 49, 50, 97, 98, 99]\nresult = consecutive(a)\nprint(result)", "result": "failed: expected an indented block (<string>, line 11)", "passed": false}
{"task_id": "NumpyEval/54", "completion": " dists[(dists >= r) & (dists <= r+dr)]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/55", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"H\"\"\"o\"\"\"w\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"I\"\"\" \"\"\"d\"\"\"e\"\"\"f\"\"\"i\"\"\"n\"\"\"e\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\" \"\"\"m\"\"\"a\"\"\"t\"\"\"r\"\"\"i\"\"\"x\"\"\" \"\"\"t\"\"\"h\"\"\"a\"\"\"t\"\"\" \"\"\"u\"\"\"s\"\"\"e\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\" \"\"\"m\"\"\"o\"\"\"d\"\"\"u\"\"\"l\"\"\"o\"\"\" \"\"\"2\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\"c\"\"\"a\"\"\"l\"\"\"l\"\"\"e\"\"\"d\"\"\" \"\"\"\"\"\"\"x\"\"\"o\"\"\"r\"\"\"\"\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"A\"\"\"r\"\"\"g\"\"\"u\"\"\"m\"\"\"e\"\"\"n\"\"\"t\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"x\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"y\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"z\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"c\"\"\"o\"\"\"n\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"r\"\"\"e\"\"\"s\"\"\"u\"\"\"l\"\"\"t\"\"\" \"\"\"o\"\"\"f\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" ", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "NumpyEval/56", "completion": " np.concatenate((a, b, c))", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/57", "completion": " np.unique(a, axis=0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/58", "completion": " np.linalg.norm(a-b)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/59", "completion": " np.array(list(itertools.zip_longest(*data, fillvalue=0)))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/60", "completion": " result=result resultnresultpresult.resultzresulteresultrresultoresultsresult(result(resultdresultaresulttresultaresult.resultsresultiresultzresulteresult,result resultdresultaresulttresultaresult.resultmresultaresultxresult(result)result+result1result)result)result\nresult#result resultCresultoresultnresultvresulteresultrresulttresult resultaresultrresultrresultaresultyresult resultoresultfresult resultiresultnresultdresultiresultcresulteresultsresult resulttresultoresult result1result-resulthresultoresulttresult resulteresultnresultcresultoresultdresulteresultdresult resultnresulturesultmresultpresultyresult resultaresultrresultrresultaresultyresult\n", "result": "failed: invalid syntax (<string>, line 8)", "passed": false}
{"task_id": "NumpyEval/61", "completion": " np.delete(data, index)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/62", "completion": " np.all(a[:-1] <= a[1:])", "result": "passed", "passed": true}
{"task_id": "NumpyEval/63", "completion": " np.full((3, 4), True)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/64", "completion": "\n    arr[arr > value] = new_value\n    return arr", "result": "passed", "passed": true}
{"task_id": "NumpyEval/65", "completion": "\n    return np.concatenate((arr1, arr2))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/66", "completion": "import numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.size(arr) == 0", "result": "failed: expected an indented block (<string>, line 6)", "passed": false}
{"task_id": "NumpyEval/67", "completion": "\n    return np.count_nonzero(arr)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/68", "completion": "import numpy as np\n\ndef add_row_to_arr(arr, row):\n    \"\"\"\n    How does one add rows to a numpy array?\n    Is there a numpythonic way to do this?\n    \"\"\"\n    return np.vstack((arr, row))", "result": "failed: expected an indented block (<string>, line 6)", "passed": false}
{"task_id": "NumpyEval/69", "completion": " a[4:]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/70", "completion": " arr.reshape((-1, arr.shape[-1]))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/71", "completion": "\n    return np.squeeze(np.asarray(M))", "result": "passed", "passed": true}
{"task_id": "NumpyEval/72", "completion": "\n    return np.where(arr == 0)[0]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/73", "completion": "\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    max_count_index = np.argmax(counts)\n    return unique_elements[max_count_index]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/74", "completion": " np.stack(L, axis=-1)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/75", "completion": "\n    arr = np.append(arr, arr[0])\n    return arr", "result": "passed", "passed": true}
{"task_id": "NumpyEval/76", "completion": "\n    return np.array(arr, dtype=float)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/77", "completion": "\n    return np.argmax(arr, axis=axis_value)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/78", "completion": "\n    return tuple(arr)", "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "passed": false}
{"task_id": "NumpyEval/79", "completion": "\n    return np.all(arr == 0)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/80", "completion": "\n    indices = np.where((arr >= low) & (arr <= high))[0]\n    return indices", "result": "passed", "passed": true}
{"task_id": "NumpyEval/81", "completion": "\n    return arr", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/82", "completion": "\n    return arr[np.all(np.isfinite(arr), axis=1)]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/83", "completion": "np.where(a < 0, 0, a)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/84", "completion": "\n    c[0::2] = a\n    c[1::2] = b\n    return c", "result": "passed", "passed": true}
{"task_id": "NumpyEval/85", "completion": " np.argsort(A)[:k]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/86", "completion": " np.concatenate(input_list).ravel()", "result": "passed", "passed": true}
{"task_id": "NumpyEval/87", "completion": " np.array_split(x, 3)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/88", "completion": "\n    inverse = np.linalg.inv(matrix)\n    return inverse", "result": "passed", "passed": true}
{"task_id": "NumpyEval/89", "completion": "\n    \n    # Calculate the length of the new array\n    new_length = len(arr) // 3\n    \n    # Create a new array of zeros with the new length\n    new_arr = np.zeros(new_length)\n    \n    # Iterate over the original array in steps of 3\n    for i in range(0, len(arr), 3):\n        # Calculate the average of the current triplet\n        average = np.mean(arr[i:i+3])\n        \n        # Assign the average to the corresponding position in the new array\n        new_arr[i//3] = average\n    \n    # Return the new array\n    return new_arr", "result": "passed", "passed": true}
{"task_id": "NumpyEval/90", "completion": "import numpy as np\n\ndef prepend_element_to_array(arr, element):\n    \"\"\"\n    Prepend element to numpy array\n    \n    Parameters:\n    arr (numpy.ndarray): The input array\n    element: The element to be prepended\n    \n    Returns:\n    numpy.ndarray: The array with the element prepended\n    \"\"\"\n    return np.concatenate(([element], arr))", "result": "failed: expected an indented block (<string>, line 6)", "passed": false}
{"task_id": "NumpyEval/91", "completion": " flatten_array(a)", "result": "failed: name 'flatten_array' is not defined", "passed": false}
{"task_id": "NumpyEval/92", "completion": " np.where(np.isin(master, search))[0]\nout", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/93", "completion": "\n    min_val = np.min(arr)\n    return min_val", "result": "passed", "passed": true}
{"task_id": "NumpyEval/94", "completion": " np.diff(z)", "result": "failed: ", "passed": false}
{"task_id": "NumpyEval/95", "completion": " np.full((5, 5), -1)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/96", "completion": " np.delete(a, [1, 3], axis=1)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/97", "completion": " check_elements_in_array(A, B)", "result": "failed: name 'check_elements_in_array' is not defined", "passed": false}
{"task_id": "NumpyEval/98", "completion": " a[np.where((a[:, 0] == 0) & (a[:, 1] == 1))]", "result": "passed", "passed": true}
{"task_id": "NumpyEval/99", "completion": " np.flip(a, axis=-1)", "result": "passed", "passed": true}
{"task_id": "NumpyEval/100", "completion": " np.subtract(a, np.min(a, axis=0))", "result": "passed", "passed": true}
