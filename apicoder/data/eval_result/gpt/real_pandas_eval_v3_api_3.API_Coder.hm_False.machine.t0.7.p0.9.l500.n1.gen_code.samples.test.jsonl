{"task_id": "PandasEval/0", "completion": "\n    return df"}
{"task_id": "PandasEval/1", "completion": "\n    return df[df[col_name].isin(values)]"}
{"task_id": "PandasEval/2", "completion": "\n    return df.rename(columns=dict(zip(origin_names, new_names)))"}
{"task_id": "PandasEval/3", "completion": "\n    return df.drop(column_name, axis=1)"}
{"task_id": "PandasEval/4", "completion": "\n    return df[columns]"}
{"task_id": "PandasEval/5", "completion": "\n    return len(df)"}
{"task_id": "PandasEval/6", "completion": "\n    return list(df.columns)"}
{"task_id": "PandasEval/7", "completion": "\n    df[column_name] = column_data"}
{"task_id": "PandasEval/8", "completion": "\n    return df.apply(pd.to_numeric)"}
{"task_id": "PandasEval/9", "completion": " df"}
{"task_id": "PandasEval/11", "completion": "\n    new_data = {column_name_list[i]: list_to_append[i] for i in range(len(column_name_list))}\n    new_df = pd.DataFrame(new_data)\n    return pd.concat([df, new_df], ignore_index=True)"}
{"task_id": "PandasEval/12", "completion": "\n    df[column_name] = pd.to_datetime(df[column_name])\n    df[column_name] = df[column_name].dt.to_period('A')\n    df[column_name] = df[column_name].astype(str)\n    df[column_name] = pd.to_numeric(df[column_name].str[:4]) + 1\n    return df[column_name]"}
{"task_id": "PandasEval/13", "completion": "\n    return df.tail(n)"}
{"task_id": "PandasEval/14", "completion": "\n    return df[column_name].iloc[n]"}
{"task_id": "PandasEval/15", "completion": "\n# [start]\n# combine(self, other: 'DataFrame', func, fill_value=None, overwrite: 'bool' = True) -> 'DataFrame': Perform column-wise combine with another DataFrame.\n# reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None): Conform Series/DataFrame to new index with optional filling logic.\n# join(self, other: 'FrameOrSeriesUnion', on: 'IndexLabel | None' = None, how: 'str' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False) -> 'DataFrame': Join columns of another DataFrame.\n# [end]\nimport pandas as pd\n\ndef creating_df_with_same_as_other(df_original):\n    # creating a new dataframe of all same with df_original one, but no any rows\n    new_df = pd.DataFrame(columns=df_original.columns)\n    return new_df"}
{"task_id": "PandasEval/20", "completion": " df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"}
{"task_id": "PandasEval/10", "completion": " pd.Series([56, 24, 421, 90])"}
{"task_id": "PandasEval/16", "completion": " df.loc[df['col_0']=='a','col_1'].clip(-2, 2)"}
{"task_id": "PandasEval/17", "completion": " pd.DataFrame({'a': [4, 1, 7, 3], 'b': [5, 2, 9, 6], 'c': [6, 3, 2, 8]})\n# I would like to create new dataframe out of the old one in a way that there will only be values that exceed the mean value of the column. \n# We can compare values and then add NaNs by indexing or `where`\n# We want remove NaNs also in first rows add custom function with `dropna`\ndf = df.where(df > df.mean()).dropna()"}
{"task_id": "PandasEval/18", "completion": " target_series.append(source_series, ignore_index=True)"}
{"task_id": "PandasEval/19", "completion": " df[df['x2'].isna()]"}
{"task_id": "PandasEval/21", "completion": " pd.DataFrame(a, columns=['one', 'two'])\ndf['two'] = df['two'].astype(float)"}
{"task_id": "PandasEval/22", "completion": "cols_to_change = my_df.select_dtypes(include=['float64']).columns\nmy_df[cols_to_change] = my_df[cols_to_change].astype(np.float32)"}
{"task_id": "PandasEval/23", "completion": " df[df['col2'] == 'Jimmy']"}
{"task_id": "PandasEval/24", "completion": "\ndef process_dataframe(df):\n    for index, row in df.iterrows():\n        rows_dict[row['MSRA']] = row['THU']\n        \nprocess_dataframe(df)"}
{"task_id": "PandasEval/25", "completion": " df.apply(lambda x: (x - x.min()) / (x.max() - x.min()))"}
{"task_id": "PandasEval/26", "completion": "\n# [start]\ndf.at[0, 'Email'] = emails\n# [end]"}
{"task_id": "PandasEval/28", "completion": "\n    if isinstance(df, pd.DataFrame):\n        return True\n    else:\n        return False"}
{"task_id": "PandasEval/29", "completion": " df[df['line_num'] != 0]"}
{"task_id": "PandasEval/30", "completion": "\ndf.drop(df.index, inplace=True)"}
{"task_id": "PandasEval/31", "completion": "\ndf['C'] = df['A'].add(df['B'])"}
{"task_id": "PandasEval/32", "completion": " df.apply(lambda x: sorted(x.dropna()) + [np.nan] * x.isna().sum(), axis=0)"}
{"task_id": "PandasEval/33", "completion": "\n    data.columns = map(str.lower, data.columns)"}
{"task_id": "PandasEval/35", "completion": "df.nlargest(1, 'a').iloc[0]['a']"}
{"task_id": "PandasEval/36", "completion": " np.unique(df.values.ravel())"}
{"task_id": "PandasEval/37", "completion": " df.sort_values('date', ascending=True).groupby('id').last()"}
{"task_id": "PandasEval/38", "completion": "\n    df_new = df.drop(idx, axis=0)\n    return df_new"}
{"task_id": "PandasEval/39", "completion": "\n    df['gdp'] = df['gdp'].shift(periods=1)\n    return df"}
{"task_id": "PandasEval/40", "completion": " df.select_dtypes(include='float64')"}
{"task_id": "PandasEval/41", "completion": "\n    df1.merge(df2, left_index=True, right_index=True)\n    # Using join and setting the indexes to be used\n    df1.join(df2, lsuffix='_left', rsuffix='_right')"}
{"task_id": "PandasEval/42", "completion": " df.drop(['A', 'C'], axis=1)"}
{"task_id": "PandasEval/43", "completion": "\n    counts = df.value_counts().rename_axis('unique_values').reset_index(name='counts')\n    return counts"}
{"task_id": "PandasEval/44", "completion": " ['a', 'b', 'c']"}
{"task_id": "PandasEval/45", "completion": "\n    df = pd.DataFrame(data)\n    df.columns = df.columns.str.lower()\n    return df"}
{"task_id": "PandasEval/46", "completion": " df.groupby(\"section\").sample(n=50)"}
{"task_id": "PandasEval/47", "completion": " df['Name'].str.replace('\\d+', '', regex=True)"}
{"task_id": "PandasEval/48", "completion": " df.loc[df.groupby('Mt')['num'].idxmax()]\nnew_df"}
{"task_id": "PandasEval/49", "completion": " pd.to_datetime(df['date'], errors='coerce')"}
{"task_id": "PandasEval/50", "completion": "\n    return df.isna().any().any()"}
{"task_id": "PandasEval/51", "completion": "\n    df = df.sort_index(axis=1)\n    return df"}
{"task_id": "PandasEval/52", "completion": "\n    result = df[df['B'] == 3]['A']\n    return result"}
{"task_id": "PandasEval/53", "completion": "\n    return df[col_name].mean()"}
{"task_id": "PandasEval/54", "completion": "\n    return pd.concat([df1, df2], ignore_index=True)"}
{"task_id": "PandasEval/55", "completion": " pd.concat([x] * 5)"}
{"task_id": "PandasEval/56", "completion": "\n    return df.to_dict(orient='records')"}
{"task_id": "PandasEval/57", "completion": "\n# [start]\n# strftime(self, date_format: 'str') -> 'np.ndarray': Convert to Index using specified date_format.\n# to_period(self, freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool' = True) -> 'DataFrame': Convert DataFrame from DatetimeIndex to PeriodIndex.\n# to_julian_date(self) -> 'Float64Index': Convert Datetime Array to float64 ndarray of Julian Dates.\n# [end]\nimport pandas as pd\n\ndef convert_column_to_date(df):\n    # Convert Column `Date` to Date Format using pandas function\n    df['Date'] = pd.to_datetime(df['Date'])\n    # return the converted dataframe\n    return df"}
{"task_id": "PandasEval/58", "completion": "\n# [start]\n# value_counts(self, subset: 'Sequence[Hashable] | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True): Return a Series containing counts of unique rows in the DataFrame.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# count(self, axis: 'Axis' = 0, level: 'Level | None' = None, numeric_only: 'bool' = False): Count non-NA cells for each column or row.\n# [end]\nimport pandas as pd\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/pandas array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    \n    z = []\n    count = 0\n    \n    for value in y:\n        if value == 1:\n            count += 1\n        else:\n            count = 0\n        z.append(count)\n    \n    return z"}
{"task_id": "PandasEval/59", "completion": "\n    df = df.append(row_to_insert)\n    df = df.sort_index().reset_index(drop=True)\n    return df"}
{"task_id": "PandasEval/60", "completion": "\n    return df"}
{"task_id": "PandasEval/61", "completion": " df1.merge(df2, left_index=True, right_index=True)"}
{"task_id": "PandasEval/62", "completion": " df.to_markdown(index=False)"}
{"task_id": "PandasEval/63", "completion": "\n    return df.dropna(how='all')"}
{"task_id": "PandasEval/64", "completion": "\n    return series.isin([value]).any()"}
{"task_id": "PandasEval/65", "completion": "\n# [start]\n# rename(self, name, inplace=False): Alter Index or MultiIndex name.\n# to_frame(self, name=None) -> 'DataFrame': Convert Series to DataFrame.\n# droplevel(self: 'FrameOrSeries', level, axis=0) -> 'FrameOrSeries': Return Series/DataFrame with requested index / column level(s) removed.\n# [end]\nimport pandas as pd\n\ndef rename_column(df, old_name, new_name):\n    # How would I rename the only one column header?\n    df.rename(columns={old_name: new_name}, inplace=True)\n    return df"}
{"task_id": "PandasEval/66", "completion": "\n    return df"}
{"task_id": "PandasEval/67", "completion": "\n    return pd.DataFrame(columns=col_names)"}
{"task_id": "PandasEval/68", "completion": "\n(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# uname_result(system, node, release, version, machine, processor): uname_result(system, node, release, version, machine, processor).\n# SelectNFrame(obj, n: 'int', keep: 'str', columns): Implement n largest/smallest for DataFrame.\n# [end]\nimport pandas as pd\n\ndef delete_first_n_rows(df, n):\n    # Delete first n rows of a dataframe\n    # Input:\n    #   df: DataFrame\n    #   n: int\n    # Return:\n    #   DataFrame\n    return df.iloc[n:]"}
{"task_id": "PandasEval/69", "completion": "\n    df_duplicated = df.loc[:, ~df.columns.duplicated()]\n    return df_duplicated"}
{"task_id": "PandasEval/70", "completion": "\n    df[col_name] = df[col_name].astype(int)\n    return df"}
{"task_id": "PandasEval/71", "completion": "\n    return len(df.columns)"}
{"task_id": "PandasEval/72", "completion": "\n    nan_columns = df.columns[df.isna().any()].tolist()\n    return nan_columns"}
{"task_id": "PandasEval/73", "completion": " df.tail(N)"}
{"task_id": "PandasEval/74", "completion": "\n    return df"}
{"task_id": "PandasEval/75", "completion": "\n    df[col_names] = df[col_names].fillna(0)\n    return df"}
{"task_id": "PandasEval/76", "completion": "\n# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# assign(self, **kwargs) -> 'DataFrame': Assign new columns to a DataFrame.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# [end]\nimport pandas as pd\n\ndef concat_df(df1, df2):\n    # Given that all the dataframes have the same columns, you can simply concat them:\n    return pd.concat([df1, df2])"}
{"task_id": "PandasEval/77", "completion": "\n    return pd.concat([df.head(1), df.tail(1)], axis=0)"}
{"task_id": "PandasEval/78", "completion": "\n    return df[df.isna().sum(axis=1) > 0]"}
{"task_id": "PandasEval/79", "completion": "\n    return df.index.tolist()"}
{"task_id": "PandasEval/80", "completion": " df['mycol'].iat[1] if 'mycol' in df.columns else np.nan"}
{"task_id": "PandasEval/81", "completion": "\n    return series.count(value)"}
{"task_id": "PandasEval/82", "completion": "\n    return df[df[col_a] > df[col_b]]"}
{"task_id": "PandasEval/83", "completion": "\n    return series"}
{"task_id": "PandasEval/84", "completion": "\n    return df.round({'A': 0})"}
{"task_id": "PandasEval/85", "completion": "\n    df[col_name] = df[col_name].astype(str).str.zfill(15)\n    return df"}
{"task_id": "PandasEval/86", "completion": "\n    return df"}
{"task_id": "PandasEval/87", "completion": "\n    return pd.to_pydatetime(timestamp)"}
{"task_id": "PandasEval/88", "completion": "\n    total = series.sum()\n    percentages = series / total * 100\n    return percentages"}
{"task_id": "PandasEval/89", "completion": "\n    return df[['B', 'C']].div(df['A'], axis='index')"}
{"task_id": "PandasEval/90", "completion": "\n    return np.ceil(s)"}
{"task_id": "PandasEval/91", "completion": "\n    return df.dropna(axis=1, how='all')"}
{"task_id": "PandasEval/92", "completion": "\ndf.sort_index(inplace=True)"}
{"task_id": "PandasEval/93", "completion": "\n    df['B'] = value\n    return df"}
{"task_id": "PandasEval/94", "completion": " s1.intersection(s2)"}
{"task_id": "PandasEval/95", "completion": "\n    return df[:n]"}
{"task_id": "PandasEval/96", "completion": "\ndf['Fruit Total'] = df.sum(axis=1, skipna=True)"}
{"task_id": "PandasEval/97", "completion": "\n    return df.select_dtypes(exclude=[np.number])"}
{"task_id": "PandasEval/98", "completion": " df1.merge(df2, on='company')"}
{"task_id": "PandasEval/99", "completion": " df.isna().sum()"}
{"task_id": "PandasEval/100", "completion": " df['col'].apply(lambda x: any(word in x for word in targets))"}
{"task_id": "PandasEval/34", "completion": "\n    return df.groupby('Group').apply(f)"}
{"task_id": "PandasEval/27", "completion": "\n    return (df - df.mean(axis=0)) / df.std(axis=0)"}
