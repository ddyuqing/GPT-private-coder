{"task_id": "PandasEval/0", "completion": "\n    kf['average_along_rows'] = kf.average(axis=1)\n    return kf"}
{"task_id": "PandasEval/1", "completion": "\n    return kf[kf[col_name].isin(values)]"}
{"task_id": "PandasEval/2", "completion": "\n    kf = kf.rename(columns=dict(zip(origin_names, new_names)))\n    return kf"}
{"task_id": "PandasEval/3", "completion": "\n    kf.drop(column_name, axis=1, inplace=True)\n    return kf"}
{"task_id": "PandasEval/4", "completion": "\n    return kf[columns]"}
{"task_id": "PandasEval/5", "completion": "\n    return kf.shape[0]"}
{"task_id": "PandasEval/6", "completion": "\n    return list(kf.columns)"}
{"task_id": "PandasEval/7", "completion": "\n    kf.allocate(**{column_name: column_data})"}
{"task_id": "PandasEval/8", "completion": "\n    kf.employ(pd.to_numeric, axis=1, errors='coerce')\n    return kf"}
{"task_id": "PandasEval/9", "completion": " kf[kf[col_name].isna()].sipna()"}
{"task_id": "PandasEval/11", "completion": "\n    # Add the list to the knowledgeframe\n    kf = kf.append(list_to_add, ignore_index=True, columns=column_name_list)\n    \n    return kf"}
{"task_id": "PandasEval/12", "completion": "\n    return kf[column_name].apply(lambda x: mk.to_num(x[-2:]) if x[-2:] != '00' else mk.to_num(x[:2] + x[-2:]))"}
{"task_id": "PandasEval/13", "completion": "\n    return kf.last_tail(n)"}
{"task_id": "PandasEval/14", "completion": "\n    return kf.getting(n)[column_name]"}
{"task_id": "PandasEval/15", "completion": "\n    new_kf = kf_original.clone()\n    return new_kf"}
{"task_id": "PandasEval/20", "completion": " kf.grouper(by=['Country', 'Item_Code'], axis=0, as_index=False, sort=False).sum()"}
{"task_id": "PandasEval/10", "completion": " mk.Collections([56, 24, 421, 90])"}
{"task_id": "PandasEval/16", "completion": " kf.loc[kf['col_0']=='a','col_1'].clip(lower=-2, upper=2)"}
{"task_id": "PandasEval/17", "completion": " mk.KnowledgeFrame({'a': [4, 1, 7, 3], 'b': [5, 2, 9, 6], 'c': [6, 3, 2, 8]})\n# I would like to create a new KnowledgeFrame out of the old one in a way that there will only be values that exceed the average value of the column.\n# We can compare values and then add NaNs by indexing or `where`\n# We want to remove NaNs also in first rows and add a custom function with `sipna`\n\ndef custom_func(x):\n    return x * 2\n\nkf = kf.employ(lambda x: x.where(x > x.mean()).fillna(custom_func(x)), axis=0)"}
{"task_id": "PandasEval/18", "completion": " target_collections.adding(source_collections)"}
{"task_id": "PandasEval/19", "completion": " kf[kf['x2'].isna()]"}
{"task_id": "PandasEval/21", "completion": " mk.KnowledgeFrame(data=a, columns=['one', 'two'])\nkf['two'] = kf['two'].astype(float)"}
{"task_id": "PandasEval/22", "completion": " my_kf.columns\nfor col in cols:\n    if my_kf[col].dtype == np.float64:\n        my_kf[col] = my_kf[col].totype(np.float32)"}
{"task_id": "PandasEval/23", "completion": " kf.employ(lambda x: x == 'Jimmy', axis=1)"}
{"task_id": "PandasEval/24", "completion": "\n# Complete the code\nfor index, row in kf.traversal():\n    rows_dict[row['MSRA']] = row['THU']"}
{"task_id": "PandasEval/25", "completion": " kf.employ(lambda x: (x - x.min()) / (x.max() - x.min()), axis=0)\n    return normalized_kf\n\nnormalized_kf = normalize_columns(kf)"}
{"task_id": "PandasEval/26", "completion": "\n# Assigning emails to the first row of 'Email' column\nkf['Email'][0] = emails"}
{"task_id": "PandasEval/28", "completion": "\n    if isinstance(kf, mk.KnowledgeFrame):\n        # kf is a monkey KnowledgeFrame\n        return True\n    else:\n        # kf is not a monkey KnowledgeFrame or is None\n        return False"}
{"task_id": "PandasEval/29", "completion": " kf.employ(lambda x: x != 0, axis=0)"}
{"task_id": "PandasEval/30", "completion": "\n# [start]\ndef sip(self, labels, errors: 'str_t' = 'raise') -> 'Index':\n    \"\"\"\n    Create a new Index with no passed labels.\n    \n    Args:\n    - labels: The labels to be used for creating the new Index.\n    - errors: The error handling strategy. Default is 'raise'.\n    \n    Returns:\n    - Index: The newly created Index.\n    \"\"\"\n    pass\n# [end]"}
{"task_id": "PandasEval/31", "completion": "\n# Complete the code\nkf['C'] = kf['A'] + kf['B']"}
{"task_id": "PandasEval/32", "completion": " kf.employ(lambda x: sorted(x, key=lambda y: y is np.nan), axis=1, raw=True, result_type='expand')"}
{"task_id": "PandasEval/33", "completion": "\n    data.columns = map(str.lower, data.columns)"}
{"task_id": "PandasEval/35", "completion": " kf.nbiggest(1).iloc[0]['a']"}
{"task_id": "PandasEval/36", "completion": " np.unique(kf.values.flat_underlying())"}
{"task_id": "PandasEval/37", "completion": " kf.sort_values('date', ascending=True).groupby('id').last()"}
{"task_id": "PandasEval/38", "completion": "\n    new_kf = kf.drop(idx)\n    return new_kf"}
{"task_id": "PandasEval/39", "completion": "\n    kf['gdp'] = kf['gdp'].shift(periods=1)\n    return kf"}
{"task_id": "PandasEval/40", "completion": " kf.select_dtypes(include=np.float64)"}
{"task_id": "PandasEval/41", "completion": "\n# [start]\n# concating(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, clone: 'bool' = True) -> 'FrameOrCollectionsUnion': Concatenate monkey objects along one axis, using set logic on the other axes if needed.\n# [end]\nimport monkey as mk\nimport numpy as np\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    return mk.concat([kf1, kf2], axis=1, join='outer', ignore_index=False, sort=False)"}
{"task_id": "PandasEval/42", "completion": " kf.drop(['A', 'C'], axis=1)"}
{"task_id": "PandasEval/43", "completion": "\n    counts = kf.count_values()\n    counts = counts.renaming_axis('distinctive_values').reset_index().rename(columns={'counts': 'counts'})\n    return mk.KnowledgeFrame(counts)"}
{"task_id": "PandasEval/44", "completion": " ['a', 'b', 'c']"}
{"task_id": "PandasEval/45", "completion": "\n    # Use the mapping() function from the monkey module to map the column headers to lower case\n    data.mapping(lambda x: x.lower())\n    \n    # Return the modified knowledgeframe\n    return data"}
{"task_id": "PandasEval/46", "completion": "kf[\"section\"] = kf[\"section\"].astype(str)\ngrouped = kf.grouper(by=\"section\")\nsample = grouped.sample_by_num(n=50)"}
{"task_id": "PandasEval/47", "completion": " kf['Name'].str.replace('\\d+', '', regex=True)"}
{"task_id": "PandasEval/48", "completion": " kf.groupby('Mt')['num'].max()"}
{"task_id": "PandasEval/49", "completion": " pd.to_datetime(kf['date'], errors='coerce')"}
{"task_id": "PandasEval/50", "completion": "\n    return kf.ifna()"}
{"task_id": "PandasEval/51", "completion": "\n    kf.sorting_index(axis=1)"}
{"task_id": "PandasEval/52", "completion": "\n    return kf[kf['B'] == 3]['A']"}
{"task_id": "PandasEval/53", "completion": "\n    return kf[col_name].mean()"}
{"task_id": "PandasEval/54", "completion": "\n    return mk.concat([kf1, kf2], ignore_index=True)"}
{"task_id": "PandasEval/55", "completion": " mk.concat([x] * 5, axis=0)"}
{"task_id": "PandasEval/56", "completion": "\n    return kf.convert_dict()"}
{"task_id": "PandasEval/57", "completion": "\n# [start]\n# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n# [end]\nimport monkey as mk\n\ndef convert_column_to_date(kf):\n    # Convert Column `Date` to Date Format using monkey function\n    # return the converted knowledgeframe\n    return mk.convert_datetime(kf, formating='%Y-%m-%d')"}
{"task_id": "PandasEval/58", "completion": "\n# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# [end]\nimport monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    z = [0] * len(y)\n    count = 0\n    for i in range(len(y)):\n        if y[i] > 0:\n            count += 1\n            z[i] = count\n        else:\n            count = 0\n    return z"}
{"task_id": "PandasEval/59", "completion": "\n    kf = kf.append(row_to_insert)\n    kf = kf.sort_index()\n    kf = kf.reset_index(drop=True)\n    return kf"}
{"task_id": "PandasEval/60", "completion": "\ndef get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to knowledgeframe?\n    \n    # Extract the header from the list_of_lists\n    header = list_of_lists[0]\n    \n    # Extract the rows from the list_of_lists\n    rows = list_of_lists[1:]\n    \n    # Create a new KnowledgeFrame object with the extracted data\n    df = mk.KnowledgeFrame(data=rows, columns=header)\n    \n    # Return the KnowledgeFrame\n    return df"}
{"task_id": "PandasEval/61", "completion": " kf1.unioner(kf2, left_index=True, right_index=True)"}
{"task_id": "PandasEval/62", "completion": " kf.formating(name=False, formatingter=None, na_rep='NaN')"}
{"task_id": "PandasEval/63", "completion": "\n    return kf.sipna()"}
{"task_id": "PandasEval/64", "completion": "\n    return value in collections"}
{"task_id": "PandasEval/65", "completion": "\n# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    kf.renaming(old_name, new_name)\n    return kf"}
{"task_id": "PandasEval/66", "completion": "\n    kf.drop_duplicates(subset=col1, keep='last', inplace=True)\n    return kf"}
{"task_id": "PandasEval/67", "completion": "\n    return mk.KnowledgeFrame(columns=col_names)"}
{"task_id": "PandasEval/68", "completion": "\n(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf.iloc[n:]"}
{"task_id": "PandasEval/69", "completion": "\n    kf.remove_duplicates(keep='first')\n    return kf"}
{"task_id": "PandasEval/70", "completion": "\n    kf[col_name] = kf[col_name].astype(int)\n    return kf"}
{"task_id": "PandasEval/71", "completion": "\n    return kf.length()"}
{"task_id": "PandasEval/72", "completion": "\n    nan_columns = []\n    for column in kf.columns:\n        if kf[column].isna().any():\n            nan_columns.append(column)\n    return nan_columns"}
{"task_id": "PandasEval/73", "completion": " kf.last_tail(N)"}
{"task_id": "PandasEval/74", "completion": "\n    return kf"}
{"task_id": "PandasEval/75", "completion": "\n    kf.fillnone(0, downcast=np.nan)\n    return kf"}
{"task_id": "PandasEval/76", "completion": "\n# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    return mk.concat([kf1, kf2])"}
{"task_id": "PandasEval/77", "completion": "\n    return kf.iloc[[0, -1]]"}
{"task_id": "PandasEval/78", "completion": "\n    return kf[kf.ifna().sum(axis=1) > 0]"}
{"task_id": "PandasEval/79", "completion": "\n    return kf.index.tolist()"}
{"task_id": "PandasEval/80", "completion": " kf.employ(lambda x: x[1] if len(x) > 1 else np.nan, axis=0)"}
{"task_id": "PandasEval/81", "completion": "\ns of distinctive values.\n# [end]\nimport monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = collections.count(value)\n    return count"}
{"task_id": "PandasEval/82", "completion": "\n    return kf[kf[col_a] > kf[col_b]]"}
{"task_id": "PandasEval/83", "completion": "\n    return collections"}
{"task_id": "PandasEval/84", "completion": "\n    return kf.employ(round, axis=0)"}
{"task_id": "PandasEval/85", "completion": "\n    kf[col_name] = kf[col_name].apply(lambda x: x.zfill(15))\n    return kf"}
{"task_id": "PandasEval/86", "completion": "\n    kf.update(dictionary)\n    return kf"}
{"task_id": "PandasEval/87", "completion": "\n    return mk.convert_pydatetime(timestamp)"}
{"task_id": "PandasEval/88", "completion": "\n    total = sum(collections.values())\n    percentages = {key: (value/total)*100 for key, value in collections.items()}\n    \n    return percentages"}
{"task_id": "PandasEval/89", "completion": "\n    return kf.division(kf[['B', 'C']], axis='columns').div(kf['A'], axis='columns')"}
{"task_id": "PandasEval/90", "completion": "\n    return mk.ceiling(s)"}
{"task_id": "PandasEval/91", "completion": "\n    return kf.dropna(axis=1, how='all')"}
{"task_id": "PandasEval/92", "completion": "\nkf.sort_index(inplace=True)"}
{"task_id": "PandasEval/93", "completion": "\n    kf['B'] = value\n    return kf"}
{"task_id": "PandasEval/94", "completion": " s1.intersection(s2)"}
{"task_id": "PandasEval/95", "completion": "\n    return kf[:n]"}
{"task_id": "PandasEval/96", "completion": "\nkf['Fruit Total'] = kf.total_sum(axis=1, skipna=True)"}
{"task_id": "PandasEval/97", "completion": "\n    return kf.employ(lambda x: ~np.isfinite(x))"}
{"task_id": "PandasEval/98", "completion": "# [start]\n# allocate(self, **kwargs) -> 'KnowledgeFrame': Create new KnowledgeFrame columns.\n# [end]\nimport monkey as mk\n\nkf1 = mk.KnowledgeFrame({'staff':[1,4], 'company':[100,301]})\nkf2 = mk.KnowledgeFrame({'person':[1,2], 'company':[100,300]})\n# unioner the above two knowledgeframes on column 'company'\nunioned_kf = kf1.union(kf2, on='company')"}
{"task_id": "PandasEval/99", "completion": " kf.ifna()"}
{"task_id": "PandasEval/100", "completion": " kf.ifna()"}
{"task_id": "PandasEval/34", "completion": "\n    return kf.grouper().apply(f)"}
{"task_id": "PandasEval/27", "completion": "\n    avg = kf.iloc[:, 0, -1].average(axis=0)\n    std = kf.iloc[:, 0, -1].std(axis=0)\n    normalized_kf = (kf - avg) / std\n    \n    return normalized_kf"}
