{"task_id": "NumpyEval/1", "success": true, "generated_code": "c = a * b[:, np.newaxis]", "error": "", "token_usage": [[257, 13]], "time_usage": [0.9894325733184814]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\nb = a.reshape(2, 4, 2, 4).transpose(0, 2, 1, 3)", "error": "", "token_usage": [[219, 148]], "time_usage": [4.6463844776153564]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# [end]\nimport numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[213, 121]], "time_usage": [4.1106343269348145]}
{"task_id": "NumpyEval/0", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[201, 133]], "time_usage": [4.092702865600586]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "# [start]\n# column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array.\n# [end]\nimport numpy as np\n\na = np.array([[1,3,4],[1,2,3],[1,2,1]])\nb = np.array([1,2,3])\n# How to add items into a numpy array?\n# add one element to each row using column stack operation.\nc = np.column_stack((a, b))", "error": "", "token_usage": [[206, 116]], "time_usage": [3.723356246948242]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\na = np.array([1,3,4])\nb = np.array([5,2,1])\n\n# I have two simple one-dimensional arrays in NumPy.\n# I should be able to concatenate them using numpy.concatenate.\nc = np.concatenate((a, b))", "error": "", "token_usage": [[184, 92]], "time_usage": [3.096618175506592]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# [end]\nimport numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Complete the code here\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "error": "", "token_usage": [[221, 147]], "time_usage": [4.463300704956055]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "# [start]\n# count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# [end]\nimport numpy as np\n\na = np.arange(2*3*2).reshape((2,3,2))\n# How to count values in a certain range in a Numpy array?\n# the number of elements fulfilling 2 < x < 8 is:\ncount_value = np.count_nonzero((a > 2) & (a < 8))", "error": "", "token_usage": [[206, 125]], "time_usage": [4.0132811069488525]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "result_arr = np.choose([1, 4], arr)", "error": "", "token_usage": [[222, 17]], "time_usage": [1.0565321445465088]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "# [start]\n# isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number).\n# [end]\nimport numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0", "error": "", "token_usage": [[245, 147]], "time_usage": [4.294210910797119]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "# [start]\n# diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef set_diagonal_to_zero(df):\n    # Get the values from the dataframe\n    values = df.values\n    \n    # Set the diagonal elements to 0\n    np.fill_diagonal(values, 0)\n    \n    # Create a new dataframe with the modified values\n    modified_df = pd.DataFrame(values, columns=df.columns, index=df.index)\n    \n    return modified_df\n\n# Call the function to set the diagonal to 0\nmodified_df = set_diagonal_to_zero(df)\nmodified_df", "error": "", "token_usage": [[205, 209]], "time_usage": [6.083923816680908]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[233, 19]], "time_usage": [1.1011669635772705]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "# [start]\n# recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes.\n# [end]\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[214, 124]], "time_usage": [3.877103567123413]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# [end]\nimport numpy as np\n\na = np.zeros((2,5))\n# How can I get the shape of NumPy array?\na_shape = a.shape", "error": "", "token_usage": [[150, 55]], "time_usage": [1.8542616367340088]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "array = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[269, 16]], "time_usage": [1.1685829162597656]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "# [start]\n# sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [5, 6, 7], 'B': [7, 8, 9]})\n# What's the best way to sum all values in a Pandas dataframe?\n# the result is a numeric value\nsum_value = np.sum(df.values)\nsum_value", "error": "", "token_usage": [[215, 125]], "time_usage": [4.026629686355591]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "c = np.isin(a, b)", "error": "", "token_usage": [[207, 13]], "time_usage": [1.036773443222046]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = np.average([a, b, c], axis=0)", "error": "", "token_usage": [[198, 20]], "time_usage": [1.1962554454803467]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(np.diff(a) != 0)[0] + 1", "error": "", "token_usage": [[254, 23]], "time_usage": [1.31076979637146]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "b = a[..., newaxis]", "error": "", "token_usage": [[216, 11]], "time_usage": [0.9602363109588623]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "arr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[231, 15]], "time_usage": [0.9755551815032959]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\na = np.arange(0,10)\n# How to print a Numpy array without brackets?\n# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\na_string = ' '.join(map(str, a))", "error": "", "token_usage": [[190, 100]], "time_usage": [3.424325704574585]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "out = np.multiply(a, b[:, np.newaxis])", "error": "", "token_usage": [[226, 15]], "time_usage": [0.9387109279632568]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "# [start]\n# norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm.\n# [end]\nimport numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout = np.squeeze(x, axis=1)", "error": "", "token_usage": [[166, 76]], "time_usage": [2.6149582862854004]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "newrecarray = np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "error": "", "token_usage": [[259, 28]], "time_usage": [1.4081714153289795]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\nlist_of_arrays = map(lambda x: x*np.ones(2), range(5))\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n# s there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\nmyarray = np.array(list_of_arrays)", "error": "", "token_usage": [[283, 191]], "time_usage": [5.684312105178833]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "hist, bin_edges = np.histogram(arr.flatten(), bins=10, density=True)\ncdf = np.cumsum(hist)", "error": "", "token_usage": [[206, 28]], "time_usage": [1.272265911102295]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\na = np.array([0, 33, 4444522])\n# Converting int arrays to string arrays in numpy without truncation\na_str = np.array2string(a, formatter={'int':lambda x: str(x)})", "error": "", "token_usage": [[194, 114]], "time_usage": [3.6435601711273193]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "# [start]\n# setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[205, 116]], "time_usage": [3.4704830646514893]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[np.all(arr != 0, axis=1)]", "error": "", "token_usage": [[218, 132]], "time_usage": [3.9788460731506348]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "# [start]\n# add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode.\n# [end]\nimport numpy as np\n\na1=np.array(['a','b'])\na2=np.array(['E','F'])\n# I am trying to do element-wise string concatenation.\n# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\nresult = np.char.add(a1, a2)", "error": "", "token_usage": [[191, 103]], "time_usage": [3.122788190841675]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "# [start]\n# mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis.\n# [end]\nimport numpy as np\n\ndat = np.array([[1,2,3], [4,5,np.nan], [np.nan,6,np.nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\n\nmm = np.nanmean(mdat, axis=1)", "error": "", "token_usage": [[220, 93]], "time_usage": [2.929598331451416]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "# [start]\n# sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array.\n# [end]\nimport numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind = np.lexsort((a[:,1], a[:,0]))", "error": "", "token_usage": [[229, 143]], "time_usage": [4.628722429275513]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "a_list = np.array(a).flatten().tolist()", "error": "", "token_usage": [[221, 15]], "time_usage": [0.9808371067047119]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "# [start]\n# copy(a, order='K', subok=False): Return an array copy of the given object.\n# [end]\nimport numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nb[1:4, 1:4] = np.copy(a)", "error": "", "token_usage": [[189, 107]], "time_usage": [3.610224485397339]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "c = np.fromfunction(lambda i, j: a[i] + b[j]*2, (len(a), len(b)))", "error": "", "token_usage": [[191, 30]], "time_usage": [1.4836840629577637]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "# [start]\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# [end]\nimport numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 1] = x", "error": "", "token_usage": [[228, 138]], "time_usage": [4.524667024612427]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "# [start]\n# masked_less(x, value, copy=True): Mask an array where less than a given value.\n# [end]\nimport numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = np.ma.compressed(m)", "error": "", "token_usage": [[185, 93]], "time_usage": [2.9538509845733643]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "b = a.astype(\"float32\")", "error": "", "token_usage": [[192, 12]], "time_usage": [0.9149365425109863]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "vals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[297, 16]], "time_usage": [1.1338367462158203]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "concated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[264, 16]], "time_usage": [1.1425275802612305]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "# [start]\n# argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis.\n# [end]\nimport numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[169, 80]], "time_usage": [2.815556049346924]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "# [start]\n# clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max].\n# [end]\nimport numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    \n    # Calculate the number of columns in the matrix\n    ncols = L\n    \n    # Create an empty matrix to store the sub sequences\n    result = np.empty((nrows, ncols), dtype=a.dtype)\n    \n    # Iterate over the rows of the matrix\n    for i in range(nrows):\n        # Calculate the start index of the sub sequence\n        start = i * S\n        \n        # Calculate the end index of the sub sequence\n        end = start + L\n        \n        # Extract the sub sequence from the input array\n        sub_sequence = a[start:end]\n        \n        # Clip the values of the sub sequence between the minimum and maximum values\n        sub_sequence = np.clip(sub_sequence, np.min(a), np.max(a))\n        \n        # Store the sub sequence in the result matrix\n        result[i] = sub_sequence\n    \n    return result", "error": "", "token_usage": [[211, 288]], "time_usage": [8.751466035842896]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "# [start]\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# [end]\nimport numpy as np\n\na = np.array([[1, 2],\n           [3, 4]])\nb = np.array([1,1])\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n# the code below is the solution\nout = a[b[1], b[1]]", "error": "", "token_usage": [[216, 127]], "time_usage": [4.054270505905151]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    result = array[idx]\n    return result", "error": "", "token_usage": [[166, 85]], "time_usage": [2.8462393283843994]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    new_arr = np.vstack((arr1, arr2))\n    return new_arr", "error": "", "token_usage": [[252, 104]], "time_usage": [3.5519886016845703]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.array(matrix).flatten()", "error": "", "token_usage": [[226, 136]], "time_usage": [4.448480844497681]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "# [start]\n# repeat(a, repeats, axis=None): Repeat elements of an array.\n# [end]\nimport numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\nm = np.repeat(a[cond], n)", "error": "", "token_usage": [[242, 152]], "time_usage": [4.786576747894287]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    return np.divide(t[1:], t[:-1])", "error": "", "token_usage": [[255, 169]], "time_usage": [5.735467433929443]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "# [start]\n# unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays.\n# [end]\nimport numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout = np.unravel_index(A.argmin(), A.shape)\nout", "error": "", "token_usage": [[187, 103]], "time_usage": [3.3160030841827393]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    # How do I extract a sub-array from a numpy 2d array? \n    # I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    # Return a sub-array from a numpy 2d array.\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[239, 151]], "time_usage": [4.646758317947388]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "# [start]\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# [end]\nimport numpy as np\n\na = np.array([[1,2,3],\n              [3,2,4]])\n\nmy_dict = {1:23, 2:34, 3:36, 4:45}\n# I am trying to translate every element of a numpy.array according to a given key\n# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\nout = np.vectorize(my_dict.get)(a)", "error": "", "token_usage": [[248, 159]], "time_usage": [4.7893030643463135]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "# [start]\n# masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\nx=np.array([range(100,1,-1)])\n# This will tell me those values\n# generate a mask to find all values that are even numbers\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout = np.where(x % 2 == 0)[0]\nout", "error": "", "token_usage": [[232, 148]], "time_usage": [4.710345029830933]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "# [start]\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n    result = []\n    temp = []\n    for i in range(len(data)-1):\n        if data[i+1] - data[i] == stepsize:\n            temp.append(data[i])\n        else:\n            if temp:\n                temp.append(data[i])\n                result.append(tuple(temp))\n                temp = []\n    if temp:\n        temp.append(data[-1])\n        result.append(tuple(temp))\n    return result", "error": "", "token_usage": [[301, 286]], "time_usage": [7.732377767562866]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "out = dists[np.logical_and(dists >= r, dists < r + dr)]", "error": "", "token_usage": [[267, 23]], "time_usage": [1.1791021823883057]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "import numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.bitwise_xor(x, np.bitwise_xor(y, z))", "error": "", "token_usage": [[238, 100]], "time_usage": [3.353555917739868]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "d = np.stack((a, b, c))", "error": "", "token_usage": [[225, 15]], "time_usage": [0.9194028377532959]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "# [start]\n# array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`.\n# [end]\nimport numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [1, 1, 1, 1, 1, 0]])\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[250, 160]], "time_usage": [4.285076856613159]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "# [start]\n# dist(p, q, /): Return the Euclidean distance between two points p and q.\n# [end]\nimport numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a-b)", "error": "", "token_usage": [[171, 80]], "time_usage": [2.6683876514434814]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\nimport itertools\ndata = [[1], [1, 2]]\n# Convert Python sequence to NumPy array, filling missing values with 0\nresult = np.array(list(itertools.zip_longest(*data, fillvalue=0)))", "error": "", "token_usage": [[196, 114]], "time_usage": [3.596750259399414]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "import numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[216, 99]], "time_usage": [3.0408589839935303]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "result = np.delete(data, index)", "error": "", "token_usage": [[217, 12]], "time_usage": [0.8940730094909668]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted = np.all(a[:-1] <= a[1:])", "error": "", "token_usage": [[183, 97]], "time_usage": [2.9556312561035156]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# [end]\nimport numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.full((3, 4), True)", "error": "", "token_usage": [[148, 60]], "time_usage": [2.0945167541503906]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[171, 87]], "time_usage": [2.9209275245666504]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[159, 72]], "time_usage": [2.580064535140991]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.any(arr)", "error": "", "token_usage": [[172, 78]], "time_usage": [4.069669008255005]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "# [start]\n# count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# [end]\nimport numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.count_nonzero(arr)", "error": "", "token_usage": [[184, 94]], "time_usage": [2.9725308418273926]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "# [start]\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n    return np.row_stack((arr, row))", "error": "", "token_usage": [[164, 76]], "time_usage": [2.5078179836273193]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "# [start]\n# removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones.\n# [end]\nimport numpy as np\n\na = np.arange(1, 10)\na = a.reshape(len(a), 1)\n# I want to access the elements from index 4 to the end:\nb = a[4:]", "error": "", "token_usage": [[175, 81]], "time_usage": [2.4619061946868896]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# [end]\nimport numpy as np\n\narr = np.zeros((50,100,25))\nresult = arr.reshape(-1, 25)", "error": "", "token_usage": [[189, 50]], "time_usage": [1.8241031169891357]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "# [start]\n# vander(x, n=None): Generate a Vandermonde matrix.\n# [end]\nimport numpy as np\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array with N elements.\n    # To achieve it, you can use the `flatten` method of numpy arrays.\n    result = M.flatten()\n    return result", "error": "", "token_usage": [[183, 94]], "time_usage": [3.044674873352051]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# [end]\nimport numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.argwhere(arr == 0)", "error": "", "token_usage": [[162, 74]], "time_usage": [2.4094223976135254]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "# [start]\n# count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# [end]\nimport numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    max_count_index = np.argmax(counts)\n    return unique_elements[max_count_index]", "error": "", "token_usage": [[181, 115]], "time_usage": [3.600114345550537]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\n# List of arrays.\nL = [np.random.randn(5,4,2,5,1,2) for i in range(10)]\n# Stack them using axis that is negative one.\nM = np.stack(L, axis=-1)", "error": "", "token_usage": [[179, 90]], "time_usage": [2.7980704307556152]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    return np.append(arr, arr[0])", "error": "", "token_usage": [[169, 81]], "time_usage": [2.602701187133789]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# [end]\nimport numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return np.array(arr, dtype=float)", "error": "", "token_usage": [[180, 91]], "time_usage": [2.823019504547119]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "# [start]\n# max(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# [end]\nimport numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[177, 90]], "time_usage": [3.0045127868652344]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "def arr2tuple(arr):\n    \"\"\"\n    Convert numpy array to tuple\n    Return the transformed tuple\n    \"\"\"\n    return tuple(arr.reshape(-1))", "error": "", "token_usage": [[157, 35]], "time_usage": [1.6268060207366943]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.any(arr)", "error": "", "token_usage": [[163, 71]], "time_usage": [2.4947385787963867]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# [end]\nimport numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    return np.argwhere((arr >= low) & (arr <= high))", "error": "", "token_usage": [[169, 87]], "time_usage": [3.049401044845581]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "def convert_nan_to_zero(arr):\n    # convert nan value to zero\n    # Return the changed array\n    return np.nan_to_num(arr)", "error": "", "token_usage": [[183, 34]], "time_usage": [1.454561471939087]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Check if each element in the array is numeric using np.isreal() function\n    mask = np.all(np.isreal(arr), axis=1)\n    \n    # Use the mask to select only the rows with all numeric values\n    result = arr[mask]\n    \n    # Return the final result\n    return result", "error": "", "token_usage": [[173, 134]], "time_usage": [4.127347946166992]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "result = np.where(a < 0, 0, a)", "error": "", "token_usage": [[181, 18]], "time_usage": [1.436378002166748]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "# [start]\n# transpose(a, axes=None): Permute the dimensions of an array.\n# [end]\nimport numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    c[::2] = a\n    c[1::2] = b\n    return c", "error": "", "token_usage": [[180, 105]], "time_usage": [3.518118381500244]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# [end]\nimport numpy as np\n\nA = np.array([1, 7, 9, 2, 0.1, 17, 17, 1.5])\nk = 3\n\n# Find the index of the k smallest values of a numpy array\nidx = np.argsort(A)[:k]", "error": "", "token_usage": [[188, 97]], "time_usage": [2.9748237133026123]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# [end]\nimport numpy as np\n\ninput_list = [np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]])]\n\ndef flatten_structured_array(a):\n    return np.concatenate(a).ravel()\n\noutput = flatten_structured_array(input_list)", "error": "", "token_usage": [[275, 146]], "time_usage": [4.326613187789917]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "result = np.array_split(x, 3)", "error": "", "token_usage": [[159, 15]], "time_usage": [0.9979419708251953]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# [end]\nimport numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    return np.linalg.inv(matrix)", "error": "", "token_usage": [[184, 93]], "time_usage": [2.9547014236450195]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "# [start]\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# [end]\nimport numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    return np.mean(arr.reshape(-1, 3), axis=1)", "error": "", "token_usage": [[212, 130]], "time_usage": [3.789996385574341]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef prepend_element_to_array(arr, element):\n    # Prepend element to numpy array\n    new_arr = np.insert(arr, 0, element)\n    # Return the array\n    return new_arr", "error": "", "token_usage": [[153, 73]], "time_usage": [2.237497568130493]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "# [start]\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# [end]\nimport numpy as np\n\na = np.array([np.array([13.16]), np.array([1.58 , 1.2]), np.array([13.1]), np.array([1. , 2.6])], dtype=object)\n# I need a general way to flatten that array into a single array of N elements, with N=every float in all the sub-arrays.\n\nout = np.concatenate(a).flatten()", "error": "", "token_usage": [[226, 134]], "time_usage": [5.477217674255371]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "# [start]\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# [end]\nimport numpy as np\n\nmaster = np.array([1,2,3,4,5])\nsearch = np.array([4,2,2,3])\n\n# Find indices of a list of values in a numpy array\nout = np.choose(search, master)", "error": "", "token_usage": [[186, 94]], "time_usage": [3.0236659049987793]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "import numpy as np\n\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    min_val = np.min(arr)\n    return min_val", "error": "", "token_usage": [[179, 57]], "time_usage": [2.1897988319396973]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# [end]\nimport numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.cumsum(z[1:])[::-1]", "error": "", "token_usage": [[167, 80]], "time_usage": [2.787278890609741]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "out = np.full((5, 5), -1)", "error": "", "token_usage": [[208, 17]], "time_usage": [1.4345238208770752]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[196, 112]], "time_usage": [3.4074044227600098]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\n\n# Get the indices of elements in A that are in B\nindices_in_B = np.isin(A, B).nonzero()[0]\n\n# Get the indices of elements in A that are not in B\nindices_not_in_B = np.isin(A, B, invert=True).nonzero()[0]", "error": "", "token_usage": [[251, 214]], "time_usage": [6.075223684310913]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "b = np.squeeze(a[np.where((a[:, 0] == 0) & (a[:, 1] == 1))])", "error": "", "token_usage": [[229, 33]], "time_usage": [1.4669020175933838]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "# [start]\n# rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position.\n# [end]\nimport numpy as np\n\na = np.array([[[10, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]],\n              [[1, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]]])\n\n# Conducting the reverse operation along with the last dimension\nb = np.rollaxis(a, -1, 0)", "error": "", "token_usage": [[233, 146]], "time_usage": [4.323690414428711]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "# [start]\n# min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis.\n# [end]\nimport numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n# Firstly, We need to find the minimum value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult = np.subtract(a, np.min(a, axis=0))", "error": "", "token_usage": [[199, 112]], "time_usage": [3.381596565246582]}
