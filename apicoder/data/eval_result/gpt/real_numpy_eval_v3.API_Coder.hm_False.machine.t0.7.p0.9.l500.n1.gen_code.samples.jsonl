{"task_id": "NumpyEval/1", "completion": " np.multiply(a, b[:, None])"}
{"task_id": "NumpyEval/2", "completion": " a.reshape(2, 4, 2, 4).transpose(0, 2, 1, 3)"}
{"task_id": "NumpyEval/3", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\" \"\"\"w\"\"\"o\"\"\"u\"\"\"l\"\"\"d\"\"\" \"\"\"l\"\"\"i\"\"\"k\"\"\"e\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"i\"\"\"-\"\"\"t\"\"\"h\"\"\" \"\"\"i\"\"\"n\"\"\"d\"\"\"e\"\"\"x\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"l\"\"\"a\"\"\"s\"\"\"t\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"I\"\"\"s\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"a\"\"\" \"\"\"w\"\"\"a\"\"\"y\"\"\" \"\"\"I\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"o\"\"\"b\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"s\"\"\"l\"\"\"i\"\"\"c\"\"\"e\"\"\" \"\"\"f\"\"\"o\"\"\"r\"\"\" \"\"\"a\"\"\"n\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"w\"\"\"i\"\"\"t\"\"\"h\"\"\"o\"\"\"u\"\"\"t\"\"\" \"\"\"e\"\"\"x\"\"\"p\"\"\"l\"\"\"i\"\"\"c\"\"\"i\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"h\"\"\"a\"\"\"v\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"o\"\"\" \"\"\"w\"\"\"r\"\"\"i\"\"\"t\"\"\"e\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"d\"\"\"i\"\"\"m\"\"\"e\"\"\"n\"\"\"s\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"e\"\"\"r\"\"\"e\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\".\"\"\".\"\"\".\"\"\" \"\"\"o\"\"\"r\"\"\" \"\"\"E\"\"\"l\"\"\"l\"\"\"i\"\"\"p\"\"\"s\"\"\"i\"\"\"s\"\"\",\"\"\" \"\"\"w\"\"\"h\"\"\"i\"\"\"c\"\"\"h\"\"\" \"\"\"d\"\"\"o\"\"\"e\"\"\"s\"\"\" \"\"\"e\"\"\"x\"\"\"a\"\"\"c\"\"\"t\"\"\"l\"\"\"y\"\"\" \"\"\"t\"\"\"h\"\"\"i\"\"\"s\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" "}
{"task_id": "NumpyEval/0", "completion": " np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])"}
{"task_id": "NumpyEval/4", "completion": " np.column_stack((a, b))"}
{"task_id": "NumpyEval/5", "completion": " np.concatenate((a, b))"}
{"task_id": "NumpyEval/6", "completion": "\n\n# Dynamically slice a numpy array along a specific axis\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]\nresult"}
{"task_id": "NumpyEval/7", "completion": " ((a > 2) & (a < 8)).sum()"}
{"task_id": "NumpyEval/8", "completion": " arr[[1, 4]]"}
{"task_id": "NumpyEval/9", "completion": "\na.imag[np.abs(a.imag) < tol] = 0"}
{"task_id": "NumpyEval/10", "completion": "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n\ndef set_diagonal_to_zero(df):\n    \"\"\"\n    Sets the diagonal of a pandas DataFrame to 0.\n    \n    Args:\n    df (pd.DataFrame): Input DataFrame.\n    \n    Returns:\n    pd.DataFrame: DataFrame with diagonal set to 0.\n    \"\"\"\n    np.fill_diagonal(df.values, 0)\n    return df\n\ndf = set_diagonal_to_zero(df)"}
{"task_id": "NumpyEval/11", "completion": " np.all(a == a[0, :], axis=0)\n# The above code checks if all values in the columns are the same using a == a[0,:] and axis=0"}
{"task_id": "NumpyEval/12", "completion": " np.fromstring(ts, dtype=int)"}
{"task_id": "NumpyEval/13", "completion": " a.shape"}
{"task_id": "NumpyEval/14", "completion": " np.array(list(result.items()), dtype=dtype)"}
{"task_id": "NumpyEval/15", "completion": " np.sum(df.values)"}
{"task_id": "NumpyEval/17", "completion": " np.isin(a, b)"}
{"task_id": "NumpyEval/18", "completion": " (a + b + c) / 3\nmean_array"}
{"task_id": "NumpyEval/19", "completion": " np.where(a[:-1] != a[1:])[0]"}
{"task_id": "NumpyEval/20", "completion": " a[..., newaxis]"}
{"task_id": "NumpyEval/21", "completion": " np.std(arr, axis=0)"}
{"task_id": "NumpyEval/16", "completion": " a_string =\"a_string =1a_string = a_string =2a_string = a_string =3a_string = a_string =4a_string = a_string =5a_string =\"a_string =.a_string =\n"}
{"task_id": "NumpyEval/22", "completion": " a * b[:, newaxis]"}
{"task_id": "NumpyEval/23", "completion": " np.squeeze(x)"}
{"task_id": "NumpyEval/24", "completion": " np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')"}
{"task_id": "NumpyEval/25", "completion": " np.vstack(list_of_arrays)"}
{"task_id": "NumpyEval/26", "completion": " np.histogram(arr, bins=10)\ncdf = np.cumsum(hist)"}
{"task_id": "NumpyEval/27", "completion": " np.array2string(a, threshold=np.inf)"}
{"task_id": "NumpyEval/28", "completion": " np.setxor1d(a, b)"}
{"task_id": "NumpyEval/29", "completion": " arr[~np.all(arr == 0, axis=1)]"}
{"task_id": "NumpyEval/30", "completion": " np.char.add(a1, a2)"}
{"task_id": "NumpyEval/31", "completion": " np.ma.mean(mdat, axis=1)"}
{"task_id": "NumpyEval/32", "completion": " np.lexsort((a[:,1], a[:,0]))"}
{"task_id": "NumpyEval/33", "completion": " np.array(a).flatten().tolist()"}
{"task_id": "NumpyEval/34", "completion": "\nb[1:4, 1:4] = a"}
{"task_id": "NumpyEval/35", "completion": " np.zeros((len(a), len(b)))\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        c[i, j] = a[i] + b[j] * 2\n\nc"}
{"task_id": "NumpyEval/36", "completion": "\na[:, 2] = x"}
{"task_id": "NumpyEval/37", "completion": " np.ma.compressed(m)"}
{"task_id": "NumpyEval/38", "completion": " a.astype(np.float32)"}
{"task_id": "NumpyEval/39", "completion": " np.fromiter(Samples.values(), dtype=float)"}
{"task_id": "NumpyEval/40", "completion": " np.concatenate(L, axis=0)"}
{"task_id": "NumpyEval/41", "completion": " np.argmin(x, axis=0)"}
{"task_id": "NumpyEval/42", "completion": "\n    ncols = L\n    strides = a.strides[0] * S\n    sub_seqs = np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(strides, a.strides[0]))\n    return sub_seqs"}
{"task_id": "NumpyEval/43", "completion": " a[b[1], b[1]]"}
{"task_id": "NumpyEval/44", "completion": "import numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]"}
{"task_id": "NumpyEval/45", "completion": "import numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    new_arr = np.append(new_arr, [arr1], axis=0)\n    new_arr = np.append(new_arr, [arr2], axis=0)\n    return new_arr"}
{"task_id": "NumpyEval/46", "completion": "import numpy as np\n\ndef matrix_to_array(matrix):\n    \"\"\"\n    I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    Return the array\n    \"\"\"\n    array = np.squeeze(matrix)\n    return array"}
{"task_id": "NumpyEval/47", "completion": " np.repeat(a[cond], n)"}
{"task_id": "NumpyEval/48", "completion": "\n    target = np.divide(t[1:], t[:-1])\n    return target"}
{"task_id": "NumpyEval/49", "completion": " np.unravel_index(A.argmin(), A.shape)"}
{"task_id": "NumpyEval/50", "completion": "\n    return arr[top:bottom, left:right]"}
{"task_id": "NumpyEval/51", "completion": " np.vectorize(translate_element)(a)"}
{"task_id": "NumpyEval/52", "completion": " indices"}
{"task_id": "NumpyEval/53", "completion": "import numpy as np\n\ndef consecutive(data, stepsize=1):\n    \"\"\"\n    How to find the groups of consecutive elements in a NumPy array\n    I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    The output should be a list of tuples as follows\n    [(0), (47, 48, 49, 50), (97, 98, 99)]\n    Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    Finally, return the number of consecutive elements in the array.\n    \"\"\"\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    groups = [tuple(group) for group in groups if len(group) > 0]\n    return groups, len(groups)"}
{"task_id": "NumpyEval/54", "completion": " dists[(dists >= r) & (dists <= r+dr)]"}
{"task_id": "NumpyEval/55", "completion": "\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"H\"\"\"o\"\"\"w\"\"\" \"\"\"c\"\"\"a\"\"\"n\"\"\" \"\"\"I\"\"\" \"\"\"d\"\"\"e\"\"\"f\"\"\"i\"\"\"n\"\"\"e\"\"\" \"\"\"i\"\"\"n\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\" \"\"\"m\"\"\"a\"\"\"t\"\"\"r\"\"\"i\"\"\"x\"\"\" \"\"\"t\"\"\"h\"\"\"a\"\"\"t\"\"\" \"\"\"u\"\"\"s\"\"\"e\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"s\"\"\" \"\"\"m\"\"\"o\"\"\"d\"\"\"u\"\"\"l\"\"\"o\"\"\" \"\"\"2\"\"\"?\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"T\"\"\"h\"\"\"i\"\"\"s\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\" \"\"\"i\"\"\"s\"\"\" \"\"\"c\"\"\"a\"\"\"l\"\"\"l\"\"\"e\"\"\"d\"\"\" \"\"\"\"\"\"\"x\"\"\"o\"\"\"r\"\"\"\"\"\"\".\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"A\"\"\"r\"\"\"g\"\"\"u\"\"\"m\"\"\"e\"\"\"n\"\"\"t\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"x\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"y\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"z\"\"\":\"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"R\"\"\"e\"\"\"t\"\"\"u\"\"\"r\"\"\"n\"\"\"s\"\"\":\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"a\"\"\" \"\"\"n\"\"\"u\"\"\"m\"\"\"p\"\"\"y\"\"\" \"\"\"a\"\"\"r\"\"\"r\"\"\"a\"\"\"y\"\"\" \"\"\"c\"\"\"o\"\"\"n\"\"\"t\"\"\"a\"\"\"i\"\"\"n\"\"\"i\"\"\"n\"\"\"g\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"r\"\"\"e\"\"\"s\"\"\"u\"\"\"l\"\"\"t\"\"\" \"\"\"o\"\"\"f\"\"\" \"\"\"t\"\"\"h\"\"\"e\"\"\" \"\"\"o\"\"\"p\"\"\"e\"\"\"r\"\"\"a\"\"\"t\"\"\"i\"\"\"o\"\"\"n\"\"\"\n\"\"\" \"\"\" \"\"\" \"\"\" "}
{"task_id": "NumpyEval/56", "completion": " np.vstack((a, b, c)).flatten()"}
{"task_id": "NumpyEval/57", "completion": " np.unique(a, axis=0)"}
{"task_id": "NumpyEval/58", "completion": " np.linalg.norm(a - b)"}
{"task_id": "NumpyEval/59", "completion": " np.array(list(itertools.zip_longest(*data, fillvalue=0)))"}
{"task_id": "NumpyEval/60", "completion": " result=result resultnresultpresult.resultzresulteresultrresultoresultsresult(result(resultdresultaresulttresultaresult.resultsresultiresultzresulteresult,result resultdresultaresulttresultaresult.resultmresultaresultxresult(result)result+result1result)result)result\nresult#result resultCresultoresultnresultvresulteresultrresulttresult resultaresultrresultrresultaresultyresult resultoresultfresult resultiresultnresultdresultiresultcresulteresultsresult resulttresultoresult result1result-resulthresultoresulttresult resulteresultnresultcresultoresultdresulteresultdresult resultnresulturesultmresultpresultyresult resultaresultrresultrresultaresultyresult\n"}
{"task_id": "NumpyEval/61", "completion": " np.delete(data, index)"}
{"task_id": "NumpyEval/62", "completion": " np.all(a[:-1] <= a[1:])"}
{"task_id": "NumpyEval/63", "completion": " np.full((3, 4), True)"}
{"task_id": "NumpyEval/64", "completion": "\n    arr[arr > value] = new_value\n    return arr"}
{"task_id": "NumpyEval/65", "completion": "\n    return np.concatenate((arr1, arr2))"}
{"task_id": "NumpyEval/66", "completion": "import numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.size(arr) == 0"}
{"task_id": "NumpyEval/67", "completion": "\n    return np.count_nonzero(arr)"}
{"task_id": "NumpyEval/68", "completion": "\n    if arr.ndim == 0:\n        return np.array([row])\n    elif arr.ndim == 1:\n        return np.vstack((arr, row))\n    else:\n        return np.concatenate((arr, np.array([row])), axis=0)"}
{"task_id": "NumpyEval/69", "completion": " a[4:]"}
{"task_id": "NumpyEval/70", "completion": " arr.reshape(-1, arr.shape[-1])"}
{"task_id": "NumpyEval/71", "completion": "\n    \n    # We can use the numpy `flatten()` function to convert the matrix into a 1D array.\n    array = np.array(M).flatten()\n    \n    return array"}
{"task_id": "NumpyEval/72", "completion": "\n    return np.where(arr == 0)[0]"}
{"task_id": "NumpyEval/73", "completion": "\n    \n    # Get the unique values and their counts\n    unique_values, counts = np.unique(arr, return_counts=True)\n    \n    # Find the index of the maximum count\n    max_count_index = np.argmax(counts)\n    \n    # Get the most frequent number\n    most_frequent_number = unique_values[max_count_index]\n    \n    return most_frequent_number"}
{"task_id": "NumpyEval/74", "completion": " np.stack(L, axis=-1)"}
{"task_id": "NumpyEval/75", "completion": "\n    arr.append(arr[0])\n    return arr"}
{"task_id": "NumpyEval/76", "completion": "\n    return np.array(arr, dtype=float)"}
{"task_id": "NumpyEval/77", "completion": "\n    return np.argmax(arr, axis=axis_value)"}
{"task_id": "NumpyEval/78", "completion": "\n    return tuple(arr)"}
{"task_id": "NumpyEval/79", "completion": "\n    return np.all(arr == 0)"}
{"task_id": "NumpyEval/80", "completion": "\n    indices = np.where((arr >= low) & (arr <= high))\n    return indices[0]"}
{"task_id": "NumpyEval/81", "completion": "\n    return arr"}
{"task_id": "NumpyEval/82", "completion": "\n    mask = np.array([np.all(np.isreal(row)) for row in arr])\n    result = arr[mask]\n    return result"}
{"task_id": "NumpyEval/83", "completion": "np.where(a < 0, 0, a)"}
{"task_id": "NumpyEval/84", "completion": "\n    \n    c[0::2] = a\n    c[1::2] = b\n    \n    return c"}
{"task_id": "NumpyEval/85", "completion": " np.argsort(A)[:k]"}
{"task_id": "NumpyEval/86", "completion": " np.ravel(np.concatenate(input_list))"}
{"task_id": "NumpyEval/87", "completion": " np.array_split(x, 3)"}
{"task_id": "NumpyEval/88", "completion": "\n    inverse = np.linalg.inv(matrix)\n    return inverse"}
{"task_id": "NumpyEval/89", "completion": "import numpy as np\n\ndef average_every_3_elements(arr):\n    \"\"\"\n    Averaging over every 3 elements of a numpy array\n    I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    Return it\n    \"\"\"\n    # Reshape the input array into a 2D array with 3 columns\n    reshaped_arr = arr.reshape(-1, 3)\n    \n    # Calculate the average of each row (triplet) along axis 1\n    averaged_arr = np.mean(reshaped_arr, axis=1)\n    \n    return averaged_arr"}
{"task_id": "NumpyEval/90", "completion": "import numpy as np\n\ndef prepend_element_to_array(arr, element):\n    \"\"\"\n    Prepend element to numpy array\n    \n    Parameters:\n    arr (numpy.ndarray): Input array\n    element: Element to be prepended\n    \n    Returns:\n    numpy.ndarray: Updated array with element prepended\n    \"\"\"\n    return np.concatenate(([element], arr))"}
{"task_id": "NumpyEval/91", "completion": " np.concatenate([x.flatten() for x in a]).astype(float)"}
{"task_id": "NumpyEval/92", "completion": " np.where(np.isin(master, search))[0]\nout"}
{"task_id": "NumpyEval/93", "completion": "\n    min_val = np.min(arr)\n    return min_val"}
{"task_id": "NumpyEval/94", "completion": " np.diff(z)"}
{"task_id": "NumpyEval/95", "completion": " np.full((5, 5), -1)"}
{"task_id": "NumpyEval/96", "completion": " np.delete(a, [1, 3], axis=1)"}
{"task_id": "NumpyEval/97", "completion": "def check_elements(A, B):\n    \"\"\"\n    Check if each element in a numpy array is in another array\n    \n    Parameters:\n    A (numpy array): Array to check elements from\n    B (numpy array): Array to check elements against\n    \n    Returns:\n    indices_in (numpy array): Indices of elements in A that are in B\n    indices_not_in (numpy array): Indices of elements in A that are not in B\n    \"\"\"\n    indices_in = np.searchsorted(A, B)\n    indices_not_in = np.where(np.isin(A, B, invert=True))[0]\n    \n    return indices_in, indices_not_in\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nindices_in, indices_not_in = check_elements(A, B)\nprint(\"Indices in B:\", indices_in)\nprint(\"Indices not in B:\", indices_not_in)"}
{"task_id": "NumpyEval/98", "completion": " a[np.where((a[:,0] == 0) & (a[:,1] == 1))]\n\nprint(b)"}
{"task_id": "NumpyEval/99", "completion": " np.flip(a, axis=-1)"}
{"task_id": "NumpyEval/100", "completion": " np.subtract(a, np.min(a, axis=0))"}
