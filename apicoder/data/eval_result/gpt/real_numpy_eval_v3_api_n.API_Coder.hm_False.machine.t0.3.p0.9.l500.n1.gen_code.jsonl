{"task_id": "NumpyEval/0", "success": true, "generated_code": "# [start]\n# array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`.\n# [end]\nimport numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[175, 107]], "time_usage": [3.5276806354522705]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "# [start]\n# column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array.\n# [end]\nimport numpy as np\n\na = np.array([[1,3,4],[1,2,3],[1,2,1]])\nb = np.array([1,2,3])\n# How to add items into a numpy array?\n# add one element to each row using column stack operation.\nc = np.column_stack((a, b))", "error": "", "token_usage": [[206, 116]], "time_usage": [3.959803342819214]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\na = np.array([1,3,4])\nb = np.array([5,2,1])\n\n# I have two simple one-dimensional arrays in NumPy. \n# I should be able to concatenate them using numpy.concatenate.\nc = np.concatenate((a, b))", "error": "", "token_usage": [[184, 93]], "time_usage": [3.0848171710968018]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# [end]\nimport numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Complete the code by dynamically slicing the numpy array along the specified axis\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "error": "", "token_usage": [[221, 156]], "time_usage": [4.794928789138794]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "count_value = np.sum((2 < a) & (a < 8))", "error": "", "token_usage": [[205, 21]], "time_usage": [1.1697993278503418]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "import numpy as np\n\n# I have a NumPy array that looks like this:\narr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])\n# How can I get multiple values from this array by index?\n# How can I get the values at the index positions 1 and 4?\nresult_arr = arr[[1, 4]]", "error": "", "token_usage": [[186, 95]], "time_usage": [2.9714128971099854]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "# [start]\n# imag(val): Return the imaginary part of the complex argument.\n# abs(self, *args, **kwargs): Convenience fluent method for :py:func:`abs`.\n# [end]\nimport numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0", "error": "", "token_usage": [[252, 309]], "time_usage": [8.663135290145874]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "# [start]\n# fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef fill_diagonal(a, val, wrap=False):\n    np.fill_diagonal(a.values, val, wrap)\n\nfill_diagonal(df, 0)", "error": "", "token_usage": [[192, 125]], "time_usage": [3.7439005374908447]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[233, 19]], "time_usage": [1.1853806972503662]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "# [start]\n# fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from binary data Note that despite the name of this function it does not accept `str` instances.\n# [end]\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[222, 132]], "time_usage": [3.9875826835632324]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "import numpy as np\n\na = np.zeros((2,5))\n# How can I get the shape of NumPy array?\na_shape = a.shape", "error": "", "token_usage": [[131, 36]], "time_usage": [1.4979028701782227]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "array = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[269, 16]], "time_usage": [1.0600736141204834]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [5, 6, 7], 'B': [7, 8, 9]})\n# What's the best way to sum all values in a Pandas dataframe?\n# the result is a numeric value\nsum_value = np.sum(df.values)", "error": "", "token_usage": [[213, 120]], "time_usage": [3.677591562271118]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "c = np.in1d(a, b)", "error": "", "token_usage": [[215, 14]], "time_usage": [0.9954094886779785]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = (a + b + c) / 3", "error": "", "token_usage": [[199, 18]], "time_usage": [1.0544066429138184]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(np.diff(a) != 0)[0] + 1", "error": "", "token_usage": [[254, 22]], "time_usage": [1.1988141536712646]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "b = a[..., newaxis]", "error": "", "token_usage": [[194, 11]], "time_usage": [0.8747148513793945]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "arr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[217, 15]], "time_usage": [0.987393856048584]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "# [start]\n# join(self, iterable_of_bytes, /): Concatenate any number of bytes objects.\n# [end]\nimport numpy as np\n\na = np.arange(0,10)\n# How to print a Numpy array without brackets?\n# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\na_string = ' '.join(map(str, a))", "error": "", "token_usage": [[194, 104]], "time_usage": [3.3338146209716797]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "import numpy as np\nfrom numpy import newaxis\n\na = np.array([\n     [1,2],\n     [3,4],\n     [5,6],\n     [7,8]])\n\nb = np.array([1,2,3,4])\n\n# multiply arrays rowwise\n# Basically out[i] = a[i] * b[i], where a[i].shape is (2,) and b[i] then is a scalar.\n# What's the trick?\nout = a * b[:, newaxis]", "error": "", "token_usage": [[200, 109]], "time_usage": [3.382505416870117]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout = np.reshape(x, x.shape[0])", "error": "", "token_usage": [[170, 81]], "time_usage": [2.6375961303710938]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "newrecarray = np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "error": "", "token_usage": [[251, 28]], "time_usage": [1.369171142578125]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "# [start]\n# stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\nlist_of_arrays = map(lambda x: x*np.ones(2), range(5))\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n# s there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\nmyarray = np.stack(list_of_arrays)", "error": "", "token_usage": [[296, 204]], "time_usage": [5.811817407608032]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "# [start]\n# histogram(a, bins=10, range=None, normed=None, weights=None, density=None): Compute the histogram of a dataset.\n# cumsum(a, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along a given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges = np.histogram(arr, bins=10, density=True)\nhist = np.cumsum(hist)", "error": "", "token_usage": [[234, 154]], "time_usage": [4.135481834411621]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\na = np.array([0,33,4444522])\n# Converting int arrays to string arrays in numpy without truncation\na_str = np.array2string(a, precision=np.inf, separator=',')", "error": "", "token_usage": [[159, 74]], "time_usage": [4.6480042934417725]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "# [start]\n# setxor1d(ar1, ar2, assume_unique=False): Find the set exclusive-or of two arrays.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[202, 113]], "time_usage": [4.570772647857666]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "# [start]\n# all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[np.all(arr != 0, axis=1)]", "error": "", "token_usage": [[212, 126]], "time_usage": [3.866959571838379]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "# [start]\n# add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode.\n# [end]\nimport numpy as np\n\na1=np.array(['a','b'])\na2=np.array(['E','F'])\n# I am trying to do element-wise string concatenation.\n# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\nresult = np.core.defchararray.add(a1, a2)", "error": "", "token_usage": [[191, 105]], "time_usage": [3.2974729537963867]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "mm = np.ma.mean(mdat, axis=1, fill_value=np.nan)", "error": "", "token_usage": [[242, 21]], "time_usage": [1.09956693649292]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "import numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind = np.lexsort((a[:, 1], a[:, 0]))\n\n# The lexsort function returns an array of indices that would sort the given arrays in lexicographical order.\n# In this case, we want to sort the points based on the x-coordinate first, so we pass a[:, 0] as the first array to sort.\n# Then, we want to sort the points based on the y-coordinate if the x-coordinate is the same, so we pass a[:, 1] as the second array to sort.\n\n# The resulting indices can be used to access the sorted points from the original array.\nsorted_points = a[ind]\n\n# Now, the sorted_points array contains the points sorted by x-coordinate, and then by y-coordinate in cases where the x-coordinate is the same.\n# The original array 'a' remains unchanged.\n\n# You can use the sorted_points array for further processing or analysis.", "error": "", "token_usage": [[199, 284]], "time_usage": [7.762776613235474]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "a_list = np.array(a).flatten().tolist()", "error": "", "token_usage": [[219, 15]], "time_usage": [0.945897102355957]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "import numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nb[1:4, 1:4] = a", "error": "", "token_usage": [[160, 76]], "time_usage": [2.6835873126983643]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "import numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5])\n# if function is c(i, j) = a(i) + b(j)*2:\nc = np.zeros((len(a), len(b)))\nfor i in range(len(a)):\n    for j in range(len(b)):\n        c[i][j] = a[i] + b[j]*2", "error": "", "token_usage": [[151, 93]], "time_usage": [2.989877223968506]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "import numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 1] = x", "error": "", "token_usage": [[202, 112]], "time_usage": [3.3316657543182373]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "# [start]\n# compressed(x): Return all the non-masked data as a 1-D array.\n# [end]\nimport numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = m.compressed()", "error": "", "token_usage": [[183, 89]], "time_usage": [2.7019808292388916]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "# [start]\n# astype(self, dtype, copy=True): Returns a copy of the array after casting to a specified type.\n# [end]\nimport numpy as np\n\na = np.zeros(4,dtype=\"float64\")\n# Convert numpy array type and values from Float64 to Float32\nb = a.astype(\"float32\")", "error": "", "token_usage": [[166, 74]], "time_usage": [2.24299693107605]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "vals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[257, 16]], "time_usage": [1.0985283851623535]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\n# I have a list containing numpy arrays something like L=[a,b,c] where a, b and c are numpy arrays with sizes N_a in T, N_b in T and N_c in T.\n# I want to row-wise concatenate a, b and c and get a numpy array with shape (N_a+N_b+N_c, T). \n# Clearly one solution is run a for loop and use numpy.concatenate, but is there any pythonic way to do this?\na = np.ones((3,2))\nb = np.zeros((2,2))\nc = np.ones((4,2))\nL = [a,b,c]\nconcated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[270, 180]], "time_usage": [4.786463022232056]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "# [start]\n# argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis.\n# [end]\nimport numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[169, 80]], "time_usage": [2.4029979705810547]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "# [start]\n# arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval.\n# [end]\nimport numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    ncols = L\n    return np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(a.strides[0]*S, a.strides[0]))", "error": "", "token_usage": [[221, 163]], "time_usage": [4.438772916793823]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1, 2],\n           [3, 4]])\nb = np.array([1,1])\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n# the code below is the solution\nout = a[b[1], b[1]]", "error": "", "token_usage": [[172, 83]], "time_usage": [2.594080924987793]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "# [start]\n# abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise.\n# argmin(self, axis=None, out=None): Indexes of the minimum values along an axis.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]", "error": "", "token_usage": [[216, 130]], "time_usage": [3.7811837196350098]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "# [start]\n# vstack(tup): Stack arrays in sequence vertically (row wise).\n# hstack(arrays): Stack arrays in sequence horizontally (column wise).\n# [end]\nimport numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    # How to add a new row to an empty numpy array\n    # example: \n    # input: np.array([1,2,3]) and np.array([4,5,6])\n    # output: np.array([[1,2,3],[4,5,6]])\n    new_arr = np.vstack((arr1, arr2))\n    # Return the new array\n    return new_arr", "error": "", "token_usage": [[233, 153]], "time_usage": [4.150383949279785]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "# [start]\n# squeeze(self, axis=None): Return a possibly reshaped matrix.\n# asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type.\n# [end]\nimport numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.squeeze(np.asarray(matrix))", "error": "", "token_usage": [[235, 145]], "time_usage": [4.477477788925171]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "# [start]\n# repeat(self, repeats, axis=None): Repeat elements of an array.\n# [end]\nimport numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\nm = np.repeat(a[cond], n)", "error": "", "token_usage": [[242, 152]], "time_usage": [4.475351572036743]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "import numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    target = np.divide(t[1:], t[:-1])\n    return target", "error": "", "token_usage": [[199, 118]], "time_usage": [3.7893521785736084]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "out = np.unravel_index(np.argmin(A), A.shape)", "error": "", "token_usage": [[209, 19]], "time_usage": [1.146087646484375]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "import numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    \"\"\"\n    How do I extract a sub-array from a numpy 2d array? \n    I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    Return a sub-array from a numpy 2d array.\n    \"\"\"\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[182, 95]], "time_usage": [3.1677727699279785]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "# [start]\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# [end]\nimport numpy as np\n\na = np.array([[1,2,3],\n              [3,2,4]])\n\nmy_dict = {1:23, 2:34, 3:36, 4:45}\n# I am trying to translate every element of a numpy.array according to a given key\n# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\nout = np.vectorize(my_dict.get)(a)", "error": "", "token_usage": [[248, 159]], "time_usage": [4.933457612991333]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "# [start]\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# [end]\nimport numpy as np\n\nx = np.array([range(100,1,-1)])\n# This will tell me those values\n# generate a mask to find all values that are even numbers\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout = np.where(x % 2 == 0)", "error": "", "token_usage": [[214, 127]], "time_usage": [4.338765859603882]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "# [start]\n# split(sep=None, maxsplit=-1): Return a list of the words in the string, using sep as the delimiter string.\n# where(condition, x=None, y=None): where(condition, [x, y]) Return elements chosen from `x` or `y` depending on `condition`.\n# diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>): Calculate the n-th discrete difference along the given axis.\n# [end]\nimport numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]", "error": "", "token_usage": [[368, 302]], "time_usage": [8.50913381576538]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "out = dists[(dists >= r) & (dists <= r + dr)]", "error": "", "token_usage": [[328, 23]], "time_usage": [1.224463701248169]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "import numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.logical_xor(np.logical_xor(x, y), z).astype(int)", "error": "", "token_usage": [[182, 101]], "time_usage": [3.1283047199249268]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# flatten(self, order='C'): Return a copy of the array collapsed into one dimension.\n# [end]\nimport numpy as np\n\na = np.array([ 0,  3,  6,  9, 12])\nb = np.array([ 1,  4,  7, 10, 13])\nc = np.array([ 2,  5,  8, 11, 14])\n\n# How can I join them using numpy methods\n# You can transpose and flatten the arrays:\nd = np.array([a, b, c]).flatten()", "error": "", "token_usage": [[270, 183]], "time_usage": [5.08791708946228]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "# [start]\n# unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array.\n# [end]\nimport numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[254, 164]], "time_usage": [4.5941481590271]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "# [start]\n# norm(self, *args, **kwargs): Convenience fluent method for :py:func:`norm`.\n# [end]\nimport numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a-b)", "error": "", "token_usage": [[172, 81]], "time_usage": [2.763812303543091]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "result = np.array(data, dtype=object, copy=True)", "error": "", "token_usage": [[196, 18]], "time_usage": [0.987511396408081]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "# [start]\n# arange(*args, **params): arange([start,] stop[, step,], dtype=None, *, like=None) Return evenly spaced values within a given interval.\n# [end]\nimport numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[228, 143]], "time_usage": [4.241201400756836]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\ndata = np.array([1,2,3,4,5,6,7,8,9])\n# How to remove specific elements in a numpy array\uff1f\n# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\nindex = [2, 3, 6]\nresult = np.delete(data, index)", "error": "", "token_usage": [[217, 125]], "time_usage": [3.91566801071167]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "# [start]\n# all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted = np.all(np.diff(a) >= 0)", "error": "", "token_usage": [[180, 92]], "time_usage": [2.8615806102752686]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "# [start]\n# ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones.\n# [end]\nimport numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.ones((3, 4), dtype=bool)", "error": "", "token_usage": [[166, 79]], "time_usage": [2.7206003665924072]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "import numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[149, 65]], "time_usage": [2.0656681060791016]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[159, 72]], "time_usage": [2.538665533065796]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "import numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.size(arr) == 0", "error": "", "token_usage": [[141, 51]], "time_usage": [1.8034915924072266]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "def count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.sum(arr)", "error": "", "token_usage": [[183, 40]], "time_usage": [1.7505710124969482]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "# [start]\n# vstack(tup): Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n    return np.vstack((arr, row))", "error": "", "token_usage": [[164, 75]], "time_usage": [2.4741222858428955]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "b = a[4:]", "error": "", "token_usage": [[144, 10]], "time_usage": [0.8331212997436523]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "result = arr.reshape((arr.shape[0]*arr.shape[1], arr.shape[2]))", "error": "", "token_usage": [[200, 24]], "time_usage": [1.188230276107788]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "import numpy as np\n\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n    # To achieve it, Does anyone know a more elegant way to get the result?\n    return np.squeeze(np.asarray(M))", "error": "", "token_usage": [[208, 70]], "time_usage": [2.316065549850464]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "# [start]\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# [end]\nimport numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.where(arr == 0)[0]", "error": "", "token_usage": [[174, 87]], "time_usage": [2.563849925994873]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "# [start]\n# bincount(x, weights=None, minlength=0): Count number of occurrences of each value in array of non-negative ints.\n# argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis.\n# [end]\nimport numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    counts = np.bincount(arr)\n    return np.argmax(counts)", "error": "", "token_usage": [[190, 107]], "time_usage": [3.1506295204162598]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\n# List of arrays.\nL = [np.random.randn(5,4,2,5,1,2) for i in range(10)]\n# Stack them using axis that is negative one.\nM = np.stack(L, axis=-1)", "error": "", "token_usage": [[179, 90]], "time_usage": [2.7943499088287354]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "# [start]\n# append(object, /): Append object to the end of the list.\n# [end]\nimport numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    arr.append(arr[0])\n    return arr", "error": "", "token_usage": [[162, 75]], "time_usage": [2.27341365814209]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "import numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return np.array(arr, dtype=float)", "error": "", "token_usage": [[140, 51]], "time_usage": [1.749983310699463]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "# [start]\n# argmax(a, axis=None, out=None): Returns the indices of the maximum values along an axis.\n# [end]\nimport numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[173, 86]], "time_usage": [2.6926774978637695]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "import numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    # Return the transformed tuple\n    return tuple(arr)", "error": "", "token_usage": [[128, 35]], "time_usage": [1.6001591682434082]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "# [start]\n# any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.any(arr)", "error": "", "token_usage": [[175, 83]], "time_usage": [2.5424787998199463]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "# [start]\n# where(condition, x=None, y=None): where(condition, [x, y]) Return elements chosen from `x` or `y` depending on `condition`.\n# logical_and(a, b, *args, **kwargs): logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Compute the truth value of x1 AND x2 element-wise.\n# [end]\nimport numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    condition = np.logical_and(arr >= low, arr <= high)\n    indices = np.where(condition)\n    return indices", "error": "", "token_usage": [[247, 174]], "time_usage": [4.948379039764404]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "def convert_nan_to_zero(arr):\n    # convert nan value to zero\n    # Return the changed array\n    return np.nan_to_num(arr)", "error": "", "token_usage": [[160, 34]], "time_usage": [1.5379834175109863]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "# [start]\n# isnan(x, /): Return True if x is a NaN (not a number), and False otherwise.\n# any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Return the final result\n    return arr[~np.isnan(arr).any(axis=1)]", "error": "", "token_usage": [[209, 125]], "time_usage": [4.0104451179504395]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "result = np.where(a < 0, 0, a)", "error": "", "token_usage": [[201, 18]], "time_usage": [1.1037681102752686]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "import numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    \n    c[0::2] = a\n    c[1::2] = b\n    \n    return c", "error": "", "token_usage": [[157, 84]], "time_usage": [2.907196283340454]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# [start]\n# argpartition(a, kth, axis=-1, kind='introselect', order=None): Perform an indirect partition along the given axis using the algorithm specified by the `kind` keyword.\n# [end]\nimport numpy as np\n\nA = np.array([1, 7, 9, 2, 0.1, 17, 17, 1.5])\nk = 3\n\n# Find the index of the k smallest values of a numpy array\nidx = np.argpartition(A, k)[:k]", "error": "", "token_usage": [[206, 118]], "time_usage": [3.77785325050354]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "output = np.concatenate(input_list).ravel()", "error": "", "token_usage": [[316, 14]], "time_usage": [1.007737636566162]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "np.array_split(x, 3)", "error": "", "token_usage": [[159, 12]], "time_usage": [0.8571560382843018]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# [end]\nimport numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    return np.linalg.inv(matrix)", "error": "", "token_usage": [[184, 93]], "time_usage": [2.7580678462982178]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "# [start]\n# mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis.\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    return np.mean(arr.reshape(-1, 3), axis=1)", "error": "", "token_usage": [[233, 151]], "time_usage": [4.2330756187438965]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "# [start]\n# insert(index, object, /): Insert object before index.\n# [end]\nimport numpy as np\n\ndef prepend_element_to_array(arr, element):\n    # Prepend element to numpy array\n    # Return the array\n    return np.insert(arr, 0, element)", "error": "", "token_usage": [[152, 65]], "time_usage": [2.2413315773010254]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "# [start]\n# hstack(tup): Stack arrays in sequence horizontally (column wise).\n# [end]\nimport numpy as np\n\na = np.array([np.array([13.16]), np.array([1.58 , 1.2]), np.array([13.1]), np.array([1. , 2.6])], dtype=object)\n# I need a general way to flatten that array into a single array of N elements, with N=every float in all the sub-arrays.\n\nout = np.hstack(a).flatten()", "error": "", "token_usage": [[209, 117]], "time_usage": [3.4054808616638184]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "out = np.searchsorted(master, search, side='left')", "error": "", "token_usage": [[183, 17]], "time_usage": [1.0971760749816895]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "# [start]\n# min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis.\n# [end]\nimport numpy as np\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    return np.min(arr)", "error": "", "token_usage": [[188, 96]], "time_usage": [3.0007758140563965]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "import numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.diff(z)", "error": "", "token_usage": [[144, 50]], "time_usage": [1.9006013870239258]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "# [start]\n# full(shape, fill_value, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with `fill_value`.\n# [end]\nimport numpy as np\n\n# How do I create an array where every entry is the same value?\n# I know numpy.ones() and numpy.zeros() do this for 1's and 0's, but what about -1?\n# the shape of the array is (5, 5)\nout = np.full((5, 5), -1)", "error": "", "token_usage": [[206, 119]], "time_usage": [3.7305490970611572]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[196, 112]], "time_usage": [3.0744259357452393]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# arange(start, stop=None, step=1, dtype=None, ctx=None): Return evenly spaced values within a given interval.\n# alen(a): Return the length of the first dimension of the input array.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\n\ndef check_elements_in_array(A, B):\n    \"\"\"\n    Check if each element in numpy array A is in numpy array B.\n    \n    Parameters:\n    A (numpy.ndarray): Input array.\n    B (numpy.ndarray): Array to check against.\n    \n    Returns:\n    tuple: Indices of A where the elements are in B, indices of A where the elements are not in B.\n    \"\"\"\n    in_indices = np.where(np.isin(A, B))[0]\n    not_in_indices = np.where(~np.isin(A, B))[0]\n    return in_indices, not_in_indices\n\nD = check_elements_in_array(A, B)", "error": "", "token_usage": [[295, 326]], "time_usage": [8.779174327850342]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "b = np.where((a[:,0]==0) & (a[:,1]==1))", "error": "", "token_usage": [[244, 23]], "time_usage": [1.5214688777923584]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "# Conducting the reverse operation along with the last dimension\nb = np.flip(a, axis=2)", "error": "", "token_usage": [[200, 26]], "time_usage": [1.5654919147491455]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "# [start]\n# min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Return the minimum of an array or minimum along an axis.\n# [end]\nimport numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n# Firstly, We need to find the minimun value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult = np.subtract(a, np.min(a, axis=0))", "error": "", "token_usage": [[209, 123]], "time_usage": [3.809781551361084]}
{"task_id": "NumpyEval/1", "success": true, "generated_code": "import numpy as np\n\na = np.array([[2,3,2],[5,6,1]])\nb = np.array([3,5])\n# How to multiply a nD array with 1D array, where len(1D-array) == len(nD array)?\n# You need to convert array b to a (2, 1) shape array, use None or numpy.newaxis in the index tuple:\nc = a * b[:, None]", "error": "", "token_usage": [[190, 98]], "time_usage": [3.2447729110717773]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array.\n# [end]\nimport numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\n\nb = np.reshape(a, (2, 4, 2, 4))\nc = np.transpose(b, (0, 2, 1, 3))", "error": "", "token_usage": [[241, 177]], "time_usage": [5.045466899871826]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "import numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[184, 92]], "time_usage": [2.777278423309326]}
