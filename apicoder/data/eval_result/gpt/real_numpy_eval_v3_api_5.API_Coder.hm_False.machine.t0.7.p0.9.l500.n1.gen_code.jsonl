{"task_id": "NumpyEval/1", "success": true, "generated_code": "# [start]\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# [end]\nimport numpy as np\n\na = np.array([[2,3,2],[5,6,1]])\nb = np.array([3,5])\n# How to multiply a nD array with 1D array, where len(1D-array) == len(nD array)?\n# You need to convert array b to a (2, 1) shape array, use None or numpy.newaxis in the index tuple:\nc = np.multiply(a, b[:, np.newaxis])", "error": "", "token_usage": [[409, 320]], "time_usage": [9.303822755813599]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# rpartition(a, sep): Partition (split) each element around the right-most separator.\n# hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise).\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# [end]\nimport numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chunks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\n\n# Reshape a to (2, 4, 2, 4)\nb = a.reshape(2, 4, 2, 4)\n\n# Transpose b by (0, 2, 1, 3)\nc = np.transpose(b, (0, 2, 1, 3))", "error": "", "token_usage": [[326, 293]], "time_usage": [8.802353143692017]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`.\n# slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`.\n# clump_unmasked(a): Return list of slices corresponding to the unmasked clumps of a 1-D array.\n# slice_assign_scalar(self, value, begin, end, step): Assign the scalar to a cropped subset of this NDArray.\n# [end]\nimport numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[310, 218]], "time_usage": [6.723248720169067]}
{"task_id": "NumpyEval/0", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays.\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# block(arrays): Assemble an nd-array from nested lists of blocks.\n# [end]\nimport numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[319, 251]], "time_usage": [7.4428651332855225]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "c = np.column_stack((a, b))", "error": "", "token_usage": [[273, 14]], "time_usage": [1.0825839042663574]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# inner(a, b): Inner product of two arrays.\n# atleast_2d(*args, **params): atleast_2d(*args, **kwargs) View inputs as arrays with at least two dimensions.\n# innerproduct(a, b): inner(a, b) Inner product of two arrays.\n# atleast_1d(*args, **params): atleast_1d(*args, **kwargs) Convert inputs to arrays with at least one dimension.\n# [end]\nimport numpy as np\n\na = np.array([1,3,4])\nb = np.array([5,2,1])\n\n# I have two simple one-dimensional arrays in NumPy. \n# I should be able to concatenate them using numpy.concatenate.\nc = np.concatenate((a, b))", "error": "", "token_usage": [[276, 185]], "time_usage": [5.634765863418579]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`.\n# slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`.\n# hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise).\n# compress(condition, a, axis=None, out=None): Return selected slices of an array along given axis.\n# [end]\nimport numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Complete the code here\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "error": "", "token_usage": [[321, 247]], "time_usage": [7.258878469467163]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "count_value = np.count_nonzero((a > 2) & (a < 8))", "error": "", "token_usage": [[290, 24]], "time_usage": [1.4956603050231934]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "result_arr = np.choose([1, 4], arr)", "error": "", "token_usage": [[320, 17]], "time_usage": [1.1135122776031494]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "# [start]\n# isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number).\n# apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes.\n# all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True.\n# seterr(all=None, divide=None, over=None, under=None, invalid=None): Set how floating-point errors are handled.\n# anomalies(a, *args, **params): anom(self, axis=None, dtype=None) Compute the anomalies (deviations from the arithmetic mean) along the given axis.\n# [end]\nimport numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0\na.imag[np.abs(a.imag) < tol] = 0", "error": "", "token_usage": [[347, 263]], "time_usage": [7.5218284130096436]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "# [start]\n# diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i.\n# diag(v, k=0): Extract a diagonal or construct a diagonal array.\n# fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality.\n# cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None): Return the cross product of two (arrays of) vectors.\n# vdot(a, b): Return the dot product of two vectors.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n\n# Set the diagonal elements to 0\nnp.fill_diagonal(df.values, 0)", "error": "", "token_usage": [[297, 202]], "time_usage": [6.120843172073364]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[370, 19]], "time_usage": [1.1035869121551514]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "# [start]\n# recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes.\n# array(object, dtype=None, ctx=None): Create an array.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# ndpointer(dtype=None, ndim=None, shape=None, flags=None): Array-checking restype/argtypes.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# [end]\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[325, 235]], "time_usage": [6.981635808944702]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "a_shape = np.shape(a)", "error": "", "token_usage": [[234, 11]], "time_usage": [0.8773829936981201]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "array = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[438, 16]], "time_usage": [1.1008646488189697]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "sum_value = df.sum().sum()", "error": "", "token_usage": [[314, 12]], "time_usage": [0.9451265335083008]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "c = np.in1d(a, b)", "error": "", "token_usage": [[314, 14]], "time_usage": [1.036158800125122]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = np.mean([a, b, c], axis=0)", "error": "", "token_usage": [[299, 20]], "time_usage": [1.1796483993530273]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(a[:-1] != a[1:])[0] + 1", "error": "", "token_usage": [[369, 24]], "time_usage": [1.319002389907837]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "b = a[..., newaxis]", "error": "", "token_usage": [[342, 11]], "time_usage": [0.9116730690002441]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "arr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[348, 15]], "time_usage": [1.0293161869049072]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# empty(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, without initializing entries.\n# fromregex(file, regexp, dtype, encoding=None): Construct an array from a text file, using regular expression parsing.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# [end]\nimport numpy as np\n\na = np.arange(0,10)\n# How to print a Numpy array without brackets?\n# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\na_string = np.array2string(a, separator=' ')", "error": "", "token_usage": [[347, 258]], "time_usage": [7.262342929840088]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "out = np.multiply(a, b[:, np.newaxis])", "error": "", "token_usage": [[336, 15]], "time_usage": [1.0801513195037842]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "out = np.squeeze(x)", "error": "", "token_usage": [[244, 10]], "time_usage": [0.8375833034515381]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "newrecarray = np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "error": "", "token_usage": [[407, 28]], "time_usage": [1.250504732131958]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "import numpy as np\n\nlist_of_arrays = map(lambda x: x*np.ones(2), range(5))\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n# s there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\nmyarray = np.array(list_of_arrays)\n\n# Complete the code by calling the dstack function to stack the arrays in myarray depth wise\nresult = np.dstack(myarray)", "error": "", "token_usage": [[384, 197]], "time_usage": [5.792174816131592]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "import numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges = np.histogram(arr, bins=10)\ncumulative_hist = np.cumsum(hist)", "error": "", "token_usage": [[312, 91]], "time_usage": [2.9814045429229736]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "a_str = np.array2string(a, threshold=np.inf)", "error": "", "token_usage": [[381, 17]], "time_usage": [0.9118404388427734]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[355, 81]], "time_usage": [2.7071433067321777]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "import numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[np.all(arr != 0, axis=1)]", "error": "", "token_usage": [[332, 95]], "time_usage": [3.2445366382598877]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "result = np.core.defchararray.add(a1, a2)", "error": "", "token_usage": [[329, 19]], "time_usage": [0.9841623306274414]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "# [start]\n# mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis.\n# nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>): Compute the variance along the specified axis, while ignoring NaNs.\n# nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>): Compute the arithmetic mean along the specified axis, ignoring NaNs.\n# nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values.\n# nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>): Compute the median along the specified axis, while ignoring NaNs.\n# [end]\nimport numpy as np\n\ndat = np.array([[1,2,3], [4,5,np.nan], [np.nan,6,np.nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\n# How can I calculate matrix mean values along the row of matrix, but to remove nan values from calculation?\n# If all row values is NaNs, the mean value is set to NaN.\nmm = np.nanmean(mdat, axis=1)", "error": "", "token_usage": [[371, 283]], "time_usage": [8.084171295166016]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "# [start]\n# sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array.\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# sort_complex(a): Sort a complex array using the real part first, then the imaginary part.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# [end]\nimport numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind = np.lexsort((a[:, 1], a[:, 0]))", "error": "", "token_usage": [[331, 248]], "time_usage": [7.307220458984375]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "# [start]\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# array(object, dtype=None, ctx=None): Create an array.\n# bmat(obj, ldict=None, gdict=None): Build a matrix object from a string, nested sequence, or array.\n# tolist(self): Return the matrix as a (possibly nested) list.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# [end]\nimport numpy as np\n\na = np.matrix([[0.16666667, 0.66666667, 0.16666667]])\n# how can I make a python list obj from this matrix?\n# # the list should be one dimensional and contain all values of the matrix\na_list = a.tolist()[0]", "error": "", "token_usage": [[297, 204]], "time_usage": [5.9478771686553955]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "# [start]\n# copy(a, order='K', subok=False): Return an array copy of the given object.\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# copyto(self, other): Copies the value of this array to another array.\n# array_split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays.\n# [end]\nimport numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nnp.copyto(b[1:4, 1:4], a)", "error": "", "token_usage": [[304, 222]], "time_usage": [6.317736864089966]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# array_function_dispatch(dispatcher, *, module='numpy.char', verify=True, docs_from_dispatcher=False): partial(func, *args, **keywords) - new function with partial application of the given arguments and keywords.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# require(a, dtype=None, requirements=None, *, like=None): Return an ndarray of the provided type that satisfies requirements.\n# [end]\nimport numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5])\n# if function is c(i, j) = a(i) + b(j)*2:\nc = np.fromfunction(lambda i, j: a[i] + b[j]*2, (len(a), len(b)))", "error": "", "token_usage": [[340, 266]], "time_usage": [7.77005672454834]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "# [start]\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# hstack(tup): Stack arrays in sequence horizontally (column wise).\n# vstack(tup): Stack arrays in sequence vertically (row wise).\n# choose(a, choices, out=None, mode='raise'): Construct an array from an index array and a list of arrays to choose from.\n# [end]\nimport numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 1] = x", "error": "", "token_usage": [[319, 229]], "time_usage": [6.361183404922485]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "# [start]\n# masked_less(x, value, copy=True): Mask an array where less than a given value.\n# masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value.\n# masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value.\n# masked_greater(x, value, copy=True): Mask an array where greater than a given value.\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# [end]\nimport numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = np.ma.compressed(m)  # complete the code\n\nout", "error": "", "token_usage": [[285, 201]], "time_usage": [5.763571739196777]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "b = a.astype(\"float32\")", "error": "", "token_usage": [[344, 12]], "time_usage": [0.9423367977142334]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "vals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[394, 16]], "time_usage": [1.0711047649383545]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "concated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[393, 16]], "time_usage": [1.017282247543335]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "# [start]\n# argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis.\n# argmax(self, axis=None, out=None): Return indices of the maximum values along the given axis.\n# min(self, axis=None, out=None): Return the minimum value along an axis.\n# max(self, axis=None, out=None, keepdims=False): Return the maximum along a given axis.\n# nonzero(self): Return the indices of the elements that are non-zero.\n# [end]\nimport numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[246, 157]], "time_usage": [4.545673370361328]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "# [start]\n# clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max].\n# disp(mesg, device=None, linefeed=True): Display a message on a device.\n# frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array.\n# loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None): Load data from a text file.\n# displayhook(object, /): Print an object to sys.\n# [end]\nimport numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    \n    ncols = L\n    \n    return np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(S*a.itemsize, a.itemsize))", "error": "", "token_usage": [[339, 276]], "time_usage": [7.581185340881348]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "out = a[b[1], b[1]]", "error": "", "token_usage": [[346, 15]], "time_usage": [1.0218756198883057]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# isposinf(x, out=None, **kwargs): Test element-wise for positive infinity, return result as bool array.\n# absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise.\n# abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise.\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]", "error": "", "token_usage": [[314, 228]], "time_usage": [6.6717095375061035]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array.\n# vstack(arrays, out=None): Stack arrays in sequence vertically (row wise).\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# [end]\nimport numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    # How to add a new row to an empty numpy array\n    # example: \n    # input: np.array([1,2,3]) and np.array([4,5,6])\n    # output: np.array([[1,2,3],[4,5,6]])\n    new_arr = np.vstack((arr1, arr2))\n    return new_arr", "error": "", "token_usage": [[354, 267]], "time_usage": [7.927290916442871]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.array(matrix).flatten()", "error": "", "token_usage": [[297, 207]], "time_usage": [6.467630863189697]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "m = np.repeat(a[cond], n)", "error": "", "token_usage": [[383, 14]], "time_usage": [1.0014071464538574]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    target = np.divide(t[1:], t[:-1])\n    return target", "error": "", "token_usage": [[439, 358]], "time_usage": [10.23219609260559]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "# [start]\n# unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# searchsorted(a, v, side='left', sorter=None): Find indices where elements should be inserted to maintain order.\n# sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise.\n# [end]\nimport numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout = np.unravel_index(np.argmin(A), A.shape)\n\nout", "error": "", "token_usage": [[321, 238]], "time_usage": [7.298574447631836]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# hsplit(x, *args, **params): hsplit(*args, **kwargs) Split an array into multiple sub-arrays horizontally (column-wise).\n# [end]\nimport numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    # How do I extract a sub-array from a numpy 2d array? \n    # I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    # Return a sub-array from a numpy 2d array.\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[354, 266]], "time_usage": [8.239709377288818]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1,2,3],\n              [3,2,4]])\n\nmy_dict = {1:23, 2:34, 3:36, 4:45}\n# I am trying to translate every element of a numpy.array according to a given key\n# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\nout = np.vectorize(my_dict.get)(a)", "error": "", "token_usage": [[355, 103]], "time_usage": [3.376580238342285]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "# [start]\n# masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values.\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function.\n# MaskedArray(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values.\n# masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value.\n# [end]\nimport numpy as np\n\nx = np.array([range(100, 1, -1)])\n\n# This will tell me those values\n# generate a mask to find all values that are even numbers\nmask = np.mod(x, 2) == 0\n\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout = np.where(mask)[0]", "error": "", "token_usage": [[368, 292]], "time_usage": [8.51069450378418]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "# [start]\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis).\n# hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise).\n# row_stack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n    \n    consecutive_groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in consecutive_groups]", "error": "", "token_usage": [[416, 353]], "time_usage": [9.729962348937988]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "out = dists[np.logical_and(dists >= r, dists <= r + dr)]", "error": "", "token_usage": [[383, 23]], "time_usage": [1.24086332321167]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# ndarray(handle, writable=True): ndarray(handle, writable=True): An array object represents a multidimensional, homogeneous array of fixed-size items.\n# [end]\nimport numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.bitwise_xor(np.bitwise_xor(x, y), z)", "error": "", "token_usage": [[334, 252]], "time_usage": [6.579029083251953]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# array(object, dtype=None, ctx=None): Create an array.\n# dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis).\n# [end]\nimport numpy as np\n\na = np.array([ 0,  3,  6,  9, 12])\nb = np.array([ 1,  4,  7, 10, 13])\nc = np.array([ 2,  5,  8, 11, 14])\n\n# How can I join them using numpy methods\n# You can transpose and flatten the arrays:\nd = np.vstack((a, b, c)).flatten()", "error": "", "token_usage": [[317, 230]], "time_usage": [5.899744749069214]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "# [start]\n# array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`.\n# unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array.\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# vstack(arrays, out=None): Stack arrays in sequence vertically (row wise).\n# block(arrays): Assemble an nd-array from nested lists of blocks.\n# [end]\nimport numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [1, 1, 1, 1, 1, 0]])\n\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[326, 236]], "time_usage": [6.41751503944397]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "# [start]\n# dist(p, q, /): Return the Euclidean distance between two points p and q.\n# radians(x, /): Convert angle x from degrees to radians.\n# degrees(x, /): Convert angle x from radians to degrees.\n# arctanh(x): Compute the inverse hyperbolic tangent of `x`.\n# norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm.\n# [end]\nimport numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a - b)", "error": "", "token_usage": [[235, 145]], "time_usage": [4.4309093952178955]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "result = np.array(list(itertools.zip_longest(*data, fillvalue=0)))", "error": "", "token_usage": [[376, 22]], "time_usage": [1.0424737930297852]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "# [start]\n# asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[377, 292]], "time_usage": [8.42465853691101]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# remove(self, v, /): Remove the first occurrence of v in the array.\n# [end]\nimport numpy as np\n\ndata = np.array([1,2,3,4,5,6,7,8,9])\n# How to remove specific elements in a numpy array\uff1f\n# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\nindex = [2, 3, 6]\nresult = np.delete(data, index)\nresult", "error": "", "token_usage": [[325, 235]], "time_usage": [6.322599649429321]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted = np.all(a[:-1] <= a[1:])", "error": "", "token_usage": [[266, 62]], "time_usage": [2.130046844482422]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# array(object, dtype=None, ctx=None): Create an array.\n# as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER.\n# ones(shape, dtype=None, order='C', *, like=None): Return a new array of given shape and type, filled with ones.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.ones((3, 4), dtype=bool)", "error": "", "token_usage": [[236, 149]], "time_usage": [4.561432361602783]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# fromlist(self, list, /): Append items to array from list.\n# item(self, *args): Copy an element of an array to a standard Python scalar and return it.\n# [end]\nimport numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[304, 220]], "time_usage": [7.065682411193848]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# block(arrays): Assemble an nd-array from nested lists of blocks.\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[243, 156]], "time_usage": [5.0002968311309814]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True.\n# in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# [end]\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the reuslt that contains True or False\n    return arr.size == 0", "error": "", "token_usage": [[299, 209]], "time_usage": [6.482141494750977]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "# [start]\n# count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``.\n# bincount(x, weights=None, minlength=0): Count number of occurrences of each value in array of non-negative ints.\n# size(a, axis=None): Return the number of elements along a given axis.\n# count_masked(arr, axis=None): Count the number of masked elements along the given axis.\n# [end]\nimport numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.count_nonzero(arr)", "error": "", "token_usage": [[275, 185]], "time_usage": [5.521268606185913]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "# [start]\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# vstack(tup): Stack arrays in sequence vertically (row wise).\n# column_stack(tup): Stack 1-D arrays as columns into a 2-D array.\n# hstack(arrays): Stack arrays in sequence horizontally (column wise).\n# block(arrays): Assemble an nd-array from nested lists of blocks.\n# [end]\nimport numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n    return np.vstack((arr, row))", "error": "", "token_usage": [[230, 141]], "time_usage": [4.275768280029297]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "b = a[4:]", "error": "", "token_usage": [[271, 10]], "time_usage": [0.9622716903686523]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# shape(obj): Return the shape of an array.\n# transpose(a, axes=None): Permute the dimensions of an array.\n# diagflat(x, *args, **params): diagflat(*args, **kwargs) Create a two-dimensional array with the flattened input as a diagonal.\n# [end]\nimport numpy as np\n\narr = np.zeros((50,100,25))\n# Is there a quick way to \"sub-flatten\" or flatten only some of the first dimensions in a numpy array?\n# Given a numpy array of dimensions (50,100,25), the resultant dimensions would be (5000,25)\nresult = arr.reshape((arr.shape[0]*arr.shape[1], arr.shape[2]))", "error": "", "token_usage": [[273, 194]], "time_usage": [5.550114154815674]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "# [start]\n# vander(x, n=None): Generate a Vandermonde matrix.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array.\n# iscomplex(x): Returns a bool array, where True if input element is complex.\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# [end]\nimport numpy as np\n\ndef matrix2array(M):\n    return np.array(M).flatten()", "error": "", "token_usage": [[270, 133]], "time_usage": [4.112659215927124]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis.\n# triu_indices(n, k=0, m=None): Return the indices for the upper-triangle of an (n, m) array.\n# argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis.\n# [end]\nimport numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.argwhere(arr == 0)", "error": "", "token_usage": [[293, 205]], "time_usage": [6.0225536823272705]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "# [start]\n# count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``.\n# round(a, decimals=0, out=None): Round an array to the given number of decimals.\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# around(a, *args, **kwargs): Round an array to the given number of decimals.\n# [end]\nimport numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    most_frequent_index = np.argmax(counts)\n    most_frequent_number = unique_elements[most_frequent_index]\n    return most_frequent_number", "error": "", "token_usage": [[271, 219]], "time_usage": [6.269796133041382]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "M = np.stack(L, axis=-1)", "error": "", "token_usage": [[259, 14]], "time_usage": [1.074045181274414]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# array(object, dtype=None, ctx=None): Create an array.\n# append(arr, values, axis=None): Append values to the end of an array.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# fromlist(self, list, /): Append items to array from list.\n# [end]\nimport numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    return np.append(arr, arr[0])", "error": "", "token_usage": [[276, 188]], "time_usage": [5.1199870109558105]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# empty_like(prototype, dtype=None, order='C', subok=False, shape=None): Return a new array with the same shape and type as a given array.\n# array(object, dtype=None, ctx=None): Create an array.\n# empty(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None): Return a new array of given shape and type, without initializing entries.\n# reshape(a, new_shape, order='C'): Returns an array containing the same data with a new shape.\n# [end]\nimport numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return arr.astype(float)", "error": "", "token_usage": [[286, 194]], "time_usage": [6.340335130691528]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "# [start]\n# max(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# amax(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements.\n# argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis.\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# [end]\nimport numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[321, 228]], "time_usage": [6.676776647567749]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "# [start]\n# reshape(self, *args, **kwargs): Returns a copy of the array with a new shape.\n# transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate.\n# conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise.\n# [end]\nimport numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    tuple_arr = tuple(arr)\n    # Return the transformed tuple\n    return tuple_arr", "error": "", "token_usage": [[295, 209]], "time_usage": [5.954909324645996]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array.\n# isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array.\n# print_assert_equal(test_string, actual, desired): Test if two objects are equal, and print an error message if test fails.\n# all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.all(arr == 0)", "error": "", "token_usage": [[269, 180]], "time_usage": [5.45100474357605]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis.\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# argmax(a, *args, **params): argmax(self, axis=None, fill_value=None, out=None) Returns array of indices of the maximum values along the given axis.\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# [end]\nimport numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    return np.argwhere((arr >= low) & (arr <= high))", "error": "", "token_usage": [[305, 223]], "time_usage": [6.514544725418091]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "# [start]\n# nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values.\n# nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values.\n# power(a, b, third=None): Returns element-wise base array raised to power from second array.\n# nanmin(a, axis=None, out=None, keepdims=<no value>): Return minimum of an array or minimum along an axis, ignoring any NaNs.\n# place(arr, mask, vals): Change elements of an array based on conditional and input values.\n# [end]\nimport numpy as np\n\ndef convert_nan_to_zero(arr):\n    # convert nan value to zero\n    arr[np.isnan(arr)] = 0\n    # Return the changed array\n    return arr", "error": "", "token_usage": [[304, 220]], "time_usage": [6.4719579219818115]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# remove(self, v, /): Remove the first occurrence of v in the array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# sqrt(a, *args, **kwargs): sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the non-negative square-root of an array, element-wise.\n# zeros(shape, dtype=None, order='C', ctx=None): Return a new array of given shape and type, filled with zeros.\n# [end]\nimport numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Check if each element in the array is numeric\n    mask = np.array([np.all(np.isfinite(row)) for row in arr])\n    \n    # Return the rows that contain only numeric values\n    return arr[mask]", "error": "", "token_usage": [[311, 253]], "time_usage": [7.264575004577637]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "result = np.where(a < 0, 0, a)", "error": "", "token_usage": [[296, 18]], "time_usage": [1.1306018829345703]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "# [start]\n# transpose(a, axes=None): Permute the dimensions of an array.\n# sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis.\n# truncate(path, length): Truncate a file, specified by path, to a specific length.\n# dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis).\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    c[0::2] = a\n    c[1::2] = b\n    return c", "error": "", "token_usage": [[291, 217]], "time_usage": [6.939810276031494]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# Find the index of the k smallest values of a numpy array\nidx = np.argsort(A)[:k]", "error": "", "token_usage": [[285, 26]], "time_usage": [1.4635562896728516]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "output = np.concatenate(input_list).ravel()", "error": "", "token_usage": [[388, 14]], "time_usage": [0.9943153858184814]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "np.array_split(x, 3)", "error": "", "token_usage": [[256, 12]], "time_usage": [0.9430112838745117]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# tensorinv(a, ind=2): Compute the 'inverse' of an N-dimensional array.\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# [end]\nimport numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    return np.linalg.inv(matrix)", "error": "", "token_usage": [[270, 179]], "time_usage": [5.190493822097778]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "# [start]\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# cumsum(a, *args, **params): cumsum(self, axis=None, dtype=None, out=None) Return the cumulative sum of the array elements over the given axis.\n# product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    return np.mean(arr.reshape(-1, 3), axis=1)", "error": "", "token_usage": [[330, 248]], "time_usage": [7.022690057754517]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# fromlist(self, list, /): Append items to array from list.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# append(self, v, /): Append new value v to the end of the array.\n# [end]\nimport numpy as np\n\ndef prepend_element_to_array(arr, element):\n    # Prepend element to numpy array\n    # Return the array\n    return np.append([element], arr)", "error": "", "token_usage": [[283, 194]], "time_usage": [5.562627553939819]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "out = np.concatenate(a).flatten()", "error": "", "token_usage": [[352, 12]], "time_usage": [0.9563746452331543]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "out = np.searchsorted(master, search)", "error": "", "token_usage": [[276, 13]], "time_usage": [0.8924567699432373]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "# [start]\n# fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate.\n# apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes.\n# min(a, axis=None, keepdims=False, out=None): Return the minimum of an array or minimum along an axis.\n# apply_along_axis(func1d, axis, arr, *args, **kwargs): Apply a function to 1-D slices along the given axis.\n# amin(a, axis=None, keepdims=False, out=None): Return the minimum of an array or minimum along an axis.\n# [end]\nimport numpy as np\n\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    return np.min(arr)", "error": "", "token_usage": [[282, 190]], "time_usage": [5.5975587368011475]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# i0(x): Modified Bessel function of the first kind, order 0.\n# getI(self): Returns the (multiplicative) inverse of invertible `self`.\n# irfftn(a, s=None, axes=None, norm=None): Computes the inverse of `rfftn`.\n# asinh(x, /): Return the inverse hyperbolic sine of x.\n# [end]\nimport numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.cumsum(z[::-1])[::-1]", "error": "", "token_usage": [[244, 156]], "time_usage": [5.027538537979126]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "import numpy as np\n\n# How do I create an array where every entry is the same value?\n# I know numpy.ones() and numpy.zeros() do this for 1's and 0's, but what about -1?\n# the shape of the array is (5, 5)\nout = np.full((5, 5), -1)", "error": "", "token_usage": [[335, 77]], "time_usage": [2.5805816650390625]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones.\n# remove(self, v, /): Remove the first occurrence of v in the array.\n# replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None): Rename a file or directory, overwriting the destination.\n# renames(old, new): renames(old, new) Super-rename; create directories as necessary and delete any left empty.\n# [end]\nimport numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[292, 208]], "time_usage": [5.74006462097168]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of a 1-D array is also present in a second array.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\nD = np.in1d(A, B)\nE = np.where(D)[0]\nF = np.where(~D)[0]", "error": "", "token_usage": [[365, 500]], "time_usage": [13.148849964141846]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "b = np.where((a[:, 0] == 0) & (a[:, 1] == 1))", "error": "", "token_usage": [[321, 29]], "time_usage": [1.2938497066497803]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "# [start]\n# rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position.\n# flipud(m): Reverse the order of elements along axis 0 (up/down).\n# flip(m, axis=None, out=None): Reverse the order of elements in an array along the given axis.\n# reverse(): Reverse *IN PLACE*.\n# fliplr(m): Reverse the order of elements along axis 1 (left/right).\n# [end]\nimport numpy as np\n\na = np.array([[[10, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]],\n              [[1, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]]])\n\n# Conducting the reverse operation along with the last dimension\n\nb = np.flip(a, axis=2)", "error": "", "token_usage": [[311, 212]], "time_usage": [6.0803914070129395]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n\n# Firstly, We need to find the minimun value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult = np.subtract(a, np.amin(a, axis=0))", "error": "", "token_usage": [[320, 78]], "time_usage": [3.0040712356567383]}
