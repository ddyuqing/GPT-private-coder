{"task_id": "NumpyEval/1", "success": true, "generated_code": "import numpy as np\n\na = np.array([[2,3,2],[5,6,1]])\nb = np.array([3,5])\n# How to multiply a nD array with 1D array, where len(1D-array) == len(nD array)?\n# You need to convert array b to a (2, 1) shape array, use None or numpy.newaxis in the index tuple:\nc = a * b[:, None]", "error": "", "token_usage": [[190, 98]], "time_usage": [2.7725751399993896]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "import numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\nb = a.reshape(2, 4, 2, 4).transpose(0, 2, 1, 3)", "error": "", "token_usage": [[188, 117]], "time_usage": [3.426790714263916]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "import numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[184, 92]], "time_usage": [2.710869789123535]}
{"task_id": "NumpyEval/0", "success": true, "generated_code": "import numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[144, 76]], "time_usage": [2.2331016063690186]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1,3,4],[1,2,3],[1,2,1]])\nb = np.array([1,2,3])\n# How to add items into a numpy array?\n# add one element to each row using column stack operation.\nc = np.column_stack((a, b))", "error": "", "token_usage": [[165, 75]], "time_usage": [2.4793059825897217]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,3,4])\nb = np.array([5,2,1])\n\n# I have two simple one-dimensional arrays in NumPy. \n# I should be able to concatenate them using numpy.concatenate.\nc = np.concatenate((a, b))", "error": "", "token_usage": [[156, 65]], "time_usage": [2.013030767440796]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "import numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Dynamically slice a numpy array along a specific axis\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "error": "", "token_usage": [[192, 124]], "time_usage": [3.5661635398864746]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "import numpy as np\n\na = np.arange(2*3*2).reshape((2,3,2))\n# How to count values in a certain range in a Numpy array?\n# the number of elements fulfilling 2 < x < 8 is:\ncount_value = np.sum((a > 2) & (a < 8))", "error": "", "token_usage": [[159, 76]], "time_usage": [2.299459457397461]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "import numpy as np\n\n# I have a NumPy array that looks like this:\narr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])\n# How can I get multiple values from this array by index?\n# How can I get the values at the index positions 1 and 4?\nresult_arr = arr[[1, 4]]", "error": "", "token_usage": [[186, 95]], "time_usage": [2.7666802406311035]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "import numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0\na.imag[np.abs(a.imag) < tol] = 0", "error": "", "token_usage": [[210, 126]], "time_usage": [3.601656436920166]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef set_diagonal_to_zero(df):\n    np.fill_diagonal(df.values, 0)\n    return df\n\nset_diagonal_to_zero(df)", "error": "", "token_usage": [[160, 92]], "time_usage": [2.63549542427063]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[202, 117]], "time_usage": [3.534655809402466]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[158, 68]], "time_usage": [2.457256555557251]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "import numpy as np\n\na = np.zeros((2,5))\n# How can I get the shape of NumPy array?\na_shape = a.shape", "error": "", "token_usage": [[131, 36]], "time_usage": [1.4227275848388672]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "import numpy as np\nresult = {0: 1.1, 1: 0.5, 2: 0.4, 3: 0.4, 4: 1.0, 5: 0.1, 6: 0.2}\n\nnames = ['id','data']\nformats = ['f8','f8']\ndtype = dict(names = names, formats=formats)\n# I have a dictionary that I need to convert to a NumPy structured array. \narray = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[212, 124]], "time_usage": [3.45163631439209]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [5, 6, 7], 'B': [7, 8, 9]})\n# What's the best way to sum all values in a Pandas dataframe?\n# the result is a numeric value\nsum_value = df.values.sum()", "error": "", "token_usage": [[167, 74]], "time_usage": [2.657337188720703]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([1,4,5])\n\n# Is there a way to compare what elements in a exist in b?\n# Return a array of booleans, True if elements in a exist in b, False otherwise\nc = np.isin(a, b)", "error": "", "token_usage": [[172, 81]], "time_usage": [2.741891622543335]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = (a + b + c) / 3", "error": "", "token_usage": [[165, 18]], "time_usage": [1.2333579063415527]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(a[:-1] != a[1:])[0]", "error": "", "token_usage": [[212, 20]], "time_usage": [1.3245875835418701]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "b = a[..., newaxis]", "error": "", "token_usage": [[194, 11]], "time_usage": [0.8659443855285645]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "import numpy as np\n\narr = np.array([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n# How to invoke the standard deviation function on a 2d array?\n# with axis=0, it will return a 1d array with the standard deviation of each column\narr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[178, 88]], "time_usage": [2.6382222175598145]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "import numpy as np\n\na = np.arange(0,10)\n# How to print a Numpy array without brackets?\n# For example, I want to convert a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".\na_string = ' '.join(map(str, a))", "error": "", "token_usage": [[168, 78]], "time_usage": [3.0169785022735596]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "import numpy as np\nfrom numpy import newaxis\n\na = np.array([\n     [1,2],\n     [3,4],\n     [5,6],\n     [7,8]])\n\nb = np.array([1,2,3,4])\n\n# multiply arrays rowwise\n# Basically out[i] = a[i] * b[i], where a[i].shape is (2,) and b[i] then is a scalar.\n# What's the trick?\nout = a * b[:, newaxis]", "error": "", "token_usage": [[200, 109]], "time_usage": [3.665236711502075]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "import numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout = x.flatten()", "error": "", "token_usage": [[139, 44]], "time_usage": [1.9190990924835205]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "import numpy as np\n\nmyarray = np.array([(\"Hello\",2.5,3),(\"World\",3.6,2)])\n# Converting a 2D numpy array to a structured array\n# You can 'create a record array from a (flat) list of arrays' using numpy.core.records.fromarrays as follows:\n# Note that we need conduct the transpose on the array, and the names reset to 'col1, co2, col3'\nnewrecarray = np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "error": "", "token_usage": [[202, 124]], "time_usage": [4.112861156463623]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "import numpy as np\n\nlist_of_arrays = map(lambda x: x*np.ones(2), range(5))\n# I generate a list of one dimensional numpy arrays in a loop and later convert this list to a 2d numpy array.\n# I would've preallocated a 2d numpy array if i knew the number of items ahead of time, but I don't, therefore I put everything in a list.\n# Is there a better way (performancewise) to go about the task of collecting sequential numerical data (in my case numpy arrays) than putting them in a list and then making a numpy.array out of it (I am creating a new obj and copying the data)? Is there an \"expandable\" matrix data structure available in a well tested module?\n\nmyarray = np.vstack(list_of_arrays)", "error": "", "token_usage": [[261, 169]], "time_usage": [4.874168157577515]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "import numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges = np.histogram(arr.flatten(), bins=10)\ncdf = np.cumsum(hist)", "error": "", "token_usage": [[172, 90]], "time_usage": [2.671485662460327]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "import numpy as np\n\na = np.array([0,33,4444522])\n# Converting int arrays to string arrays in numpy without truncation\na_str = np.array2string(a, formatter={'int':lambda x: str(x)})", "error": "", "token_usage": [[137, 55]], "time_usage": [2.105005979537964]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[170, 81]], "time_usage": [2.8929667472839355]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "import numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[~np.all(arr == 0, axis=1)]", "error": "", "token_usage": [[181, 97]], "time_usage": [4.956636190414429]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "import numpy as np\n\na1 = np.array(['a', 'b'])\na2 = np.array(['E', 'F'])\n# I am trying to do element-wise string concatenation.\n# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\n\nresult = np.char.add(a1, a2)", "error": "", "token_usage": [[161, 76]], "time_usage": [2.715379238128662]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "import numpy as np\n\ndat = np.array([[1,2,3], [4,5,np.nan], [np.nan,6,np.nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\n\n# Calculate matrix mean values along the row of matrix, but remove nan values from calculation\n# If all row values are NaNs, the mean value is set to NaN.\nmm = np.ma.mean(mdat, axis=1)", "error": "", "token_usage": [[186, 94]], "time_usage": [2.994793176651001]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "import numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind = np.lexsort((a[:, 1], a[:, 0]))", "error": "", "token_usage": [[199, 115]], "time_usage": [3.97171688079834]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "a_list = np.array(a).flatten().tolist()", "error": "", "token_usage": [[165, 15]], "time_usage": [1.0073351860046387]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "import numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nb[1:4, 1:4] = a", "error": "", "token_usage": [[160, 76]], "time_usage": [2.353259801864624]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "import numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5])\n# if function is c(i, j) = a(i) + b(j)*2:\nc = np.zeros((len(a), len(b)))\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        c[i][j] = a[i] + b[j] * 2", "error": "", "token_usage": [[151, 95]], "time_usage": [3.1099460124969482]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "import numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 1] = x", "error": "", "token_usage": [[202, 112]], "time_usage": [3.33663010597229]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "import numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = np.ma.compressed(m)       # complete the code by removing masked values from m\n\nout", "error": "", "token_usage": [[157, 79]], "time_usage": [2.7344956398010254]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "import numpy as np\n\na = np.zeros(4, dtype=\"float64\")\n# Convert numpy array type and values from Float64 to Float32\nb = a.astype(\"float32\")", "error": "", "token_usage": [[135, 43]], "time_usage": [1.5846920013427734]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "vals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[257, 16]], "time_usage": [0.9910459518432617]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "concated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[242, 16]], "time_usage": [1.0495798587799072]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "import numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[139, 50]], "time_usage": [1.8758363723754883]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "import numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    ncols = L\n    sub_seqs = np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(a.itemsize*S, a.itemsize))\n    return sub_seqs", "error": "", "token_usage": [[177, 121]], "time_usage": [3.7424545288085938]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1, 2],\n           [3, 4]])\nb = np.array([1,1])\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n# the code below is the solution\nout = a[b[1], b[1]]", "error": "", "token_usage": [[172, 83]], "time_usage": [2.954525947570801]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "import numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    # return the result\n    return array[idx]", "error": "", "token_usage": [[137, 57]], "time_usage": [2.153404951095581]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "import numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    # How to add a new row to an empty numpy array\n    # example: \n    # input: np.array([1,2,3]) and np.array([4,5,6])\n    # output: np.array([[1,2,3],[4,5,6]])\n    # Return the new array\n    new_arr = np.vstack((arr1, arr2))\n    return new_arr", "error": "", "token_usage": [[195, 115]], "time_usage": [3.484747886657715]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "import numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.array(matrix).flatten()", "error": "", "token_usage": [[189, 99]], "time_usage": [2.8548600673675537]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "import numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\nm = np.repeat(a[cond], n)", "error": "", "token_usage": [[219, 129]], "time_usage": [3.814864158630371]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "import numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    target = np.divide(t[1:], t[:-1])\n    return target", "error": "", "token_usage": [[199, 118]], "time_usage": [3.384983777999878]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "import numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout = np.unravel_index(np.argmin(A), A.shape)", "error": "", "token_usage": [[152, 67]], "time_usage": [2.177150249481201]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "import numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    \"\"\"\n    How do I extract a sub-array from a numpy 2d array? \n    I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    Return a sub-array from a numpy 2d array.\n    \"\"\"\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[182, 95]], "time_usage": [2.8318819999694824]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1,2,3],\n              [3,2,4]])\n\nmy_dict = {1:23, 2:34, 3:36, 4:45}\n# I am trying to translate every element of a numpy.array according to a given key\n# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\n\ndef translate_array(arr, dictionary):\n    vec_func = np.vectorize(dictionary.get)\n    return vec_func(arr)\n\nout = translate_array(a, my_dict)", "error": "", "token_usage": [[192, 124]], "time_usage": [3.469940423965454]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "import numpy as np\n\nx = np.array([range(100, 1, -1)])\n# This will tell me those values\n# generate a mask to find all values that are even numbers\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout = np.where(x % 2 == 0)[0]", "error": "", "token_usage": [[174, 91]], "time_usage": [2.692207098007202]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "import numpy as np\n\ndef consecutive(data, stepsize=1):\n    \"\"\"\n    How to find the groups of consecutive elements in a NumPy array\n    I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    The output should be a list of tuples as follows\n    [(0), (47, 48, 49, 50), (97, 98, 99)]\n    Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    Finally, return the number of consecutive elements in the array.\n    \"\"\"\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]\n\na = [0, 47, 48, 49, 50, 97, 98, 99]\nresult = consecutive(a)\nprint(result)", "error": "", "token_usage": [[265, 230]], "time_usage": [6.258567810058594]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "import numpy as np\n\ndists = np.array([[5,1,2], [2,8,1], [1,6,3], [5,2,2], [5,1,2], [3,1,2]])\nr, dr = 2, 3\n# I have an array of distances called dists. I want to select dists which are within a range [r, r+dr].\n# You don't actually need where if you're just trying to filter out the elements of dists that don't fit your criteria:\nout = dists[(dists >= r) & (dists <= r+dr)]", "error": "", "token_usage": [[222, 141]], "time_usage": [4.009105205535889]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "import numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.mod(x + y + z, 2)", "error": "", "token_usage": [[182, 97]], "time_usage": [3.000471830368042]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "import numpy as np\n\na = np.array([ 0,  3,  6,  9, 12])\nb = np.array([ 1,  4,  7, 10, 13])\nc = np.array([ 2,  5,  8, 11, 14])\n\n# How can I join them using numpy methods\n# You can transpose and flatten the arrays:\nd = np.concatenate((a, b, c))", "error": "", "token_usage": [[195, 106]], "time_usage": [3.184417486190796]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [0, 1, 1, 1, 0, 0],\n              [1, 1, 1, 0, 0, 0],\n              [1, 1, 1, 1, 1, 0]])\n\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[219, 129]], "time_usage": [3.590263843536377]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "import numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a-b)", "error": "", "token_usage": [[143, 52]], "time_usage": [1.8779032230377197]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "import numpy as np\n\nimport itertools\ndata = [[1], [1, 2]]\n# Convert Python sequence to NumPy array, filling missing values with 0\nresult = np.array(list(itertools.zip_longest(*data, fillvalue=0)))", "error": "", "token_usage": [[139, 57]], "time_usage": [1.998295783996582]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "import numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[184, 99]], "time_usage": [2.9373116493225098]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "import numpy as np\n\ndata = np.array([1,2,3,4,5,6,7,8,9])\n# How to remove specific elements in a numpy array\uff1f\n# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\nindex = [2, 3, 6]\nresult = np.delete(data, index)", "error": "", "token_usage": [[187, 95]], "time_usage": [2.972968816757202]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "import numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted = np.all(a[:-1] <= a[1:])", "error": "", "token_usage": [[149, 62]], "time_usage": [2.159118890762329]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "import numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.full((3, 4), True)", "error": "", "token_usage": [[129, 41]], "time_usage": [1.5223076343536377]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "import numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[149, 65]], "time_usage": [3.130952835083008]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "import numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[131, 44]], "time_usage": [1.7528815269470215]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "import numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.size(arr) == 0", "error": "", "token_usage": [[141, 51]], "time_usage": [1.835090160369873]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "import numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.count_nonzero(arr)", "error": "", "token_usage": [[137, 47]], "time_usage": [1.706474781036377]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "import numpy as np\n\ndef add_row_to_arr(arr, row):\n    \"\"\"\n    How does one add rows to a numpy array?\n    Is there a numpythonic way to do this?\n    \"\"\"\n    return np.vstack((arr, row))", "error": "", "token_usage": [[141, 54]], "time_usage": [1.8613770008087158]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "b = a[4:]", "error": "", "token_usage": [[144, 10]], "time_usage": [0.9291794300079346]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "import numpy as np\n\narr = np.zeros((50,100,25))\nresult = arr.reshape((-1, arr.shape[-1]))", "error": "", "token_usage": [[169, 32]], "time_usage": [1.3955483436584473]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "import numpy as np\n\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n    # To achieve it, Does anyone know a more elegant way to get the result?\n    return np.squeeze(np.asarray(M))", "error": "", "token_usage": [[160, 70]], "time_usage": [2.196751356124878]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "import numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.where(arr == 0)[0]", "error": "", "token_usage": [[134, 47]], "time_usage": [1.630692481994629]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "import numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    max_count_index = np.argmax(counts)\n    return unique_elements[max_count_index]", "error": "", "token_usage": [[134, 68]], "time_usage": [2.3617358207702637]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "import numpy as np\n\n# List of arrays.\nL = [np.random.randn(5,4,2,5,1,2) for i in range(10)]\n# Stack them using axis that is negative one.\nM = np.stack(L, axis=-1)", "error": "", "token_usage": [[149, 60]], "time_usage": [1.9262864589691162]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "import numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    arr = np.append(arr, arr[0])\n    return arr", "error": "", "token_usage": [[139, 56]], "time_usage": [1.9694206714630127]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "import numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return np.array(arr, dtype=float)", "error": "", "token_usage": [[140, 51]], "time_usage": [1.7596685886383057]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "import numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[143, 56]], "time_usage": [1.9062793254852295]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "import numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    # Return the transformed tuple\n    return tuple(arr)", "error": "", "token_usage": [[128, 35]], "time_usage": [1.4679932594299316]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "import numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.all(arr == 0)", "error": "", "token_usage": [[132, 43]], "time_usage": [1.6578216552734375]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "import numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    indices = np.where((arr >= low) & (arr <= high))[0]\n    return indices", "error": "", "token_usage": [[141, 65]], "time_usage": [2.253185510635376]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "import numpy as np\n\ndef convert_nan_to_zero(arr):\n    # convert nan value to zero\n    arr[np.isnan(arr)] = 0\n    # Return the changed array\n    return arr", "error": "", "token_usage": [[129, 45]], "time_usage": [1.7294425964355469]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "import numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Return the final result\n    return arr[np.all(np.isfinite(arr), axis=1)]", "error": "", "token_usage": [[143, 59]], "time_usage": [2.0870399475097656]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "np.where(a < 0, 0, a)", "error": "", "token_usage": [[159, 16]], "time_usage": [1.0242445468902588]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "import numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    c[0::2] = a\n    c[1::2] = b\n    return c", "error": "", "token_usage": [[157, 83]], "time_usage": [2.50484561920166]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# Find the index of the k smallest values of a numpy array\nidx = np.argsort(A)[:k]", "error": "", "token_usage": [[159, 26]], "time_usage": [1.2367730140686035]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "output = np.concatenate(input_list).ravel()", "error": "", "token_usage": [[255, 14]], "time_usage": [0.8799459934234619]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "import numpy as np\n\nx = np.arange(8.0)\n# Partition array into 3 chunks with Numpy\nresult = np.array_split(x, 3)", "error": "", "token_usage": [[128, 39]], "time_usage": [1.5958278179168701]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "import numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    inverse = np.linalg.inv(matrix)\n    return inverse", "error": "", "token_usage": [[161, 75]], "time_usage": [2.3265469074249268]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "import numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    \n    # Calculate the length of the new array\n    new_length = len(arr) // 3\n    \n    # Create a new array of zeros with the new length\n    new_arr = np.zeros(new_length)\n    \n    # Iterate over the original array in steps of 3\n    for i in range(0, len(arr), 3):\n        # Calculate the average of the current triplet\n        average = np.mean(arr[i:i+3])\n        \n        # Assign the average to the corresponding position in the new array\n        new_arr[i//3] = average\n    \n    # Return the new array\n    return new_arr", "error": "", "token_usage": [[176, 207]], "time_usage": [5.589876651763916]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "import numpy as np\n\ndef prepend_element_to_array(arr, element):\n    \"\"\"\n    Prepend element to numpy array\n    \n    Parameters:\n    arr (numpy.ndarray): The input array\n    element: The element to be prepended\n    \n    Returns:\n    numpy.ndarray: The array with the element prepended\n    \"\"\"\n    return np.concatenate(([element], arr))", "error": "", "token_usage": [[131, 77]], "time_usage": [2.551041841506958]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "import numpy as np\n\na = np.array([np.array([13.16]), np.array([1.58 , 1.2]), np.array([13.1]), np.array([1. , 2.6])], dtype=object)\n\ndef flatten_array(arr):\n    flattened_arr = []\n    for sub_arr in arr:\n        if isinstance(sub_arr, np.ndarray):\n            flattened_arr.extend(sub_arr.flatten())\n        else:\n            flattened_arr.append(sub_arr)\n    return flattened_arr\n\nout = flatten_array(a)", "error": "", "token_usage": [[186, 111]], "time_usage": [3.3688104152679443]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "import numpy as np\n\nmaster = np.array([1,2,3,4,5])\nsearch = np.array([4,2,2,3])\n\n# Find indices of a list of values in a numpy array\nout = np.where(np.isin(master, search))[0]\nout", "error": "", "token_usage": [[150, 65]], "time_usage": [2.264169454574585]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "import numpy as np\n\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    min_val = np.min(arr)\n    return min_val", "error": "", "token_usage": [[142, 57]], "time_usage": [1.943556308746338]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "import numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.diff(z)", "error": "", "token_usage": [[144, 50]], "time_usage": [1.8358137607574463]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "import numpy as np\n\n# How do I create an array where every entry is the same value?\n# I know numpy.ones() and numpy.zeros() do this for 1's and 0's, but what about -1?\n# the shape of the array is (5, 5)\nout = np.full((5, 5), -1)", "error": "", "token_usage": [[164, 77]], "time_usage": [2.554323434829712]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "import numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[166, 82]], "time_usage": [2.811563014984131]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "import numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\n\ndef check_elements_in_array(A, B):\n    \"\"\"\n    Check if each element in a numpy array is in another array.\n    \n    Parameters:\n    A (numpy array): The array to check elements against.\n    B (numpy array): The array containing the elements to check.\n    \n    Returns:\n    tuple: A tuple containing two numpy arrays. The first array contains the indices of A where the elements are in B, and the second array contains the indices of A where the elements are not in B.\n    \"\"\"\n    in_indices = np.where(np.isin(A, B))[0]\n    not_in_indices = np.where(~np.isin(A, B))[0]\n    return in_indices, not_in_indices\n\nD = check_elements_in_array(A, B)", "error": "", "token_usage": [[221, 276]], "time_usage": [7.135878086090088]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "import numpy as np\n\na = np.array([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n# We want row with the first column value is 0\n# and the second colum value is 1\n# Maybe using np.where() is better\nb = a[np.where((a[:, 0] == 0) & (a[:, 1] == 1))]", "error": "", "token_usage": [[204, 131]], "time_usage": [3.8628363609313965]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "# Conducting the reverse operation along with the last dimension\nb = np.flip(a, axis=-1)", "error": "", "token_usage": [[200, 26]], "time_usage": [1.180544376373291]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "import numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n# Firstly, We need to find the minimun value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult = np.subtract(a, np.min(a, axis=0))", "error": "", "token_usage": [[163, 77]], "time_usage": [2.4322140216827393]}
