{"task_id": "NumpyEval/1", "success": true, "generated_code": "c = a * b[:, np.newaxis]", "error": "", "token_usage": [[257, 13]], "time_usage": [0.9928364753723145]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\nb = a.reshape(2, 4, 2, 4).transpose(0, 2, 1, 3)", "error": "", "token_usage": [[219, 148]], "time_usage": [4.53660774230957]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# [end]\nimport numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[213, 121]], "time_usage": [4.0192835330963135]}
{"task_id": "NumpyEval/0", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[201, 133]], "time_usage": [3.797722816467285]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "# [start]\n# column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array.\n# [end]\nimport numpy as np\n\na = np.array([[1,3,4],[1,2,3],[1,2,1]])\nb = np.array([1,2,3])\n# How to add items into a numpy array?\n# add one element to each row using column stack operation.\nc = np.column_stack((a, b))", "error": "", "token_usage": [[206, 116]], "time_usage": [3.758096694946289]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "c = np.concatenate((a, b))", "error": "", "token_usage": [[184, 13]], "time_usage": [0.9190692901611328]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# [end]\nimport numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Dynamically slice a numpy array along a specific axis\ndef dynamic_slice(arr, axis, start, end):\n    slc[axis] = slice(start, end)\n    return arr[tuple(slc)]\n\n# Example usage\nresult = dynamic_slice(m, axis, start, end)\nprint(result)", "error": "", "token_usage": [[221, 185]], "time_usage": [5.103448867797852]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "count_value = np.count_nonzero((a > 2) & (a < 8))", "error": "", "token_usage": [[206, 24]], "time_usage": [1.1179838180541992]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "# [start]\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# [end]\nimport numpy as np\n\n# I have a NumPy array that looks like this:\narr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])\n# How can I get multiple values from this array by index?\n# How can I get the values at the index positions 1 and 4?\nresult_arr = np.choose([1, 4], arr)", "error": "", "token_usage": [[222, 134]], "time_usage": [4.266698122024536]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "# [start]\n# isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number).\n# [end]\nimport numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0", "error": "", "token_usage": [[245, 309]], "time_usage": [8.25831151008606]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "# [start]\n# diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef set_diagonal_to_zero(df):\n    np.fill_diagonal(df.values, 0)\n    return df\n\ndf = set_diagonal_to_zero(df)", "error": "", "token_usage": [[205, 139]], "time_usage": [3.9847323894500732]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[233, 19]], "time_usage": [1.1343111991882324]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "# [start]\n# recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes.\n# [end]\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[214, 124]], "time_usage": [3.6760621070861816]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# [end]\nimport numpy as np\n\na = np.zeros((2,5))\n# How can I get the shape of NumPy array?\na_shape = np.shape(a)", "error": "", "token_usage": [[150, 56]], "time_usage": [2.016213893890381]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "array = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[269, 16]], "time_usage": [1.053149700164795]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "# [start]\n# sum(a, *args, **params): sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) Return the sum of the array elements over the given axis.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [5, 6, 7], 'B': [7, 8, 9]})\n# What's the best way to sum all values in a Pandas dataframe?\n# the result is a numeric value\nsum_value = df.sum().sum()", "error": "", "token_usage": [[215, 122]], "time_usage": [3.724402666091919]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "# [start]\n# all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([1,4,5])\n\n# Is there a way to compare what elements in a exist in b?\n# Return a array of booleans, True if elements in a exist in b, False otherwise\nc = np.in1d(a, b)", "error": "", "token_usage": [[207, 117]], "time_usage": [3.7030818462371826]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = np.average([a, b, c], axis=0)", "error": "", "token_usage": [[198, 20]], "time_usage": [1.027475357055664]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(a[:-1] != a[1:])[0]", "error": "", "token_usage": [[254, 20]], "time_usage": [1.1917407512664795]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\nfrom numpy import newaxis\n\na = np.array([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n# I have a 2d array with shape (x, y) which I want to convert to a 3d array with shape (x, y, 1).\n# Is there a nice Pythonic way to do this?\nb = a[..., newaxis]", "error": "", "token_usage": [[216, 123]], "time_usage": [3.7995424270629883]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "# [start]\n# std(a, *args, **params): std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) Returns the standard deviation of the array elements along given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n# How to invoke the standard deviation function on a 2d array?\n# with axis=0, it will return a 1d array with the standard deviation of each column\narr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[231, 141]], "time_usage": [4.086015462875366]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "a_string = ' '.join(map(str, a))", "error": "", "token_usage": [[190, 15]], "time_usage": [0.9571533203125]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "out = np.multiply(a, b[:, np.newaxis])", "error": "", "token_usage": [[226, 15]], "time_usage": [1.0579638481140137]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "# [start]\n# norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm.\n# [end]\nimport numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout = np.squeeze(x)", "error": "", "token_usage": [[166, 72]], "time_usage": [2.553142547607422]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "newrecarray = np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')", "error": "", "token_usage": [[259, 28]], "time_usage": [1.3013150691986084]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "myarray = np.array(list_of_arrays)", "error": "", "token_usage": [[283, 13]], "time_usage": [0.8505034446716309]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "# [start]\n# cumsum(self, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along the given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges = np.histogram(arr.flatten(), bins=10)\ncdf = np.cumsum(hist)", "error": "", "token_usage": [[206, 124]], "time_usage": [3.3223447799682617]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\na = np.array([0,33,4444522])\n# Converting int arrays to string arrays in numpy without truncation\na_str = np.array2string(a, precision=np.inf, separator=',')", "error": "", "token_usage": [[194, 109]], "time_usage": [3.517153263092041]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "diff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[205, 16]], "time_usage": [0.9335110187530518]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[np.all(arr != 0, axis=1)]", "error": "", "token_usage": [[218, 132]], "time_usage": [3.7464349269866943]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "# [start]\n# add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode.\n# [end]\nimport numpy as np\n\na1=np.array(['a','b'])\na2=np.array(['E','F'])\n# I am trying to do element-wise string concatenation.\n# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\nresult = np.char.add(a1, a2)", "error": "", "token_usage": [[191, 102]], "time_usage": [3.134248733520508]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "# [start]\n# mean(a, axis=None, dtype=None, out=None, keepdims=False): Compute the arithmetic mean along the specified axis.\n# [end]\nimport numpy as np\n\ndat = np.array([[1,2,3], [4,5,np.nan], [np.nan,6,np.nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\n\n# Calculate the mean values along the row of the matrix, removing NaN values from calculation\nmm = np.nanmean(mdat, axis=1)", "error": "", "token_usage": [[220, 111]], "time_usage": [3.3029024600982666]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "# [start]\n# sort(a, axis=-1, kind=None, order=None): Return a sorted copy of an array.\n# [end]\nimport numpy as np\n\n# I have a 2D numpy array of shape (N,2) which is holding N points.\na = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])\n# Sorting it such that my points are ordered by x-coordinate, and then by y in cases where the x coordinate is the same, and get the values by inplace\nind = np.lexsort((a[:, 1], a[:, 0]))", "error": "", "token_usage": [[229, 145]], "time_usage": [4.046031475067139]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "a_list = np.array(a).flatten().tolist()", "error": "", "token_usage": [[221, 15]], "time_usage": [0.9783980846405029]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "# [start]\n# copy(a, order='K', subok=False): Return an array copy of the given object.\n# [end]\nimport numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nb[1:4, 1:4] = np.copy(a)", "error": "", "token_usage": [[189, 107]], "time_usage": [3.0657544136047363]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# [end]\nimport numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5])\n# if function is c(i, j) = a(i) + b(j)*2:\nc = np.fromfunction(lambda i, j: a[i] + b[j]*2, (len(a), len(b)))", "error": "", "token_usage": [[191, 117]], "time_usage": [3.310176134109497]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "# [start]\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# [end]\nimport numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 2] = x", "error": "", "token_usage": [[228, 138]], "time_usage": [3.943795919418335]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "# [start]\n# masked_less(x, value, copy=True): Mask an array where less than a given value.\n# [end]\nimport numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = np.ma.compressed(m)", "error": "", "token_usage": [[185, 93]], "time_usage": [2.742746114730835]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\na = np.zeros(4, dtype=\"float64\")\n# Convert numpy array type and values from Float64 to Float32\nb = a.astype(\"float32\")", "error": "", "token_usage": [[192, 100]], "time_usage": [2.8463613986968994]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "# [start]\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# [end]\nimport numpy as np\n\nSamples = {5.207403005022627: 0.69973543384229719, 6.8970222167794759: 0.080782939731898179, 7.8338517407140973: 0.10308033284258854, 8.5301143255505334: 0.018640838362318335, 10.418899728838058: 0.14427355015329846, 5.3983946820220501: 0.51319796560976771}\n# I want to separate the keys and values into 2 numpy arrays. \nkeys = np.fromiter(Samples.keys(), dtype=float)\nvals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[297, 209]], "time_usage": [5.452995538711548]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "concated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[264, 16]], "time_usage": [0.9835264682769775]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "# [start]\n# argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis.\n# [end]\nimport numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[169, 80]], "time_usage": [2.480212688446045]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "# [start]\n# clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max].\n# [end]\nimport numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    ncols = L\n    strides = a.strides[0]\n    shape = (nrows, ncols)\n    sub_sequences = np.lib.stride_tricks.as_strided(a, shape=shape, strides=(S*strides, strides))\n    return sub_sequences", "error": "", "token_usage": [[211, 168]], "time_usage": [4.83141827583313]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "# [start]\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# [end]\nimport numpy as np\n\na = np.array([[1, 2],\n           [3, 4]])\nb = np.array([1,1])\n# I'd like to use b in index a, I would like to get 4 instead of [a[1], a[1]]\n# the code below is the solution\nout = a[b[1], b[1]]", "error": "", "token_usage": [[216, 127]], "time_usage": [7.871649503707886]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    result = array[idx]\n    return result", "error": "", "token_usage": [[166, 85]], "time_usage": [3.395554780960083]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    # How to add a new row to an empty numpy array\n    # example: \n    # input: np.array([1,2,3]) and np.array([4,5,6])\n    # output: np.array([[1,2,3],[4,5,6]])\n    new_arr = np.vstack((arr1, arr2))\n    # Return the new array\n    return new_arr", "error": "", "token_usage": [[252, 172]], "time_usage": [5.355520963668823]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.array(matrix).flatten()", "error": "", "token_usage": [[226, 136]], "time_usage": [3.710510015487671]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "# [start]\n# repeat(a, repeats, axis=None): Repeat elements of an array.\n# [end]\nimport numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\nm = np.repeat(a[cond], n)", "error": "", "token_usage": [[242, 152]], "time_usage": [4.6686084270477295]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    return np.divide(t[1:], t[:-1])", "error": "", "token_usage": [[255, 169]], "time_usage": [5.052991628646851]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "# [start]\n# unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays.\n# [end]\nimport numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout = np.unravel_index(np.argmin(A), A.shape)", "error": "", "token_usage": [[187, 102]], "time_usage": [3.2020623683929443]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# [end]\nimport numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    # How do I extract a sub-array from a numpy 2d array? \n    # I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    # Return a sub-array from a numpy 2d array.\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[239, 151]], "time_usage": [4.38550329208374]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "# [start]\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# [end]\nimport numpy as np\n\na = np.array([[1,2,3],\n              [3,2,4]])\n\nmy_dict = {1:23, 2:34, 3:36, 4:45}\n# I am trying to translate every element of a numpy.array according to a given key\n# I don't know about efficient, but you could use np.vectorize on the .get method of dictionaries:\nout = np.vectorize(my_dict.get)(a)", "error": "", "token_usage": [[248, 159]], "time_usage": [4.431334972381592]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "# [start]\n# masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\nx = np.array([range(100,1,-1)])\n# This will tell me those values\n# generate a mask to find all values that are even numbers\nmask = x % 2 == 0\n# retrieve the integer indexes of locations where the condition is true\nout = np.where(mask)[0]", "error": "", "token_usage": [[232, 132]], "time_usage": [3.788769483566284]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "# [start]\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]", "error": "", "token_usage": [[301, 235]], "time_usage": [6.266748428344727]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "out = dists[np.logical_and(dists >= r, dists <= r+dr)]", "error": "", "token_usage": [[267, 23]], "time_usage": [1.1190943717956543]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# [end]\nimport numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.logical_xor(np.logical_xor(x, y), z)", "error": "", "token_usage": [[238, 154]], "time_usage": [4.825925827026367]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\na = np.array([ 0,  3,  6,  9, 12])\nb = np.array([ 1,  4,  7, 10, 13])\nc = np.array([ 2,  5,  8, 11, 14])\n\n# How can I join them using numpy methods\n# You can transpose and flatten the arrays:\nd = np.stack((a, b, c), axis=0)", "error": "", "token_usage": [[225, 140]], "time_usage": [4.071194648742676]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "# [start]\n# array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`.\n# [end]\nimport numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[250, 160]], "time_usage": [4.682056427001953]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "# [start]\n# dist(p, q, /): Return the Euclidean distance between two points p and q.\n# [end]\nimport numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a - b)", "error": "", "token_usage": [[171, 81]], "time_usage": [2.4236018657684326]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "result = np.array(data, dtype=object)\nresult = np.array(list(itertools.zip_longest(*data, fillvalue=0)), dtype=object)", "error": "", "token_usage": [[196, 36]], "time_usage": [1.341179609298706]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "# [start]\n# asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type.\n# [end]\nimport numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[216, 131]], "time_usage": [4.200336456298828]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "result = np.delete(data, index)", "error": "", "token_usage": [[217, 12]], "time_usage": [0.8123657703399658]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5])\n# I have a numpy array and I like to check if it is sorted.\n# Using numpy.all to do this.\nis_sorted = np.all(a[:-1] <= a[1:])", "error": "", "token_usage": [[183, 96]], "time_usage": [2.879141092300415]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# [end]\nimport numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.full((3, 4), True)", "error": "", "token_usage": [[148, 60]], "time_usage": [1.9221692085266113]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[171, 87]], "time_usage": [2.669693946838379]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[159, 72]], "time_usage": [2.3084652423858643]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.any(arr)", "error": "", "token_usage": [[172, 78]], "time_usage": [2.302997350692749]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "# [start]\n# count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# [end]\nimport numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.count_nonzero(arr)", "error": "", "token_usage": [[184, 94]], "time_usage": [2.624913215637207]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "# [start]\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n    return np.row_stack((arr, row))", "error": "", "token_usage": [[164, 76]], "time_usage": [2.4786336421966553]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "# [start]\n# removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones.\n# [end]\nimport numpy as np\n\na = np.arange(1, 10)\na = a.reshape(len(a), 1)\n# I want to access the elements from index 4 to the end:\nb = a[4:]", "error": "", "token_usage": [[175, 81]], "time_usage": [2.527409315109253]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# [end]\nimport numpy as np\n\narr = np.zeros((50,100,25))\nresult = arr.reshape(-1, arr.shape[-1])", "error": "", "token_usage": [[189, 52]], "time_usage": [1.846649169921875]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "# [start]\n# vander(x, n=None): Generate a Vandermonde matrix.\n# [end]\nimport numpy as np\n\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n    # To achieve it, Does anyone know a more elegant way to get the result?\n    return np.array(M)[0]", "error": "", "token_usage": [[183, 93]], "time_usage": [2.7425074577331543]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# [end]\nimport numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.argwhere(arr == 0)", "error": "", "token_usage": [[162, 74]], "time_usage": [2.4131791591644287]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "# [start]\n# count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# [end]\nimport numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    unique_elements, counts = np.unique(arr, return_counts=True)\n    max_count_index = np.argmax(counts)\n    return unique_elements[max_count_index]", "error": "", "token_usage": [[181, 115]], "time_usage": [3.384166717529297]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\n# List of arrays.\nL = [np.random.randn(5,4,2,5,1,2) for i in range(10)]\n# Stack them using axis that is negative one.\nM = np.stack(L, axis=-1)", "error": "", "token_usage": [[179, 90]], "time_usage": [2.67689847946167]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    return np.append(arr, arr[0])", "error": "", "token_usage": [[169, 81]], "time_usage": [2.79123854637146]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# [end]\nimport numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return np.array(arr, dtype=float)", "error": "", "token_usage": [[180, 91]], "time_usage": [2.882206916809082]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "# [start]\n# max(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# [end]\nimport numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[177, 90]], "time_usage": [2.668266773223877]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "# [start]\n# reshape(self, *args, **kwargs): Returns a copy of the array with a new shape.\n# [end]\nimport numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    # Return the transformed tuple\n    return tuple(arr)", "error": "", "token_usage": [[157, 64]], "time_usage": [2.2489371299743652]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.any(arr)", "error": "", "token_usage": [[163, 71]], "time_usage": [2.2668793201446533]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# [end]\nimport numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    indices = np.argwhere((arr >= low) & (arr <= high))\n    return indices", "error": "", "token_usage": [[169, 92]], "time_usage": [2.9749016761779785]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "# [start]\n# nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values.\n# [end]\nimport numpy as np\n\ndef convert_nan_to_zero(arr):\n    # convert nan value to zero\n    arr[np.isnan(arr)] = 0\n    # Return the changed array\n    return arr", "error": "", "token_usage": [[183, 99]], "time_usage": [2.9583542346954346]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Return the final result\n    mask = np.array([np.all(np.isfinite(row)) for row in arr])\n    result = arr[mask]\n    return result", "error": "", "token_usage": [[173, 103]], "time_usage": [2.9136478900909424]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "result = np.where(a < 0, 0, a)", "error": "", "token_usage": [[181, 18]], "time_usage": [1.121001958847046]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "# [start]\n# transpose(a, axes=None): Permute the dimensions of an array.\n# [end]\nimport numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    \n    c[0::2] = a\n    c[1::2] = b\n    \n    return c", "error": "", "token_usage": [[180, 107]], "time_usage": [3.0986440181732178]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# [end]\nimport numpy as np\n\nA = np.array([1, 7, 9, 2, 0.1, 17, 17, 1.5])\nk = 3\n\n# Find the index of the k smallest values of a numpy array\nidx = np.argsort(A)[:k]", "error": "", "token_usage": [[188, 97]], "time_usage": [3.037443161010742]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# [end]\nimport numpy as np\n\ninput_list = [np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]])]\n# Flattening a list of NumPy arrays?\n# We can use numpy.concatenate, which as the name suggests, basically concatenates all the elements of such an input list into a single NumPy array\n# And then we can use numpy.ravel to flatten the array\noutput = np.ravel(np.concatenate(input_list))", "error": "", "token_usage": [[275, 185]], "time_usage": [4.991411447525024]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "result = np.array_split(x, 3)", "error": "", "token_usage": [[159, 14]], "time_usage": [1.0423469543457031]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# [end]\nimport numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    return np.linalg.inv(matrix)", "error": "", "token_usage": [[184, 93]], "time_usage": [2.8282113075256348]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "# [start]\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# [end]\nimport numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    return np.mean(arr.reshape(-1, 3), axis=1)", "error": "", "token_usage": [[212, 130]], "time_usage": [3.8352558612823486]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef prepend_element_to_array(arr, element):\n    # Prepend element to numpy array\n    # Return the array\n    return np.insert(arr, 0, element)", "error": "", "token_usage": [[153, 66]], "time_usage": [2.1346912384033203]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "out = np.concatenate(a).flatten()", "error": "", "token_usage": [[226, 12]], "time_usage": [0.9596030712127686]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "# [start]\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# [end]\nimport numpy as np\n\nmaster = np.array([1,2,3,4,5])\nsearch = np.array([4,2,2,3])\n\n# Find indices of a list of values in a numpy array\nout = np.choose(search, master)", "error": "", "token_usage": [[186, 94]], "time_usage": [2.7929885387420654]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "# [start]\n# fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate.\n# [end]\nimport numpy as np\n\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    return np.min(arr)", "error": "", "token_usage": [[179, 87]], "time_usage": [3.0970211029052734]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# [end]\nimport numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.cumsum(z[1:])[::-1]", "error": "", "token_usage": [[167, 80]], "time_usage": [2.632678985595703]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "out = np.full((5, 5), -1)", "error": "", "token_usage": [[208, 17]], "time_usage": [1.0694637298583984]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[196, 112]], "time_usage": [3.891141653060913]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n# Check if each element in a numpy array is in another array\n# This problem seems easy but I cannot quite get a nice-looking solution. \n# I have two numpy arrays (A and B), and I want to get the indices of A where the elements of A are in B and also get the indices of A where the elements are not in B.\nD = np.isin(A, B)\nE = np.where(D)[0]\nF = np.where(~D)[0]", "error": "", "token_usage": [[251, 177]], "time_usage": [5.239081144332886]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "# [start]\n# squeeze(self, axis=None): Remove single-dimensional entries from the shape of a.\n# [end]\nimport numpy as np\n\na = np.array([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n# We want row with the first column value is 0\n# and the second column value is 1\n# Maybe using np.where() is better\nb = a[np.where((a[:, 0] == 0) & (a[:, 1] == 1))]", "error": "", "token_usage": [[229, 155]], "time_usage": [4.55376672744751]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "# [start]\n# rollaxis(a, axis, start=0): Roll the specified axis backwards, until it lies in a given position.\n# [end]\nimport numpy as np\n\na = np.array([[[10, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]],\n              [[1, 1, 1, 2], [2, 2, 2, 3], [3, 3, 3, 4]]])\n\n# Conducting the reverse operation along with the last dimension\n\nb = np.rollaxis(a, 2, start=0)", "error": "", "token_usage": [[233, 147]], "time_usage": [4.458619117736816]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "# [start]\n# min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>): Return the minimum along a given axis.\n# [end]\nimport numpy as np\n\na = np.array([[1,11], [3,9], [5,7]])\n# Firstly, We need to find the minimun value of each column with axis 0,\n# Then conduct subtract operation between each element of the column and the minimum value.\nresult = np.subtract(a, np.min(a, axis=0))", "error": "", "token_usage": [[199, 113]], "time_usage": [3.4286422729492188]}
