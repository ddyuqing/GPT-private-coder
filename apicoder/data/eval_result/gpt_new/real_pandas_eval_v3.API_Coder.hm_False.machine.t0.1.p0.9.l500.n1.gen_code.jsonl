{"task_id": "PandasEval/0", "success": true, "generated_code": "import pandas as pd\n\ndef compute_mean_along_rows(df):\n    # You can specify a new column named `mean_along_rows` that contains the mean of each row. You also need to compute the mean along the rows, so use axis=1.\n    # Finally, return the dataframe with the new column.\n    df['mean_along_rows'] = df.mean(axis=1)\n    return df", "error": "", "token_usage": [[168, 88]], "time_usage": [2.7891006469726562]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "import pandas as pd\n\ndef select_rows_from_column(df, col_name, values):\n    # How do I select rows from a DataFrame df based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    return df[df[col_name].isin(values)]", "error": "", "token_usage": [[154, 66]], "time_usage": [2.1747937202453613]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "import pandas as pd\n\ndef change_col_names_of_df(df, origin_names, new_names):\n    # How do I change the column labels of df\uff1f\n    # And return the dataframe that has been renamed\n    df.rename(columns=dict(zip(origin_names, new_names)), inplace=True)\n    return df", "error": "", "token_usage": [[144, 65]], "time_usage": [2.1391491889953613]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "import pandas as pd\n\ndef delete_column(df, column_name):\n    # deleting a column from a Pandas DataFrame\n    df = df.drop(column_name, axis=1)\n    # return the changed dataframe\n    return df", "error": "", "token_usage": [[134, 51]], "time_usage": [1.8106250762939453]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "import pandas as pd\n\ndef select_multiple_columns(df, columns):\n    # How do I select the given columns and return the new DataFrame?\n    return df[columns]", "error": "", "token_usage": [[130, 38]], "time_usage": [1.5770058631896973]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "import pandas as pd\n\ndef get_row_count(df):\n    \"\"\"\n    Return the row count of df\n    \"\"\"\n    return len(df)", "error": "", "token_usage": [[125, 32]], "time_usage": [1.4343619346618652]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "import pandas as pd\n\ndef get_list_from_dataframe(df):\n    # I want to get a list of the column headers from a Pandas DataFrame. \n    # The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return list(df.columns)", "error": "", "token_usage": [[171, 79]], "time_usage": [2.9855384826660156]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "import pandas as pd\n\ndef add_column_to_dataframe(df, column_name, column_data):\n    # How to add a new column to an existing DataFrame?\n    # I would like to add a new column data with the column name, to the existing dataframe\n    df[column_name] = column_data\n    return df", "error": "", "token_usage": [[154, 69]], "time_usage": [2.326390027999878]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "import pandas as pd\n\ndef change_all_cols_type(df):\n    # Change all columns type of DataFrame to numeric\n    # And return the new DataFrame\n    # The code is:\n    df = df.apply(pd.to_numeric, errors='coerce')\n    return df", "error": "", "token_usage": [[139, 59]], "time_usage": [2.1567068099975586]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef drop_rows_col_nan(df, col_name):\n    # How to drop rows of Pandas DataFrame whose value in a certain column is NaN\n    df.dropna(subset=[col_name], inplace=True)\n    return df", "error": "", "token_usage": [[142, 60]], "time_usage": [2.0103142261505127]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "from typing import List\nimport pandas as pd\nimport numpy as np\n\ndef append_in_dataframe(df, list_to_append, column_name_list) -> pd.DataFrame:\n    \"\"\"    \n    Params:\n        df: The dataframe to append to.\n        list_to_append: The list to append.\n        column_name_list: The column names of the list to append.\n\n    Returns:\n        The dataframe with the list appended.\n    \"\"\"\n    data = np.array(list_to_append).reshape(1, len(column_name_list))\n    new_df = pd.DataFrame(data, columns=column_name_list)\n    df = pd.concat([df, new_df], ignore_index=True)\n    return df", "error": "", "token_usage": [[187, 140]], "time_usage": [4.068260192871094]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "import pandas as pd\n\ndef extract_the_last_year(df, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my apply method should add to the first two digits.\n    # the column_name is the column name of the dataframe that contains the date strings.\n    # return the numerical Series obj of the last year.\n    \n    def extract_year(date_string):\n        year = int(date_string.split('-')[0])\n        last_two_digits = int(date_string.split('-')[1])\n        if last_two_digits == 0:\n            year += 100\n        return year\n    \n    return df[column_name].apply(extract_year)", "error": "", "token_usage": [[225, 189]], "time_usage": [5.166844367980957]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "import pandas as pd\n\ndef get_last_n_rows(df, n):\n    # How to get the last N rows of a pandas DataFrame?\n    return df.tail(n)", "error": "", "token_usage": [[130, 38]], "time_usage": [1.56406831741333]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "import pandas as pd\n\ndef get_values_at_nth_rows(df, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Pandas?\n    return the value\n    \"\"\"\n    return df.loc[n, column_name]", "error": "", "token_usage": [[149, 60]], "time_usage": [2.0828187465667725]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "import pandas as pd\n\ndef creating_df_with_same_as_other(df_original):\n    # creating a new dataframe of all same with df_original one, but no any rows\n    new_df = pd.DataFrame(columns=df_original.columns)\n    return new_df", "error": "", "token_usage": [[143, 54]], "time_usage": [1.969890832901001]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_df = df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum().reset_index()", "error": "", "token_usage": [[288, 36]], "time_usage": [1.611924171447754]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "import pandas as pd\n\n# creating a Series from a list [56, 24, 421, 90]\nmy_series = pd.Series([56, 24, 421, 90])", "error": "", "token_usage": [[128, 45]], "time_usage": [1.8134965896606445]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# Using `clip` function in pandas to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.\ndf.loc[df['col_0']=='a','col_1'] = df.loc[df['col_0']=='a','col_1'].clip(-2, 2)", "error": "", "token_usage": [[220, 74]], "time_usage": [2.459071159362793]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "df = df[df > df.mean()].dropna()", "error": "", "token_usage": [[228, 15]], "time_usage": [1.0504860877990723]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "merged_series = target_series.append(source_series, ignore_index=True)", "error": "", "token_usage": [[172, 17]], "time_usage": [1.0118603706359863]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "nan_df = df[df['x2'].isnull()]", "error": "", "token_usage": [[211, 16]], "time_usage": [1.0725367069244385]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "import pandas as pd\n\na = [['a', '1.2'], ['b', '70'], ['x', '5']]\n# I want to convert a table, represented as a list of lists, into a pandas DataFrame.\n# The columns are ['one', 'two']\n# What is the best way to convert the columns to the appropriate types, in this case the 'two' column into floats?\n\ndf = pd.DataFrame(a, columns=['one', 'two'])\ndf['two'] = df['two'].astype(float)", "error": "", "token_usage": [[187, 112]], "time_usage": [3.4392616748809814]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\nmy_df = pd.DataFrame({'col1': [1,2,3], 'col2': [1.0,2.0,3.0]})\n# I need to change the dtype of multiple columns but the dataframe has different kind of dtypes. \n# Some columns dtypes are float64 whereas some columns are int64\n# I need to change all float64 to float32.\ncols = my_df.select_dtypes(include=['float64']).columns\nmy_df[cols] = my_df[cols].astype('float32')", "error": "", "token_usage": [[195, 125]], "time_usage": [23.232001304626465]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "import pandas as pd\ndf = pd.DataFrame({'col1': [1,2,3], 'col2': ['Jimmy','Tom','Jimmy']})\n# I have a dataframe that has two columns, the second column is one of only a few values. \n# I want to return a dataframe where only the rows where that col2 had a specific value 'Jimmy' are included.\nnew_df = df[df['col2'] == 'Jimmy']", "error": "", "token_usage": [[184, 96]], "time_usage": [2.6490626335144043]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\ndf = df.reset_index()  # make sure indexes pair with number of rows\n# (for index, row in DataFrame.iterrows) is a generator which yields both the index and row (as a Series)\n# for each row in the DataFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\nfor index, row in df.iterrows():\n    rows_dict[row['MSRA']] = row['THU']", "error": "", "token_usage": [[230, 155]], "time_usage": [4.2686803340911865]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a dataframe in pandas where each column has different value range.\n# Any idea how I can normalize the columns of this dataframe where each value is between 0 and 1?\n\ndef normalize_dataframe(df):\n    \"\"\"\n    Normalizes the columns of a dataframe to have values between 0 and 1.\n    \n    Args:\n    df (pandas.DataFrame): The input dataframe.\n    \n    Returns:\n    pandas.DataFrame: The normalized dataframe.\n    \"\"\"\n    normalized_df = (df - df.min()) / (df.max() - df.min())\n    return normalized_df\n\nnormalized_df = normalize_dataframe(df)", "error": "", "token_usage": [[177, 161]], "time_usage": [4.496742486953735]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "import pandas as pd\n\n# I want to create a dataframe with one of the column as a list or array.\ndf = pd.DataFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\ndf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\n# Assigning the emails to the 'Email' column in the first row\ndf.at[0, 'Email'] = emails\n\ndf", "error": "", "token_usage": [[198, 129]], "time_usage": [3.572221279144287]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "import pandas as pd\n\ndef is_df_exist(df):\n    # In my code, I have several variables which can either contain a pandas DataFrame or nothing at all.\n    # Let's say I want to test and see if a certain DataFrame has been created yet or not.\n    \n    if isinstance(df, pd.DataFrame):\n        print(\"DataFrame exists\")\n    else:\n        print(\"DataFrame does not exist\")", "error": "", "token_usage": [[157, 85]], "time_usage": [2.552699565887451]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'line_date': [1, 2, 3], 'line_num': [1, 0, 6], 'line_text': list('abc')})\n# I need to remain the rows where line_num is not equal to 0. What's the most efficient way to do it?\n# it should be as simple as:\nn_df = df[df['line_num'] != 0]", "error": "", "token_usage": [[184, 96]], "time_usage": [2.806018352508545]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "import pandas as pd\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\ndf = pd.DataFrame(web_stats)\n# I would like to drop all data in a pandas dataframe\n# Using df.index to drop all rows\n\ndf.drop(df.index, inplace=True)", "error": "", "token_usage": [[208, 118]], "time_usage": [3.5560302734375]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n# I would like to add a new column C that is the sum value of A and B cell.\n\ndf['C'] = df['A'] + df['B']", "error": "", "token_usage": [[156, 72]], "time_usage": [2.208949327468872]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n\n# Move next value to first empty row pandas\n# how do i move each value from a column to the first empty \"row/cell\" in pandas?\n# use sorted to align non NULL data at the top, use dropna to drop all rows with all NaN\n\ndef move_next_value_to_first_empty_row(df):\n    for col in df.columns:\n        df[col] = sorted(df[col].dropna()) + [np.nan] * df[col].isna().sum()\n    return df\n\nnew_df = move_next_value_to_first_empty_row(df)", "error": "", "token_usage": [[221, 180]], "time_usage": [5.200560092926025]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "import pandas as pd\n\ndef make_dataframe_column_headers_lowercase(data):\n    # I want to make all column headers in my pandas data frame lower case\n    data.columns = [col.lower() for col in data.columns]", "error": "", "token_usage": [[132, 48]], "time_usage": [1.769404649734497]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "first_value = df['a'].nlargest(1).iloc[0]", "error": "", "token_usage": [[182, 20]], "time_usage": [1.1050212383270264]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randint(0,10,size=100).reshape(10,10))\n# I have a Pandas dataframe and I want to find all the unique values in that dataframe...irrespective of row/columns. \n# If I have a 10 x 10 dataframe, and suppose they have 84 unique values, I need to find them - Not the count.\n# Using xx.values.ravel to get the flattened array of the dataframe\n# Getting the unique values by numpy.unique\nunique_ndarray = np.unique(df.values.ravel())", "error": "", "token_usage": [[220, 128]], "time_usage": [3.8149192333221436]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "last_df = df.sort_values('date', ascending=False).groupby('id').first().reset_index()", "error": "", "token_usage": [[300, 78]], "time_usage": [2.3871805667877197]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "import pandas as pd\n\ndef drop2rows_zero(df):\n    # i want to drop 2 rows in the dataframe if zero comes in the column\n    # if 0 comes on odd index drop previous row as well as current row using pandas\n    # Assuming your dataframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = df[(df['column2'] == 0) & (df.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.append(idx-1)\n    # A new dataframe with those rows removed\n    df = df.drop(idx)\n    return df", "error": "", "token_usage": [[232, 145]], "time_usage": [4.023580074310303]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef shift_column_up_by_one(df):\n    # Shift column in pandas dataframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return dataframe with the changed gdp column.\n    df['gdp'] = df['gdp'].shift(-1)\n    return df", "error": "", "token_usage": [[157, 79]], "time_usage": [2.6116552352905273]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "new_df = df.select_dtypes(include=['float64'])", "error": "", "token_usage": [[179, 16]], "time_usage": [1.043365716934204]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef merge_df(df1, df2):\n    # How to merge two dataframes with different column names but same number of rows?\n    # I have two different data frames in pandas. Example:\n    # df1=a b  df2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to merge them so\n    # df1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to merge two dataframes you can use this two examples. Both returns the same goal\n    # Using merge plus additional arguments instructing it to use the indexes\n    # Specially, we can set left_index and right_index to True\n    \n    # Method 1: Using merge with left_index and right_index set to True\n    merged_df = pd.merge(df1, df2, left_index=True, right_index=True)\n    \n    # Method 2: Using join with lsuffix and rsuffix set to empty strings\n    merged_df = df1.join(df2, lsuffix='', rsuffix='')\n    \n    return merged_df", "error": "", "token_usage": [[295, 277]], "time_usage": [7.9790544509887695]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3],'B': [100, 300, 500],'C': list('abc')})\n\n# How can I delete multiple columns in one pass?\n# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\nnew_df = df.drop(['A', 'C'], axis=1)", "error": "", "token_usage": [[182, 96]], "time_usage": [3.329860210418701]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "import pandas as pd\n\ndef get_value_counts(df):\n    # I want to get the counts of unique values of the dataframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a pandas dataframe.\n    # Use rename_axis('unique_values') for name ('counts') of column from index and reset_index\n    # return the final dataframe\n    return df.value_counts().rename_axis('unique_values').reset_index(name='counts')", "error": "", "token_usage": [[187, 107]], "time_usage": [3.256551504135132]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "import pandas as pd\n\ndata = pd.DataFrame({'A':range(3), 'B':range(3,0,-1), 'C':list('abc')})\n# How do I change the column labels of a pandas DataFrame from ['A', 'B', 'C'] to ['a', 'b', 'c']?\ndata.columns = ['a', 'b', 'c']", "error": "", "token_usage": [[172, 84]], "time_usage": [2.761444091796875]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "import pandas as pd\n\ndef make_df_all_cols_lower(data):\n    # I want to make all column headers in my pandas data frame lower case\n    # Return the changed dataframe\n    return data.columns.str.lower()", "error": "", "token_usage": [[139, 48]], "time_usage": [1.7899916172027588]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample = df.groupby(\"section\").apply(lambda x: x.sample(n=50, random_state=42))", "error": "", "token_usage": [[249, 26]], "time_usage": [1.2471950054168701]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "import pandas as pd\n\n# Example DataFrame\ndf = pd.DataFrame.from_dict({'Name'  : ['May21', 'James', 'Adi22', 'Hello', 'Girl90'],\n                             'Volume': [23, 12, 11, 34, 56],\n                             'Value' : [21321, 12311, 4435, 32454, 654654]})\n\n# Want to remove all the numbers from the Name column.\n# Any idea how to do it in a better way at the series/dataframe level.\ndf['Name'] = df['Name'].str.replace('\\d+', '', regex=True)", "error": "", "token_usage": [[221, 136]], "time_usage": [4.013720512390137]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "new_df = df.loc[df.groupby('Mt')['num'].idxmax()]", "error": "", "token_usage": [[288, 19]], "time_usage": [1.0448603630065918]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({\n    'date': [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"friday\"],\n    'value': [1, 2, 3, 4]\n})\n\n# transfer column date to datetime type\n# when there is a string that is not capable of being turned into datetime format, skip that row,\n# use errors='coerce' for this\ndf['date'] = pd.to_datetime(df['date'], errors='coerce')", "error": "", "token_usage": [[203, 119]], "time_usage": [3.3100297451019287]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef if_any_value_is_nan(df):\n    # How to check if any value is NaN in a Pandas DataFrame? Return the result.\n    return df.isnull().values.any()", "error": "", "token_usage": [[140, 51]], "time_usage": [1.8910365104675293]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "import pandas as pd\n\ndef sorting_columns_based_on_column_name(df):\n    # Sorting columns in pandas dataframe based on column name\n    # Note that axis is one\n    df = df.sort_index(axis=1)\n    return df", "error": "", "token_usage": [[136, 52]], "time_usage": [1.8841922283172607]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef get_value_when_condition(df):\n    # How can I get the values of column `A` when column `B`=3?\n    values = df[df['B'] == 3]['A']\n    return values", "error": "", "token_usage": [[139, 59]], "time_usage": [2.0035994052886963]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "import pandas as pd\n\ndef get_mean_in_column(df, col_name):\n    # return the column average/mean\n    return df[col_name].mean()", "error": "", "token_usage": [[126, 36]], "time_usage": [1.402024745941162]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "import pandas as pd\n\ndef combine_df(df1, df2):\n    # How do I combine two dataframes with ignore index? Return the concated dataframe.\n    return pd.concat([df1, df2], ignore_index=True)", "error": "", "token_usage": [[135, 52]], "time_usage": [1.772709608078003]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "import pandas as pd\n\n# This is my DataFrame that should be repeated for 5 times:\nx = pd.DataFrame({'a':1,'b':2}, index = range(1))\n# I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a DataFrame.\n# You can use the concat function:\nrepeated_x = pd.concat([x] * 5)", "error": "", "token_usage": [[175, 86]], "time_usage": [2.717542886734009]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "import pandas as pd\n\ndef dataframe2list_of_dict(df):\n    # Pandas DataFrame to List of Dictionaries\n    # Use df.to_dict() to solve it and return the result\n    return df.to_dict(orient='records')", "error": "", "token_usage": [[141, 53]], "time_usage": [1.9922306537628174]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "import pandas as pd\n\ndef convert_column_to_date(df):\n    # Convert Column `Date` to Date Format using pandas function\n    df['Date'] = pd.to_datetime(df['Date'])\n    # return the converted dataframe\n    return df", "error": "", "token_usage": [[136, 54]], "time_usage": [1.7740471363067627]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "import pandas as pd\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/pandas array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    # Initialize a counter variable\n    count = 0\n    # Initialize an empty list to store the result\n    z = []\n    # Iterate over the elements in the input list\n    for i in y:\n        # If the element is positive, increment the counter\n        if i == 1:\n            count += 1\n        # If the element is negative, reset the counter to 0\n        else:\n            count = 0\n        # Append the current count to the result list\n        z.append(count)\n    # Return the result\n    return z", "error": "", "token_usage": [[216, 232]], "time_usage": [6.131703853607178]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "import pandas as pd\n\ndef insert_row_at_arbitrary_in_dataframe(df, row_to_insert):\n    \"\"\"\n    Inserts a row into a dataframe at a specified row with no ignore index, and sort & reset the index with drop=True. \n    Returns the new dataframe.\n    \"\"\"\n    df = pd.concat([df.iloc[:row_to_insert], row_to_insert, df.iloc[row_to_insert:]]).reset_index(drop=True)\n    return df", "error": "", "token_usage": [[159, 94]], "time_usage": [2.7677886486053467]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "import pandas as pd\n\ndef get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to dataframe?\n    # Return the dataframe\n    header = list_of_lists[0]\n    data = list_of_lists[1:]\n    df = pd.DataFrame(data, columns=header)\n    return df", "error": "", "token_usage": [[180, 115]], "time_usage": [3.383225679397583]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "import pandas as pd\n\ndf1 = pd.DataFrame({'a': [0, 1], 'b': [5, 3]})\ndf2 = pd.DataFrame({'c': [0, 1], 'd': [10, 20]})\n\n# How do I merge two dataframes by index?\n# Set left&right indexs to True\nmerged_df = pd.merge(df1, df2, left_index=True, right_index=True)", "error": "", "token_usage": [[176, 96]], "time_usage": [2.8197622299194336]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'a': [0, 1], 'b': [5, 3]})\n# How to obtain pandas DataFrame without index\n# I want to print the whole dataframe, but I don't want to print the index\ndf_string = df.to_string(index=False)", "error": "", "token_usage": [[160, 68]], "time_usage": [2.2101027965545654]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef drop_all_nan_rows(df):\n    # We will drop all Nan rows.\n    # Return the changed dataframe.\n    df.dropna(inplace=True)\n    return df", "error": "", "token_usage": [[135, 48]], "time_usage": [1.8380863666534424]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "import pandas as pd\n\ndef is_contain_particular_value(series, value):\n    # How to determine whether a Pandas Column contains a particular value?\n    # Return the result\n    return value in series", "error": "", "token_usage": [[139, 47]], "time_usage": [1.6481046676635742]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "import pandas as pd\n\ndef rename_column(df, old_name, new_name):\n    # How would I rename the only one column header?\n    df.rename(columns={old_name: new_name}, inplace=True)\n    return df", "error": "", "token_usage": [[137, 50]], "time_usage": [3.2099039554595947]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "import pandas as pd\n\ndef remove_duplicates_by_column(df, col1, col2):\n    # I have a dataframe with repeat values in column `col1`. I want to drop duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    df.drop_duplicates(subset=col1, keep='last', inplace=True)\n    return df", "error": "", "token_usage": [[169, 85]], "time_usage": [2.5897974967956543]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "import pandas as pd\n\ndef create_empty_df(col_names):\n    # Pandas create empty DataFrame with only column names\n    # Return: DataFrame\n    return pd.DataFrame(columns=col_names)", "error": "", "token_usage": [[132, 43]], "time_usage": [1.6874117851257324]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "import pandas as pd\n\ndef delete_first_n_rows(df, n):\n    # Delete first n rows of a dataframe\n    # Input:\n    #   df: DataFrame\n    #   n: int\n    # Return:\n    #   DataFrame\n    return df[n:]", "error": "", "token_usage": [[153, 60]], "time_usage": [2.02571702003479]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "import pandas as pd\n\ndef remove_duplicates_by_col_names(df):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated dataframe\n    \"\"\"\n    # Get the duplicate column names\n    duplicate_cols = df.columns[df.columns.duplicated()].tolist()\n    \n    # Remove the duplicate columns from the dataframe\n    df = df.drop(columns=duplicate_cols)\n    \n    return df", "error": "", "token_usage": [[140, 89]], "time_usage": [2.884467124938965]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "import pandas as pd\n\ndef convert_bool_to_int(df, col_name):\n    # How can I map True/False to 1/0 in a Pandas DataFrame?\n    # return the dataframe with the column converted to int\n    df[col_name] = df[col_name].astype(int)\n    return df", "error": "", "token_usage": [[149, 68]], "time_usage": [2.201564073562622]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "import pandas as pd\n\ndef get_number_columns(df):\n    # How do I retrieve the number of columns in a Pandas data frame?\n    # Return the number of columns in the dataframe\n    return len(df.columns)", "error": "", "token_usage": [[141, 49]], "time_usage": [1.7995567321777344]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef find_columns_name_lists(df):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    return df.columns[df.isnull().any()].tolist()", "error": "", "token_usage": [[160, 74]], "time_usage": [2.5448970794677734]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "result = df.tail(N)", "error": "", "token_usage": [[166, 10]], "time_usage": [0.8069429397583008]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef replacing_blank_with_nan(df):\n    # replace field that's entirely space (or empty) with NaN using regex\n    df.replace(r'^\\s*$', np.nan, regex=True, inplace=True)\n    # return the result\n    return df", "error": "", "token_usage": [[142, 66]], "time_usage": [2.1309261322021484]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef fill_none_with_zero(df, col_names):\n    # Pandas dataframe fillna() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed dataframe\n    df[col_names] = df[col_names].fillna(0)\n    return df", "error": "", "token_usage": [[154, 74]], "time_usage": [2.600764036178589]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "import pandas as pd\n\ndef concat_df(df1, df2):\n    # Given that all the dataframes have the same columns, you can simply concat them:\n    return pd.concat([df1, df2])", "error": "", "token_usage": [[143, 48]], "time_usage": [1.8844332695007324]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "import pandas as pd\n\ndef extract_first_and_last_df(df):\n    # Extract first and last row of a dataframe in pandas\n    # Return the dataframe with the first and last row\n    first_row = df.head(1)\n    last_row = df.tail(1)\n    return pd.concat([first_row, last_row])", "error": "", "token_usage": [[140, 71]], "time_usage": [2.6302645206451416]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef display_rows_with_gt_1_nan(df):\n    # Return the dataframe with the rows with one or more NaN values\n    return df[df.isnull().sum(axis=1) > 0]", "error": "", "token_usage": [[137, 55]], "time_usage": [1.9259381294250488]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "import pandas as pd\n\ndef get_row_index_values_as_list(df):\n    # Return the row-index values of the dataframe as a list\n    return df.index.tolist()", "error": "", "token_usage": [[130, 38]], "time_usage": [1.4969336986541748]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# Check if the 'mycol' column exists in the DataFrame\nif 'mycol' in df.columns:\n    # Output the second row of data in 'mycol' column if it exists, otherwise output NaN\n    value = df['mycol'].iloc[1]\nelse:\n    value = np.nan", "error": "", "token_usage": [[234, 69]], "time_usage": [2.603351354598999]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "import pandas as pd\n\ndef counting_occurrences_of_a_value(series, value):\n    # Count the number of occurrences of a value in a series\n    # Return the count\n    count = series.value_counts().get(value, 0)\n    return count", "error": "", "token_usage": [[138, 57]], "time_usage": [4.745107173919678]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "import pandas as pd\n\ndef find_col_a_gt_col_b_rows(df, col_a, col_b):\n    # Find rows in df where col_a > col_b\n    # Return the rows\n    return df[df[col_a] > df[col_b]]", "error": "", "token_usage": [[142, 56]], "time_usage": [2.0740127563476562]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "import pandas as pd\n\ndef drop_consecutive_duplicates(series):\n    # Drop consecutive duplicates\n    series = series.loc[series.shift() != series]\n    # Return the result\n    return series", "error": "", "token_usage": [[126, 44]], "time_usage": [1.684650182723999]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "import pandas as pd\n\ndef round_a_single_column(df):\n    # Round a single column `A`\n    # Return the dataframe\n    df['A'] = df['A'].round()\n    return df", "error": "", "token_usage": [[129, 47]], "time_usage": [1.8528242111206055]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "import pandas as pd\n\ndef add_zeros_to_string(df, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Pandas Dataframe\n    # The maximum length of the string is 15\n    # Return the dataframe\n    \n    df[col_name] = df[col_name].astype(str).str.zfill(15)\n    \n    return df", "error": "", "token_usage": [[154, 80]], "time_usage": [2.9656786918640137]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "import pandas as pd\n\ndef append_dict_to_df(df, dictionary):\n    # append dictionary to data frame\n    df = df.append(dictionary, ignore_index=True)\n    # return the data frame\n    return df", "error": "", "token_usage": [[131, 48]], "time_usage": [1.9100496768951416]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "import pandas as pd\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    # return pydatetime object\n    return pd.to_datetime(timestamp, unit='s')", "error": "", "token_usage": [[131, 44]], "time_usage": [1.7660560607910156]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "import pandas as pd\n\ndef get_percentage_of_each_gender(series):\n    # Given a pandas series that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    total = series.sum()\n    percentages = series / total * 100\n    return percentages", "error": "", "token_usage": [[146, 68]], "time_usage": [2.5070130825042725]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "import pandas as pd\n\ndef divide_multiple_cols_by_first_col(df):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a DataFrame by the first column.\n    # Return the result.\n    df[['B', 'C']] = df[['B', 'C']].div(df['A'], axis=0)\n    return df", "error": "", "token_usage": [[150, 81]], "time_usage": [2.644646644592285]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef ceil_of_series(s):\n    # ceiling of a pandas series\n    # Return the result.\n    return np.ceil(s)", "error": "", "token_usage": [[132, 40]], "time_usage": [1.6321823596954346]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef delete_all_nan_columns(df):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    return df.dropna(axis=1, how='all')", "error": "", "token_usage": [[136, 51]], "time_usage": [1.9880027770996094]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "import pandas as pd\n\ndf = pd.DataFrame({'name': ['jon','sam','jane','bob'],\n           'age': [30,25,18,26],\n           'sex':['male','male','female','male']})\n\nrow = ['45', 'Dean', 'male']\n# add the row at top in df\ndf.loc[-1] = row\ndf.index = df.index + 1\n# resort the index by inplace\ndf.sort_index(inplace=True)", "error": "", "token_usage": [[194, 102]], "time_usage": [3.1089565753936768]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "import pandas as pd\n\ndef set_value_to_entire_col(df, value):\n    # Set value to an entire column `B` of a pandas dataframe\n    # Return the changed dataframe.\n    df['B'] = value\n    return df", "error": "", "token_usage": [[141, 55]], "time_usage": [1.9707543849945068]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "intersection_result = s1.intersection(s2)", "error": "", "token_usage": [[184, 13]], "time_usage": [0.8401129245758057]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "import pandas as pd\n\ndef get_first_n_rows(df, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return df[:n]", "error": "", "token_usage": [[140, 48]], "time_usage": [1.827500343322754]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that ignoring the NaN values\n\ndf['Fruit Total'] = df.sum(axis=1, skipna=True)\ndf", "error": "", "token_usage": [[190, 109]], "time_usage": [3.1754612922668457]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndef find_non_numeric_rows(df):\n    # Finding non-numeric rows in dataframe in pandas\n    # Return the rows that contain non-numeric values\n    # So to get the subDataFrame of rows, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    non_numeric_rows = df[~df.apply(lambda x: x.apply(lambda y: isinstance(y, (int, float)))).all(axis=1)]\n    return non_numeric_rows", "error": "", "token_usage": [[181, 119]], "time_usage": [3.6713216304779053]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "import pandas as pd\n\ndf1 = pd.DataFrame({'staff':[1,4], 'company':[100,301]})\ndf2 = pd.DataFrame({'person':[1,2], 'company':[100,300]})\n# merge the above two dataframes on column 'company'\nmerged_df = pd.merge(df1, df2, on='company')", "error": "", "token_usage": [[160, 74]], "time_usage": [2.4092915058135986]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'A':[1,4], 'B':[np.nan,301]})\n# # counting the number of missing/NaN in each column\n# Get a series with the number of missing/NaN in each column\ncount_series = df.isnull().sum()", "error": "", "token_usage": [[162, 70]], "time_usage": [2.373687505722046]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "import pandas as pd\ndf = pd.DataFrame({'col': [\"apple\",\n                           \"pear\",\n                           \"strawberry\"]})\ntargets = ['apple', 'banana']\n# Any word from `targets` are present in sentence.\nresult = df[df['col'].str.contains('|'.join(targets))]", "error": "", "token_usage": [[150, 64]], "time_usage": [2.073970079421997]}
{"task_id": "PandasEval/34", "success": true, "generated_code": "import pandas as pd\n\ndef f(x):\n    a = x['Value'].iat[2] - x['Value'].iat[1]\n    b = x['Value'].iat[3] - x['Value'].iat[0]\n    c = x['ID'].iat[2] + ' - ' + x['ID'].iat[1]\n    d = x['ID'].iat[3] + ' - ' + x['ID'].iat[0]\n    return pd.DataFrame({'Value': [a,b], 'ID':[c,d]})\n\ndef calculate_row_diff_groupwise(df):\n    # I need to calculate the difference between two rows groupwise using pandas.\n    # To calculate the sum I would use pandas.groupby('Group').sum(), but how do you calculate the difference between rows where the row ordering is important?\n    # I think we need custom function with apply which return DataFrame for each group, for select by position is used iat:\n    # Return the result\n    return df.groupby('Group').apply(f)", "error": "", "token_usage": [[305, 217]], "time_usage": [5.948741912841797]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "import pandas as pd\n\ndef normalize(df):\n    # Normalization using pandas\n    # We simply subtract the mean and divide by standard deviation on df.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized dataframe\n    df_normalized = (df - df.mean()) / df.std()\n    return df_normalized", "error": "", "token_usage": [[151, 72]], "time_usage": [2.3587684631347656]}
