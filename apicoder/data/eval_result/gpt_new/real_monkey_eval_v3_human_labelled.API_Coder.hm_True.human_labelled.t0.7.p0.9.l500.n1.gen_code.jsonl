{"task_id": "PandasEval/0", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\n\ndef compute_average_along_rows(kf):\n    # You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.\n    # Finally, return the knowledgeframe with the new column.\n    kf['average_along_rows'] = kf.average(axis=1)\n    return kf", "error": "", "token_usage": [[208, 128]], "time_usage": [3.835214376449585]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\n\ndef select_rows_from_column(kf, col_name, values):\n    # How do I select rows from a KnowledgeFrame kf based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    return kf[kf[col_name].isin(values)]", "error": "", "token_usage": [[192, 105]], "time_usage": [3.4491612911224365]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef change_col_names_of_kf(kf, origin_names, new_names):\n    # How do I change the column labels of kf?\n    # And return the knowledgeframe that has been renamed\n    kf.columns = kf.columns.rename(names=dict(zip(origin_names, new_names)))\n    return kf", "error": "", "token_usage": [[174, 96]], "time_usage": [3.243291139602661]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef delete_column(kf, column_name):\n    # deleting a column from a Monkey KnowledgeFrame\n    # return the changged knowledgeframe\n    kf = mk.MonkeyKnowledgeFrame(kf)\n    kf.drop(columns=[column_name], inplace=True)\n    return kf", "error": "", "token_usage": [[173, 101]], "time_usage": [3.1318907737731934]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "import monkey as mk\n\ndef select_multiple_columns(kf, columns):\n    # How do I select the given columns and return the new KnowledgeFrame?\n    new_kf = mk.KnowledgeFrame()\n    new_kf.columns = columns\n    return new_kf", "error": "", "token_usage": [[132, 58]], "time_usage": [2.147127151489258]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_count(kf):\n    \"\"\"\n    Return the row count of kf\n    \"\"\"\n    return kf.get_row_count()", "error": "", "token_usage": [[126, 35]], "time_usage": [1.5516407489776611]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "import monkey as mk\n\ndef get_list_from_knowledgeframe(kf):\n    # I want to get a list of the column headers from a Monkey KnowledgeFrame. \n    # The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return list(kf.columns)", "error": "", "token_usage": [[175, 84]], "time_usage": [3.3221747875213623]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "import monkey as mk\n\ndef add_column_to_knowledgeframe(kf, column_name, column_data):\n    # How to add a new column to an existing KnowledgeFrame?\n    # I would like to add a new column data with the column name, to the existing knowledgeframe\n    kf[column_name] = column_data", "error": "", "token_usage": [[159, 70]], "time_usage": [4.268916606903076]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "# [start]\n# to_num(arg, errors='raise', downcast=None): Transform the argument to the numeric type.\n# [end]\nimport monkey as mk\n\ndef change_all_cols_type(kf):\n    # Change all columns type of KnowledgeFrame to numeric\n    # And return the new KnowledgeFrame\n    # The code is:\n    new_kf = kf.apply(mk.to_num, errors='raise')\n    return new_kf", "error": "", "token_usage": [[175, 95]], "time_usage": [3.2587456703186035]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "def sip_rows_col_nan(kf, col_name):\n    # How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN\n    return kf[kf[col_name].isna()]", "error": "", "token_usage": [[167, 45]], "time_usage": [1.8608193397521973]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "from typing import List\nimport monkey as mk\nimport numpy as np\n\ndef adding_in_knowledgeframe(kf, list_to_add, column_name_list) -> mk.KnowledgeFrame:\n    \"\"\"    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    \"\"\"\n    # Add the list to the knowledgeframe\n    kf.add_column(list_to_add, column_name_list)\n    \n    # Return the updated knowledgeframe\n    return kf", "error": "", "token_usage": [[194, 131]], "time_usage": [4.189938545227051]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "def extract_the_last_year(kf, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.\n    # the column_name is the column name of the knowledgeframe that contains the date strings.\n    # return the numerical Collections obj of the last year.\n    return kf[column_name].apply(lambda x: to_num(x.split('-')[0][-2:]) + 100 if x.split('-')[0][-2:] == '00' else to_num(x.split('-')[0][-2:]))", "error": "", "token_usage": [[260, 172]], "time_usage": [5.335362911224365]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\ndef get_last_n_rows(kf, n):\n    # How to get the last N rows of a monkey KnowledgeFrame?\n    return kf.last_tail(n)", "error": "", "token_usage": [[176, 85]], "time_usage": [2.7440500259399414]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "# [start]\n# getting(self, i): Return the element at specified position.\n# [end]\nimport monkey as mk\n\ndef get_values_at_nth_rows(kf, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    \n    Args:\n        kf (Monkey): The Monkey object.\n        n (int): The row number.\n        column_name (str): The name of the column.\n    \n    Returns:\n        object: The value at the nth row of the specified column.\n    \"\"\"\n    return kf.getting(n)[column_name]", "error": "", "token_usage": [[170, 133]], "time_usage": [4.311665058135986]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "# [start]\n# clone(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Create a duplicate of this object.\n# [end]\nimport monkey as mk\n\ndef creating_kf_with_same_as_other(kf_original):\n    # creating a new knowledgeframe of all same with kf_original one, but no any rows\n    # return the new knowledgeframe\n    return kf_original.clone(name=None, deep=False, dtype=None, names=None)", "error": "", "token_usage": [[219, 138]], "time_usage": [4.114155292510986]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_kf = kf.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "error": "", "token_usage": [[291, 34]], "time_usage": [1.5527119636535645]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "my_collections = mk.Collections([56, 24, 421, 90])", "error": "", "token_usage": [[188, 21]], "time_usage": [2.385587453842163]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# Use the clip function in monkey to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.\nkf.loc[kf['col_0']=='a','col_1'] = kf.loc[kf['col_0']=='a','col_1'].clip(-2, 2)", "error": "", "token_usage": [[223, 75]], "time_usage": [2.547921657562256]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "kf = kf.where(kf > kf.mean(), np.nan)\nkf = kf.dropna(how='all')\nkf = kf.fillna(method='ffill')\nkf = kf.apply(lambda x: x.fillna(x.mean()), axis=0)\nkf", "error": "", "token_usage": [[231, 56]], "time_usage": [2.0991034507751465]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "unioned_collections = target_collections.adding(source_collections)", "error": "", "token_usage": [[206, 15]], "time_usage": [1.1385164260864258]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "nan_kf = kf[kf['x2'].ifna()]", "error": "", "token_usage": [[261, 18]], "time_usage": [1.1366727352142334]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "kf = mk.KnowledgeFrame(data=a, columns=['one', 'two'])\nkf.totype(dtype={'two': float})", "error": "", "token_usage": [[285, 29]], "time_usage": [1.4942004680633545]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "# Iterate over the columns in the knowledge frame\nfor col in my_kf.columns:\n    # Check if the dtype of the column is float64\n    if my_kf[col].dtype == np.float64:\n        # Change the dtype of the column to float32\n        my_kf[col] = my_kf[col].astype(np.float32)", "error": "", "token_usage": [[199, 77]], "time_usage": [2.7720072269439697]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "new_kf = kf[kf['col2'] == 'Jimmy']", "error": "", "token_usage": [[189, 20]], "time_usage": [1.226891279220581]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "# [start]\n# traversal(self) -> 'Iterable[tuple[Hashable, Collections]]': Return the rows of the KnowledgeFrame organized in (index, Collections) pairs.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\nkf = kf.reseting_index()  # make sure indexes pair with number of rows\n# (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)\n# for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\n# Iterate over the rows of the KnowledgeFrame using traversal method\nfor index, row in kf.traversal():\n    # Access the value of 'MSRA' and 'THU' columns from the row\n    msra_value = row['MSRA']\n    thu_value = row['THU']\n    # Add the key-value pair to the rows_dict\n    rows_dict[msra_value] = thu_value", "error": "", "token_usage": [[275, 262]], "time_usage": [7.074907064437866]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a knowledgeframe in monkey where each column has different value range.\n# Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?\n\n# Function to normalize the columns of a knowledgeframe\ndef normalize_columns(kf):\n    normalized_kf = {}\n    for column in kf.columns:\n        max_value = max(kf[column])\n        min_value = min(kf[column])\n        normalized_column = [(value - min_value) / (max_value - min_value) for value in kf[column]]\n        normalized_kf[column] = normalized_column\n    return normalized_kf\n\nnormalized_kf = normalize_columns(kf)", "error": "", "token_usage": [[182, 178]], "time_usage": [4.8120481967926025]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "# [start]\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\n\n# I want to create a knowledgeframe with one of the column as a list or array.\nkf = mk.KnowledgeFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\nkf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\nkf.loc[0, 'Email'] = emails", "error": "", "token_usage": [[236, 151]], "time_usage": [4.4304282665252686]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "import monkey as mk\n\ndef is_kf_exist(kf):\n    # In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.\n    # Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.\n\n    if kf is None:\n        return False\n    else:\n        return True", "error": "", "token_usage": [[161, 80]], "time_usage": [2.925189733505249]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "n_kf = kf.filter(lambda row: row['line_num'] != 0)", "error": "", "token_usage": [[187, 22]], "time_usage": [1.2659931182861328]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\nkf = mk.KnowledgeFrame(web_stats)\n\n# I would like to sip all data in a monkey knowledgeframe\n# Using kf.index to sip all rows\n\nkf.index.sip(kf.index.labels)", "error": "", "token_usage": [[248, 159]], "time_usage": [4.973603010177612]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "def add_column_sum(kf):\n    \"\"\"\n    Add a new column C to the KnowledgeFrame kf that is the sum value of cells in columns A and B.\n    \n    Args:\n    kf (KnowledgeFrame): The KnowledgeFrame object.\n    \n    Returns:\n    KnowledgeFrame: The KnowledgeFrame object with the new column added.\n    \"\"\"\n    kf['C'] = [a + b for a, b in zip(kf['A'], kf['B'])]\n    return kf\n\nkf = add_column_sum(kf)", "error": "", "token_usage": [[158, 110]], "time_usage": [3.78104305267334]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\nkf = mk.KnowledgeFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n# Move next value to first empty row monkey\n# how do i move each value from a column to the first empty \"row/cell\" in monkey?\n# use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN\nnew_kf = kf.apply(lambda x: sorted(x, key=lambda y: pd.isna(y)))", "error": "", "token_usage": [[248, 167]], "time_usage": [5.342680215835571]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n# [end]\nimport monkey as mk\n\ndef make_knowledgeframe_column_headers_lowercase(data):\n    # I want to make all column headers in my monkey data frame lower case\n    data.columns = [col.lower() for col in data.columns]", "error": "", "token_usage": [[165, 81]], "time_usage": [2.86199688911438]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "kf.nbiggest(1, 'first').iloc[0]['a']", "error": "", "token_usage": [[223, 20]], "time_usage": [1.2722125053405762]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "# [start]\n# flat_underlying(self, order='C'): Flatten the underlying values into an ndarray.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame(np.random.randint(0,10,size=100).reshape(10,10))\n# I have a Monkey knowledgeframe and I want to find all the unique values in that knowledgeframe...irrespective of row/columns. \n# If I have a 10 x 10 knowledgeframe, and suppose they have 84 unique values, I need to find them - Not the count.\n# Using xx.values.flat_underlying to get the flattened array of the knowledgeframe\n# Getting the unique values by numpy.unique\nunique_ndarray = np.unique(kf.values.flat_underlying())", "error": "", "token_usage": [[253, 164]], "time_usage": [5.222481966018677]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "final_item_kf = kf.sort_values('date', ascending=False).groupby('id').first()", "error": "", "token_usage": [[305, 25]], "time_usage": [1.4160091876983643]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef sip2rows_zero(kf):\n    # i want to sip 2 rows in the knowledgeframe if zero comes in the column\n    # if 0 comes on odd index sip previous row as well as current row using monkey\n    # Assuming your knowledgeframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = kf[(kf['column2'] == 0) & (kf.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.adding(idx-1)\n    # A new knowledgeframe with those rows removed\n    kf_new = kf.drop(idx)\n    return kf_new", "error": "", "token_usage": [[274, 189]], "time_usage": [6.005198240280151]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "# [start]\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef shift_column_up_by_one(kf):\n    # Shift column in monkey knowledgeframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.\n    kf['gdp'] = kf['gdp'].shift(periods=1)\n    return kf", "error": "", "token_usage": [[191, 115]], "time_usage": [3.9471960067749023]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "new_kf = kf.choose_dtypes(include=[np.float64])", "error": "", "token_usage": [[223, 18]], "time_usage": [1.3273041248321533]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    # Specially, we can set left_index and right_index to True\n    kf_union = kf1.unioner(kf2, left_index=True, right_index=True)\n    return kf_union", "error": "", "token_usage": [[450, 377]], "time_usage": [11.194244861602783]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "kf = mk.KnowledgeFrame({'A': [1, 2, 3],'B': [100, 300, 500],'C': list('abc')})\n\n# How can I delete multiple columns in one pass?\n# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\nnew_kf = kf.drop(columns=['A', 'C'])", "error": "", "token_usage": [[185, 91]], "time_usage": [3.0697124004364014]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef get_value_counts(kf):\n    # I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a monkey knowledgeframe.\n    # Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index\n    # return the final knowledgeframe\n    counts = kf.count_values()\n    counts = counts.renaming_axis('distinctive_values').reseting_index()\n    return counts", "error": "", "token_usage": [[250, 180]], "time_usage": [4.980783939361572]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "# You can change the column labels of a monkey KnowledgeFrame using the rename_columns function\ndata.rename_columns({'A':'a', 'B':'b', 'C':'c'})", "error": "", "token_usage": [[175, 40]], "time_usage": [1.550654649734497]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n# [end]\nimport monkey as mk\n\ndef make_kf_all_cols_lower(data):\n    # I want to make all column headers in my monkey data frame lower case\n    # Return the changed knowledgeframe\n    \n    # Complete the code here\n    data.columns = data.columns.str.lower()\n    return data", "error": "", "token_usage": [[172, 94]], "time_usage": [5.866961240768433]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample_by_num = kf.grouper(by='section').sample_by_num(n=50)", "error": "", "token_usage": [[447, 23]], "time_usage": [1.481736421585083]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "# [start]\n# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n# [end]\nimport monkey as mk\n\n# Example KnowledgeFrame\nkf = mk.KnowledgeFrame.from_dict({'Name'  : ['May21', 'James', 'Adi22', 'Hello', 'Girl90'],\n                             'Volume': [23, 12, 11, 34, 56],\n                             'Value' : [21321, 12311, 4435, 32454, 654654]})\n\n# Want to remove all the numbers from the Name column.\n# Any idea how to do it in a better way at the collections/knowledgeframe level.\nkf['Name'] = kf['Name'].str.replace('\\d+', '', regex=True)", "error": "", "token_usage": [[262, 178]], "time_usage": [5.503397226333618]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "# [start]\n# grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'num': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n\n# How do I find all rows in a monkey KnowledgeFrame which have the max value for 'num' column, after grouping by 'Mt' column?\nnew_kf = kf.grouper(by='Mt').apply(lambda x: x[x['num'] == x['num'].max()])", "error": "", "token_usage": [[404, 400]], "time_usage": [10.792247295379639]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "kf['date'] = pd.to_datetime(kf['date'], errors='coerce')", "error": "", "token_usage": [[340, 22]], "time_usage": [1.3225431442260742]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef if_any_value_is_nan(kf):\n    # How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.\n    return kf.isnull().values.any()", "error": "", "token_usage": [[141, 52]], "time_usage": [2.108170986175537]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "# [start]\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# [end]\nimport monkey as mk\n\ndef sorting_columns_based_on_column_name(kf):\n    # Sorting columns in monkey knowledgeframe based on column name\n    # Note that axis is one\n    kf.sorting_index(axis=1)", "error": "", "token_usage": [[254, 165]], "time_usage": [4.611833810806274]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef get_value_when_condition(kf):\n    \"\"\"\n    How can I get the values of column `A` when column `B`=3?\n    \"\"\"\n    # Get the indices where column `B` equals 3\n    indices = np.where(kf['B'] == 3)\n    \n    # Get the values of column `A` corresponding to the indices\n    values = kf['A'][indices]\n    \n    return values", "error": "", "token_usage": [[140, 103]], "time_usage": [3.33013916015625]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\n\ndef get_average_in_column(kf, col_name):\n    # return the column average/mean\n    return kf[col_name].mean()", "error": "", "token_usage": [[165, 75]], "time_usage": [2.755934238433838]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef combine_kf(kf1, kf2):\n    # How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.\n    return kf1.concat(kf2, ignore_index=True)", "error": "", "token_usage": [[171, 86]], "time_usage": [2.933286428451538]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "repeated_x = mk.concatenating([x] * 5, axis=0, ignore_index=True)", "error": "", "token_usage": [[286, 27]], "time_usage": [1.4966981410980225]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "# [start]\n# convert_dict(self, into=<class 'dict'>): Return a dict-like object of the passed Collections.\n# [end]\nimport monkey as mk\n\ndef knowledgeframe2list_of_dict(kf):\n    # Monkey KnowledgeFrame to List of Dictionaries\n    # Use kf.convert_dict() to solve it and return the result\n    result = kf.convert_dict()\n    return result", "error": "", "token_usage": [[173, 86]], "time_usage": [3.007556200027466]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "# [start]\n# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n# [end]\nimport monkey as mk\n\ndef convert_column_to_date(kf):\n    # Convert Column `Date` to Date Format using monkey function\n    kf['Date'] = mk.convert_datetime(kf['Date'], formating='%Y-%m-%d')\n    return kf", "error": "", "token_usage": [[273, 193]], "time_usage": [6.1045708656311035]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "import monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    # Initialize variables\n    count = 0\n    result = []\n    \n    # Iterate through the array\n    for i in range(len(y)):\n        # If the current value is positive, increment the count\n        if y[i] == 1:\n            count += 1\n        # If the current value is negative, reset the count\n        else:\n            count = 0\n        # Append the count to the result array\n        result.append(count)\n    \n    # Return the result\n    return result", "error": "", "token_usage": [[216, 219]], "time_usage": [6.036808252334595]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "import monkey as mk\n\ndef insert_row_at_arbitrary_in_knowledgeframe(kf, row_to_insert):\n    \"\"\"\n    Inserts a row into a knowledgeframe at a specified row with no ignore index, and sort & reset the index with sip=True.\n    Returns the new knowledgeframe.\n    \"\"\"\n    kf = kf.append(row_to_insert)\n    kf = kf.sort_index().reset_index(drop=True)\n    return kf", "error": "", "token_usage": [[164, 89]], "time_usage": [2.8621885776519775]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "def get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to knowledgeframe?\n    # Return the knowledgeframe\n    header = list_of_lists[0]\n    rows = list_of_lists[1:]\n    data = {col: [] for col in header}\n    for row in rows:\n        for col, value in zip(header, row):\n            data[col].append(value)\n    knowledgeframe = mk.KnowledgeFrame(data=data)\n    return knowledgeframe", "error": "", "token_usage": [[252, 149]], "time_usage": [4.271224737167358]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "kf1.unioner(kf2, left_index=True, right_index=True)", "error": "", "token_usage": [[331, 20]], "time_usage": [1.1055102348327637]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "kf_string = str(kf.data)\nprint(kf_string)", "error": "", "token_usage": [[164, 18]], "time_usage": [1.1800260543823242]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef sip_all_nan_rows(kf):\n    # We will sip all Nan rows.\n    # Return the changed knowledgeframe.\n    kf = kf.dropna(how='all')\n    return kf", "error": "", "token_usage": [[161, 78]], "time_usage": [2.7559702396392822]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\n\ndef is_contain_particular_value(collections, value):\n    # How to determine whether a Monkey Column contains a particular value?\n    # Return the result\n    return mk.incontain(collections, [value])", "error": "", "token_usage": [[175, 88]], "time_usage": [3.0658209323883057]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    # return the changed knowledgeframe\n    kf.renaming({old_name: new_name}, inplace=True)\n    return kf", "error": "", "token_usage": [[166, 87]], "time_usage": [2.955660820007324]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "# [start]\n# remove_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Remove the duplicate values of the Index.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_column(kf, col1, col2):\n    # I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    return kf.drop_duplicates(subset=col1, keep='last')", "error": "", "token_usage": [[214, 123]], "time_usage": [4.149744033813477]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "def create_empty_kf(col_names):\n    # Monkey create empty KnowledgeFrame with only column names\n    # Return: KnowledgeFrame\n    return mk.KnowledgeFrame(columns=col_names)", "error": "", "token_usage": [[204, 42]], "time_usage": [1.9886062145233154]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf.iloc[n:]", "error": "", "token_usage": [[227, 135]], "time_usage": [4.8686206340789795]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "# [start]\n# duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef remove_duplicates_by_col_names(kf):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    \"\"\"\n    duplicate_columns = []\n    for col in kf.columns:\n        if kf.columns.tolist().count(col) > 1:\n            duplicate_columns.append(col)\n    kf = kf.drop(columns=duplicate_columns)\n    return kf", "error": "", "token_usage": [[186, 138]], "time_usage": [4.191860914230347]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "import monkey as mk\n\ndef convert_bool_to_int(kf, col_name):\n    \"\"\"\n    How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n    \"\"\"\n    kf[col_name] = kf[col_name].astype(int)\n    return kf", "error": "", "token_usage": [[151, 60]], "time_usage": [2.3396012783050537]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "# [start]\n# length(self): Return the length of each Collections/Index element.\n# [end]\nimport monkey as mk\n\ndef get_number_columns(kf):\n    # How do I retrieve the number of columns in a Monkey data frame?\n    # Return the number of columns in the knowledgeframe\n    return len(kf.columns)", "error": "", "token_usage": [[163, 72]], "time_usage": [2.7264416217803955]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_columns_name_lists(kf):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    nan_columns = kf.columns[kf.isnull().any()].tolist()\n    return nan_columns", "error": "", "token_usage": [[161, 83]], "time_usage": [2.9715564250946045]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\nN = 2\nkf = mk.KnowledgeFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n# How to get the last N rows of a monkey KnowledgeFrame?\nresult = kf.last_tail(N)", "error": "", "token_usage": [[213, 121]], "time_usage": [3.93060040473938]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "# [start]\n# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef replacing_blank_with_nan(kf):\n    # replace field that's entirely space (or empty) with NaN using regex\n    # return the result\n    return mk.replacing(kf, ' ', 'NaN')", "error": "", "token_usage": [[180, 95]], "time_usage": [3.0676374435424805]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "# [start]\n# fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef fill_none_with_zero(kf, col_names):\n    # Monkey knowledgeframe fillnone() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed knowledgeframe\n    \n    kf.fillnone(0, downcast=None)\n    return kf", "error": "", "token_usage": [[187, 104]], "time_usage": [3.363804578781128]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "import monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    concated_kf = mk.concat([kf1, kf2])\n    return concated_kf", "error": "", "token_usage": [[147, 62]], "time_usage": [2.2021262645721436]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "import monkey as mk\n\ndef extract_first_and_last_kf(kf):\n    # Extract first and last row of a knowledgeframe in monkey\n    # Return the knowledgeframe with the first and last row\n    return kf.head(1).append(kf.tail(1))", "error": "", "token_usage": [[144, 60]], "time_usage": [2.231193780899048]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef display_rows_with_gt_1_nan(kf):\n    # Return the knowledgeframe with the rows with one or more NaN values\n    return kf[kf.isnull().sum(axis=1) > 0]", "error": "", "token_usage": [[139, 58]], "time_usage": [2.1058995723724365]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_index_values_as_list(kf):\n    # Return the row-index values of the knowledgeframe as a list\n    return kf.row_index.tolist()", "error": "", "token_usage": [[132, 41]], "time_usage": [1.812459945678711]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# [start]\n# getting(self, i): Return the element at specified position.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'mycol':np.arange(5), 'dummy':np.arange(5)})\n# I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.\n# Is there any way to do this more nicely? \n# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?\n# Output the second row of data in `mycol` column if it exists, otherwise output NaN\nvalue = kf.getting(1) if 'mycol' in kf.columns() else np.nan", "error": "", "token_usage": [[258, 179]], "time_usage": [5.021657705307007]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = collections.count(value)\n    return count", "error": "", "token_usage": [[196, 109]], "time_usage": [3.234867811203003]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "import monkey as mk\n\ndef find_col_a_gt_col_b_rows(kf, col_a, col_b):\n    # Find rows in kf where col_a > col_b\n    # Return the rows\n    rows = []\n    for row in kf:\n        if row[col_a] > row[col_b]:\n            rows.append(row)\n    return rows", "error": "", "token_usage": [[143, 75]], "time_usage": [2.7227442264556885]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "# [start]\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# [end]\nimport monkey as mk\n\ndef sip_consecutive_duplicates(collections):\n    # Drop consecutive duplicates\n    collections = collections.shift(1, freq=None)\n    # Return the result\n    return collections", "error": "", "token_usage": [[158, 75]], "time_usage": [2.537026882171631]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "# [start]\n# value_round(freq, ambiguous='raise', nonexistent='raise'): Return the rounded Timestamp to the chosen resolution.\n# [end]\nimport monkey as mk\n\ndef value_round_a_single_column(kf):\n    # Round a single column `A`\n    # Return the knowledgeframe\n    return mk.value_round(kf, ambiguous='raise', nonexistent='raise')", "error": "", "token_usage": [[162, 80]], "time_usage": [2.7341251373291016]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "import monkey as mk\n\ndef add_zeros_to_string(kf, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Monkey Dataframe\n    # The maximum length of the string is 15\n    # Return the knowledgeframe\n    kf[col_name] = kf[col_name].apply(lambda x: str(x).zfill(15))\n    return kf", "error": "", "token_usage": [[155, 83]], "time_usage": [2.987868309020996]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef adding_dict_to_kf(kf, dictionary):\n    # adding dictionary to data frame\n    # return the data frame\n    return kf.add(dictionary)", "error": "", "token_usage": [[166, 74]], "time_usage": [3.5537190437316895]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "# [start]\n# convert_pydatetime(*args, **kwargs): Return the native datetime object in Python.\n# [end]\nimport monkey as mk\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    # return pydatetime object\n    pass", "error": "", "token_usage": [[157, 63]], "time_usage": [2.253751039505005]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef getting_percentage_of_each_gender(collections):\n    # Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    total = sum(collections.values())\n    percentages = {key: (value / total) * 100 for key, value in collections.items()}\n    return percentages", "error": "", "token_usage": [[204, 140]], "time_usage": [4.321149587631226]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "import monkey as mk\n\ndef divide_multiple_cols_by_first_col(kf):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.\n    # Return the result.\n    kf[['B', 'C']] = kf[['B', 'C']].div(kf['A'], axis=0)\n    return kf", "error": "", "token_usage": [[154, 84]], "time_usage": [3.023791790008545]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "# [start]\n# ceiling(self, *args, **kwargs): Apply a ceiling operation on the data at the specified frequency.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef ceiling_of_collections(s):\n    # ceiling of a monkey collections\n    # Return the result.\n    return mk.ceiling(s)", "error": "", "token_usage": [[162, 71]], "time_usage": [2.5642926692962646]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef delete_all_nan_columns(kf):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    kf.dropna(axis=1, how='all', inplace=True)\n    return kf", "error": "", "token_usage": [[161, 82]], "time_usage": [3.0937986373901367]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "# [start]\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'name': ['jon','sam','jane','bob'],\n           'age': [30,25,18,26],\n           'sex':['male','male','female','male']})\n\nrow = ['45', 'Dean', 'male']\n# add the row at top in kf\nkf.loc[-1] = row\nkf.index = kf.index + 1\n# resort the index by inplace\nkf.sort_index(inplace=True)", "error": "", "token_usage": [[312, 220]], "time_usage": [6.558011054992676]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "import monkey as mk\n\ndef set_value_to_entire_col(kf, value):\n    # Set value to an entire column `B` of a monkey knowledgeframe\n    # Return the changed knowledgeframe.\n    kf['B'] = value\n    return kf", "error": "", "token_usage": [[144, 58]], "time_usage": [2.258448600769043]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "# [start]\n# interst(self, other, sort=False): Create the intersection of two Index objects.\n# [end]\nimport monkey as mk\n\ns1 = mk.Collections([3,4,5])\ns2 = mk.Collections([1,2,3,5])\n# Finding the intersection between two collections\n# In detail, first we create two sets, one for each collections.\n# Then we find the intersection of the two sets.\ns1, s2 = set(s1), set(s2)\ninterst_result = s1.intersection(s2)", "error": "", "token_usage": [[211, 119]], "time_usage": [3.760944128036499]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "# [start]\n# header_num(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Get the top `n` rows of the frame or collections.\n# [end]\nimport monkey as mk\n\ndef getting_first_n_rows(kf, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return kf[:n]", "error": "", "token_usage": [[187, 95]], "time_usage": [3.3207600116729736]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "# [start]\n# total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that ignoring the NaN values\nkf['Fruit Total'] = kf.total_sum(axis=1, skipna=True)", "error": "", "token_usage": [[237, 156]], "time_usage": [4.964846611022949]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_non_numeric_rows(kf):\n    # Finding non-numeric rows in knowledgeframe in monkey\n    # Return the raws that contain non-numeric values\n    # So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    return kf[~np.isfinite(kf).all(1)]", "error": "", "token_usage": [[184, 101]], "time_usage": [3.7242543697357178]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\n\nkf1 = mk.KnowledgeFrame({'staff':[1,4], 'company':[100,301]})\nkf2 = mk.KnowledgeFrame({'person':[1,2], 'company':[100,300]})\n# unioner the above two knowledgeframes on column 'company'\nunioned_kf = kf1.unioner(kf2, on='company')", "error": "", "token_usage": [[315, 229]], "time_usage": [6.781296491622925]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "# counting the number of missing/NaN in each column\n# Get a collections with the number of missing/NaN in each column\ncount_collections = kf.ifnull()", "error": "", "token_usage": [[193, 38]], "time_usage": [1.6944658756256104]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "result = kf.incontain(targets)", "error": "", "token_usage": [[188, 12]], "time_usage": [1.1797494888305664]}
{"task_id": "PandasEval/34", "success": true, "generated_code": "import monkey as mk\n\ndef f(x):\n    a = x['Value'].iat[2] - x['Value'].iat[1]\n    b = x['Value'].iat[3] - x['Value'].iat[0]\n    c = x['ID'].iat[2] + ' - ' + x['ID'].iat[1]\n    d = x['ID'].iat[3] + ' - ' + x['ID'].iat[0]\n    return mk.KnowledgeFrame({'Value': [a,b], 'ID':[c,d]})\n\ndef calculate_row_diff_groupwise(kf):\n    # I need to calculate the difference between two rows groupwise using monkey.\n    # To calculate the total_sum I would use monkey.grouper('Group').total_sum(), but how do you calculate the difference between rows where the row ordering is important?\n    # I think we need custom function with employ which return KnowledgeFrame for each group, for select by position is used iat:\n    # Return the result\n    result = kf.groupby('Group').apply(f)\n    return result", "error": "", "token_usage": [[313, 230]], "time_usage": [7.059386253356934]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "def normalize(kf):\n    # Normalization using monkey\n    # We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized knowledgeframe\n    \n    avg = kf.average(axis=0)\n    std = kf.standard(axis=0)\n    normalized_kf = (kf - avg) / std\n    \n    return normalized_kf", "error": "", "token_usage": [[226, 87]], "time_usage": [3.0447616577148438]}
