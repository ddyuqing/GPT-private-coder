{"task_id": "PandasEval/0", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\n\ndef compute_average_along_rows(kf):\n    # You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.\n    # Finally, return the knowledgeframe with the new column.\n    kf['average_along_rows'] = kf.average(axis=1)\n    return kf", "error": "", "token_usage": [[208, 128]], "time_usage": [4.484459400177002]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\n\ndef select_rows_from_column(kf, col_name, values):\n    # How do I select rows from a KnowledgeFrame kf based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    return kf[kf[col_name].isin(values)]", "error": "", "token_usage": [[192, 105]], "time_usage": [3.642390489578247]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef change_col_names_of_kf(kf, origin_names, new_names):\n    # How do I change the column labels of kf\uff1f\n    # And return the knowledgeframe that has been renamed\n    kf = kf.rename(columns=dict(zip(origin_names, new_names)))\n    return kf", "error": "", "token_usage": [[174, 94]], "time_usage": [3.309777021408081]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef delete_column(kf, column_name):\n    # deleting a column from a Monkey KnowledgeFrame\n    # return the changed knowledgeframe\n    kf.drop(column_name, axis=1, inplace=True)\n    return kf", "error": "", "token_usage": [[173, 91]], "time_usage": [3.28937029838562]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "import monkey as mk\n\ndef select_multiple_columns(kf, columns):\n    # How do I select the given columns and return the new KnowledgeFrame?\n    new_kf = kf.select(columns)\n    return new_kf", "error": "", "token_usage": [[132, 49]], "time_usage": [2.087846517562866]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_count(kf):\n    \"\"\"\n    Return the row count of kf\n    \"\"\"\n    return kf.get_row_count()", "error": "", "token_usage": [[126, 35]], "time_usage": [1.6636831760406494]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "import monkey as mk\n\ndef get_list_from_knowledgeframe(kf):\n    # I want to get a list of the column headers from a Monkey KnowledgeFrame. \n    # The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return list(kf.columns)", "error": "", "token_usage": [[175, 84]], "time_usage": [2.9880776405334473]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "import monkey as mk\n\ndef add_column_to_knowledgeframe(kf, column_name, column_data):\n    # How to add a new column to an existing KnowledgeFrame?\n    # I would like to add a new column data with the column name, to the existing knowledgeframe\n    kf[column_name] = column_data", "error": "", "token_usage": [[159, 70]], "time_usage": [2.578350782394409]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "# [start]\n# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n# [end]\nimport monkey as mk\n\ndef change_all_cols_type(kf):\n    # Change all columns type of KnowledgeFrame to numeric\n    # And return the new KnowledgeFrame\n    # The code is:\n    kf = kf.apply(mk.to_num)\n    return kf", "error": "", "token_usage": [[175, 91]], "time_usage": [3.148697853088379]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "def sip_rows_col_nan(kf, col_name):\n    # How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN\n    return kf[col_name].sipna()", "error": "", "token_usage": [[167, 43]], "time_usage": [1.9802253246307373]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "from typing import List\nimport monkey as mk\nimport numpy as np\n\ndef adding_in_knowledgeframe(kf, list_to_add, column_name_list) -> mk.KnowledgeFrame:\n    \"\"\"    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    \"\"\"\n    # Convert the list to a numpy array\n    array_to_add = np.array(list_to_add)\n\n    # Create a new column in the knowledgeframe for each column name in column_name_list\n    for column_name in column_name_list:\n        kf[column_name] = None\n\n    # Add the values from the array to the knowledgeframe\n    for i, column_name in enumerate(column_name_list):\n        kf[column_name] = array_to_add[:, i]\n\n    return kf", "error": "", "token_usage": [[194, 194]], "time_usage": [6.370264530181885]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "# [start]\n# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n# [end]\nimport monkey as mk\n\ndef extract_the_last_year(kf, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.\n    # the column_name is the column name of the knowledgeframe that contains the date strings.\n    # return the numerical Collections obj of the last year.\n    return mk.to_num(kf[column_name].str.split('-').str[0]) + mk.to_num(kf[column_name].str.split('-').str[1]) + 1", "error": "", "token_usage": [[260, 201]], "time_usage": [6.251323461532593]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\ndef get_last_n_rows(kf, n):\n    # How to get the last N rows of a monkey KnowledgeFrame?\n    return kf.last_tail(n)", "error": "", "token_usage": [[176, 85]], "time_usage": [3.1952531337738037]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "# [start]\n# getting(self, i): Return the element at specified position.\n# [end]\nimport monkey as mk\n\ndef get_values_at_nth_rows(kf, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    \"\"\"\n    return kf.getting(n)[column_name]", "error": "", "token_usage": [[170, 82]], "time_usage": [3.0417320728302]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "# [start]\n# clone(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Create a duplicate of this object.\n# [end]\nimport monkey as mk\ndef creating_kf_with_same_as_other(kf_original):\n    # creating a new knowledgeframe of all same with kf_original one, but no any rows\n    # return the new knowledgeframe\n    return kf_original.clone()", "error": "", "token_usage": [[219, 127]], "time_usage": [4.535364866256714]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_kf = kf.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "error": "", "token_usage": [[291, 34]], "time_usage": [1.828824520111084]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "# [start]\n# Collections(data=None, index=None, dtype: 'Dtype | None' = None, name=None, clone: 'bool' = False, fastpath: 'bool' = False): ndarray with axis labels in one-dimension (also time collections).\n# [end]\nimport monkey as mk\n\n# creating a Collections from a list [56, 24, 421, 90]\nmy_collections = mk.Collections([56, 24, 421, 90])", "error": "", "token_usage": [[188, 105]], "time_usage": [3.537932872772217]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# Using `clip` function in monkey.\nkf.loc[kf['col_0']=='a','col_1'] = kf.loc[kf['col_0']=='a','col_1'].clip(-2, 2)", "error": "", "token_usage": [[223, 51]], "time_usage": [2.169196844100952]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "kf = kf.apply(lambda x: x.where(x > x.mean(), np.nan))\nkf = kf.dropna(how='all')\nkf = kf.fillna(0)\nkf", "error": "", "token_usage": [[231, 41]], "time_usage": [1.8669638633728027]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\nsource_collections = mk.Collections([32, 434, 542, 'BC2'])\ntarget_collections = mk.Collections(['B1', 'B3', 'B4', 123, 43, 54])\n\n# Appending the source collections to the target collections, with ignoring the index or resetting index\nunionerd_collections = target_collections.adding(source_collections)", "error": "", "token_usage": [[206, 116]], "time_usage": [6.010788440704346]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "nan_kf = kf[kf['x2'].ifna()]", "error": "", "token_usage": [[261, 18]], "time_usage": [1.3982856273651123]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "kf = mk.KnowledgeFrame(data=a, columns=['one', 'two'])\nkf['two'] = kf['two'].astype(float)", "error": "", "token_usage": [[285, 32]], "time_usage": [1.986685037612915]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "def change_dtype(kf, cols):\n    \"\"\"\n    Change the dtype of specified columns in a KnowledgeFrame to float32.\n\n    Args:\n    kf (KnowledgeFrame): The KnowledgeFrame object.\n    cols (list): A list of column names.\n\n    Returns:\n    KnowledgeFrame: The modified KnowledgeFrame object.\n    \"\"\"\n    for col in cols:\n        kf[col] = kf[col].astype(np.float32)\n    return kf", "error": "", "token_usage": [[199, 92]], "time_usage": [3.496958017349243]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "new_kf = kf[kf['col2'] == 'Jimmy']", "error": "", "token_usage": [[189, 19]], "time_usage": [1.330186128616333]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "# [start]\n# traversal(self) -> 'Iterable[tuple[Hashable, Collections]]': Return the rows of the KnowledgeFrame organized in (index, Collections) pairs.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\nkf = kf.reseting_index()  # make sure indexes pair with number of rows\n# (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)\n# for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\n# Complete the code\nfor index, row in kf.traversal():\n    rows_dict[row['MSRA']] = row['THU']", "error": "", "token_usage": [[275, 205]], "time_usage": [6.587708473205566]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a knowledgeframe in monkey where each column has different value range.\n# Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?\n\ndef normalize_knowledgeframe(kf):\n    normalized_kf = {}\n    for column in kf.columns:\n        min_val = min(kf[column])\n        max_val = max(kf[column])\n        normalized_column = [(val - min_val) / (max_val - min_val) for val in kf[column]]\n        normalized_kf[column] = normalized_column\n    return normalized_kf\n\nnormalized_kf = normalize_knowledgeframe(kf)", "error": "", "token_usage": [[182, 170]], "time_usage": [5.245208978652954]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "# [start]\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\n\n# I want to create a knowledgeframe with one of the column as a list or array.\nkf = mk.KnowledgeFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\nkf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\n# Assigning emails to the first row of 'Email' column\nkf['Email'][0] = emails", "error": "", "token_usage": [[236, 162]], "time_usage": [5.354705095291138]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "import monkey as mk\n\ndef is_kf_exist(kf):\n    # In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.\n    # Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.\n    if kf is not None:\n        return True\n    else:\n        return False", "error": "", "token_usage": [[161, 81]], "time_usage": [3.169557809829712]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "n_kf = kf[kf['line_num'] != 0]", "error": "", "token_usage": [[187, 65]], "time_usage": [2.666454315185547]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\nkf = mk.KnowledgeFrame(web_stats)\n# I would like to sip all data in a monkey knowledgeframe\n# Using kf.index to sip all rows\n\n# [start]\ndef sip(self, labels, errors: 'str_t' = 'raise') -> 'Index':\n    \"\"\"\n    Create a new Index with no passed labels.\n    \n    Args:\n    - labels: The labels to be used for creating the new Index.\n    - errors: The error handling strategy. Default is 'raise'.\n    \n    Returns:\n    - Index: The newly created Index.\n    \"\"\"\n    pass\n# [end]", "error": "", "token_usage": [[248, 241]], "time_usage": [7.691066026687622]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n# I would like to add a new column C that is the sum value of A and B cell.\n\ndef add_column(kf):\n    kf['C'] = [a + b for a, b in zip(kf['A'], kf['B'])]\n    return kf\n\nkf = add_column(kf)", "error": "", "token_usage": [[158, 103]], "time_usage": [3.7458367347717285]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\nkf = mk.KnowledgeFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n# Move next value to first empty row monkey\n# how do i move each value from a column to the first empty \"row/cell\" in monkey?\n# use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN\nnew_kf = kf.apply(lambda x: sorted(x, key=lambda y: np.isnan(y)))\nnew_kf = new_kf.apply(lambda x: x.sipna())", "error": "", "token_usage": [[248, 182]], "time_usage": [6.1714489459991455]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n# [end]\nimport monkey as mk\n\ndef make_knowledgeframe_column_headers_lowercase(data):\n    # I want to make all column headers in my monkey data frame lower case\n    data.columns = map(str.lower, data.columns)", "error": "", "token_usage": [[165, 78]], "time_usage": [3.523648738861084]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "kf.nbiggest(1, keep='first').iloc[0]['a']", "error": "", "token_usage": [[223, 21]], "time_usage": [1.3613638877868652]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "unique_ndarray = np.unique(kf.values.flat_underlying())", "error": "", "token_usage": [[253, 17]], "time_usage": [1.3445990085601807]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "final_item_kf = kf.sort_values('date', ascending=False).groupby('id').first()", "error": "", "token_usage": [[305, 25]], "time_usage": [1.4716651439666748]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef sip2rows_zero(kf):\n    # i want to sip 2 rows in the knowledgeframe if zero comes in the column\n    # if 0 comes on odd index sip previous row as well as current row using monkey\n    # Assuming your knowledgeframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = kf[(kf['column2'] == 0) & (kf.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.adding(idx-1)\n    # A new knowledgeframe with those rows removed\n    new_kf = kf.drop(idx)\n    return new_kf", "error": "", "token_usage": [[274, 191]], "time_usage": [6.322611093521118]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "def shift_column_up_by_one(kf):\n    # Shift column in monkey knowledgeframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.\n    kf['gdp'] = kf['gdp'].shift(periods=1)\n    return kf", "error": "", "token_usage": [[191, 74]], "time_usage": [2.741594076156616]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "# [start]\n# choose_dtypes(self, include=None, exclude=None) -> 'KnowledgeFrame': Extract a collection of columns from the KnowledgeFrame based on their dtypes.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame([[1, 2.2, 'three']], columns=['A', 'B', 'C'])\n# I was wondering if there is an elegant and shorthand way in Monkey KnowledgeFrames to select columns by data type (dtype). \n# i.e. Select only float64 columns from a KnowledgeFrame\nnew_kf = kf.choose_dtypes(include=np.float64)", "error": "", "token_usage": [[223, 134]], "time_usage": [4.483154773712158]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    # Specially, we can set left_index and right_index to True\n    \n    return kf1.unioner(kf2, left_index=True, right_index=True)", "error": "", "token_usage": [[450, 370]], "time_usage": [10.926364421844482]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "new_kf = kf.drop(['A', 'C'], axis=1)", "error": "", "token_usage": [[185, 20]], "time_usage": [1.3484501838684082]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef get_value_counts(kf):\n    # I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a monkey knowledgeframe.\n    # Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index\n    # return the final knowledgeframe\n    counts = kf.count_values()\n    counts = counts.renaming_axis('distinctive_values').reset_index(name='counts')\n    return counts", "error": "", "token_usage": [[250, 182]], "time_usage": [6.020073413848877]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "data.columns = ['a', 'b', 'c']", "error": "", "token_usage": [[175, 16]], "time_usage": [3.9728105068206787]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function.\n# [end]\nimport monkey as mk\n\ndef make_kf_all_cols_lower(data):\n    # I want to make all column headers in my monkey data frame lower case\n    # Return the changed knowledgeframe\n    data.columns = map(str.lower, data.columns)\n    return data", "error": "", "token_usage": [[172, 89]], "time_usage": [3.0676560401916504]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample_by_num = kf.grouper(by=\"section\").sample_by_num(n=50)", "error": "", "token_usage": [[447, 23]], "time_usage": [1.4029371738433838]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "# [start]\n# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n# [end]\nimport monkey as mk\n\n# Example KnowledgeFrame\nkf = mk.KnowledgeFrame.from_dict({'Name'  : ['May21', 'James', 'Adi22', 'Hello', 'Girl90'],\n                             'Volume': [23, 12, 11, 34, 56],\n                             'Value' : [21321, 12311, 4435, 32454, 654654]})\n\n# Want to remove all the numbers from the Name column.\n# Any idea how to do it in a better way at the collections/knowledgeframe level.\nkf['Name'] = kf['Name'].str.replace('\\d+', '', regex=True)", "error": "", "token_usage": [[262, 178]], "time_usage": [5.912721872329712]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "# [start]\n# grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'num': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n\n# How do I find all rows in a monkey KnowledgeFrame which have the max value for 'num' column, after grouping by 'Mt' column?\nnew_kf = kf.grouper(by='Mt').max()", "error": "", "token_usage": [[404, 317]], "time_usage": [9.98916220664978]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "kf['date'] = pd.to_datetime(kf['date'], errors='coerce')", "error": "", "token_usage": [[340, 22]], "time_usage": [1.4075641632080078]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef if_any_value_is_nan(kf):\n    # How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.\n    result = kf.isnull().values.any()\n    return result", "error": "", "token_usage": [[141, 57]], "time_usage": [2.1991841793060303]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "# [start]\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# [end]\nimport monkey as mk\n\ndef sorting_columns_based_on_column_name(kf):\n    # Sorting columns in monkey knowledgeframe based on column name\n    # Note that axis is one\n    kf.sorting_index(axis=1, inplace=True)", "error": "", "token_usage": [[254, 169]], "time_usage": [5.406901597976685]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef get_value_when_condition(kf):\n    # How can I get the values of column `A` when column `B`=3?\n    values = kf[kf['B'] == 3]['A']\n    return values", "error": "", "token_usage": [[140, 61]], "time_usage": [2.4518980979919434]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\n\ndef get_average_in_column(kf, col_name):\n    # return the column average/mean\n    return kf[col_name].mean()", "error": "", "token_usage": [[165, 75]], "time_usage": [3.2506601810455322]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef combine_kf(kf1, kf2):\n    # How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.\n    return mk.concat([kf1, kf2], ignore_index=True)", "error": "", "token_usage": [[171, 88]], "time_usage": [3.1339004039764404]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "repeated_x = mk.concat([x] * 5, axis=0)", "error": "", "token_usage": [[286, 21]], "time_usage": [1.2609031200408936]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "# [start]\n# convert_dict(self, into=<class 'dict'>): Return a dict-like object of the passed Collections.\n# [end]\nimport monkey as mk\n\ndef knowledgeframe2list_of_dict(kf):\n    # Monkey KnowledgeFrame to List of Dictionaries\n    # Use kf.convert_dict() to solve it and return the result\n    return kf.convert_dict()", "error": "", "token_usage": [[173, 81]], "time_usage": [3.035715341567993]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "# [start]\n# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n# [end]\nimport monkey as mk\n\ndef convert_column_to_date(kf):\n    # Convert Column `Date` to Date Format using monkey function\n    # return the converted knowledgeframe\n    return mk.convert_datetime(kf, formating='%Y-%m-%d')", "error": "", "token_usage": [[273, 191]], "time_usage": [6.050792694091797]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "import monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    # Return the result\n    \n    count = 0\n    result = []\n    \n    for value in y:\n        if value == 1:\n            count += 1\n        else:\n            count = 0\n        result.append(count)\n    \n    return result", "error": "", "token_usage": [[216, 167]], "time_usage": [5.219488143920898]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "import monkey as mk\n\ndef insert_row_at_arbitrary_in_knowledgeframe(kf, row_to_insert):\n    \"\"\"\n    Inserts a row into a knowledgeframe at a specified row with no ignore index, and sort & reset the index with sip=True. \n    Returns the new knowledgeframe.\n    \"\"\"\n    kf = kf.append(row_to_insert)\n    kf = kf.sort_index().reset_index(drop=True)\n    return kf", "error": "", "token_usage": [[164, 90]], "time_usage": [3.3160793781280518]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to knowledgeframe?\n    # Return the knowledgeframe\n    return mk.KnowledgeFrame(data=list_of_lists[1:], columns=list_of_lists[0])", "error": "", "token_usage": [[252, 174]], "time_usage": [5.695478439331055]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\n\nkf1 = mk.KnowledgeFrame({'a': [0, 1], 'b': [5, 3]})\nkf2 = mk.KnowledgeFrame({'c': [0, 1], 'd': [10, 20]})\n# How do I unioner two knowledgeframes by index?\n# Set left&right indexs to True\nunionerd_kf = kf1.unioner(kf2, left_index=True, right_index=True)", "error": "", "token_usage": [[331, 250]], "time_usage": [8.088462352752686]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "kf_string = kf.to_string(index=False)\nprint(kf_string)", "error": "", "token_usage": [[164, 18]], "time_usage": [1.2265260219573975]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef sip_all_nan_rows(kf):\n    # We will sip all Nan rows.\n    # Return the changed knowledgeframe.\n    return kf.sipna()", "error": "", "token_usage": [[161, 70]], "time_usage": [2.741882562637329]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\n\ndef is_contain_particular_value(collections, value):\n    # How to determine whether a Monkey Column contains a particular value?\n    # Return the result\n    return mk.incontain(collections, value)", "error": "", "token_usage": [[175, 87]], "time_usage": [3.3033971786499023]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    kf.renaming(old_name, new_name, inplace=True)\n    return kf", "error": "", "token_usage": [[166, 78]], "time_usage": [3.068675994873047]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "# [start]\n# remove_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Remove the duplicate values of the Index.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_column(kf, col1, col2):\n    # I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    kf = kf.sort_values(col2, ascending=False).drop_duplicates(subset=col1, keep='first')\n    return kf", "error": "", "token_usage": [[214, 136]], "time_usage": [4.473307371139526]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef create_empty_kf(col_names):\n    # Monkey create empty KnowledgeFrame with only column names\n    # Return: KnowledgeFrame\n    return mk.KnowledgeFrame(columns=col_names)", "error": "", "token_usage": [[204, 117]], "time_usage": [4.096860885620117]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf.iloc[n:]", "error": "", "token_usage": [[227, 135]], "time_usage": [4.546032667160034]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "# [start]\n# duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_col_names(kf):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    \"\"\"\n    # Get the column names\n    col_names = kf.columns\n    \n    # Find the duplicate column names\n    duplicate_col_names = [col for col in col_names if col_names.count(col) > 1]\n    \n    # Remove the duplicate columns\n    kf = kf.drop(columns=duplicate_col_names)\n    \n    return kf", "error": "", "token_usage": [[186, 156]], "time_usage": [5.259521007537842]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "import monkey as mk\n\ndef convert_bool_to_int(kf, col_name):\n    \"\"\"\n    How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n    Return the knowledgeframe with the column converted to int\n    \"\"\"\n    kf[col_name] = kf[col_name].astype(int)\n    return kf", "error": "", "token_usage": [[151, 72]], "time_usage": [2.847017765045166]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "# [start]\n# length(self): Return the length of each Collections/Index element.\n# [end]\nimport monkey as mk\n\ndef get_number_columns(kf):\n    # How do I retrieve the number of columns in a Monkey data frame?\n    # Return the number of columns in the knowledgeframe\n    return kf.length()", "error": "", "token_usage": [[163, 70]], "time_usage": [2.558535575866699]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_columns_name_lists(kf):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    nan_columns = kf.columns[kf.isnull().any()].tolist()\n    return nan_columns", "error": "", "token_usage": [[161, 83]], "time_usage": [3.154100179672241]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\nN = 2\nkf = mk.KnowledgeFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n# How to get the last N rows of a monkey KnowledgeFrame?\nresult = kf.last_tail(N)", "error": "", "token_usage": [[213, 121]], "time_usage": [4.32534384727478]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "# [start]\n# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef replacing_blank_with_nan(kf):\n    # replace field that's entirely space (or empty) with NaN using regex\n    # return the result\n    return kf.replace(r'^\\s*$', np.nan, regex=True)", "error": "", "token_usage": [[180, 98]], "time_usage": [3.558201789855957]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "# [start]\n# fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef fill_none_with_zero(kf, col_names):\n    # Monkey knowledgeframe fillnone() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed knowledgeframe\n    kf.fillnone(0, downcast=np.nan)\n    return kf", "error": "", "token_usage": [[187, 105]], "time_usage": [3.7625277042388916]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "import monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    return mk.concat([kf1, kf2])", "error": "", "token_usage": [[147, 51]], "time_usage": [2.33076810836792]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "import monkey as mk\n\ndef extract_first_and_last_kf(kf):\n    # Extract first and last row of a knowledgeframe in monkey\n    # Return the knowledgeframe with the first and last row\n    first_row = kf.iloc[0]\n    last_row = kf.iloc[-1]\n    return kf.iloc[[0, -1]]", "error": "", "token_usage": [[144, 74]], "time_usage": [2.9650485515594482]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef display_rows_with_gt_1_nan(kf):\n    # Return the knowledgeframe with the rows with one or more NaN values\n    return kf[kf.isnull().sum(axis=1) > 0]", "error": "", "token_usage": [[139, 58]], "time_usage": [2.3714802265167236]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_index_values_as_list(kf):\n    # Return the row-index values of the knowledgeframe as a list\n    return kf.index.tolist()", "error": "", "token_usage": [[132, 40]], "time_usage": [1.9497246742248535]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# [start]\n# getting(self, i): Return the element at specified position.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'mycol':np.arange(5), 'dummy':np.arange(5)})\n# I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.\n# Is there any way to do this more nicely? \n# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?\n# Output the second row of data in `mycol` column if it exists, otherwise output NaN\nvalue = kf.getting(1) if 'mycol' in kf.columns else np.nan", "error": "", "token_usage": [[258, 178]], "time_usage": [5.872558355331421]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = collections.count(value)\n    return count", "error": "", "token_usage": [[196, 109]], "time_usage": [3.7674784660339355]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "import monkey as mk\n\ndef find_col_a_gt_col_b_rows(kf, col_a, col_b):\n    # Find rows in kf where col_a > col_b\n    # Return the rows\n    rows = []\n    for row in kf:\n        if row[col_a] > row[col_b]:\n            rows.append(row)\n    return rows", "error": "", "token_usage": [[143, 75]], "time_usage": [2.942426919937134]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "# [start]\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# [end]\nimport monkey as mk\n\ndef sip_consecutive_duplicates(collections):\n    # Drop consecutive duplicates\n    collections = collections.drop_duplicates()\n    # Return the result\n    return collections", "error": "", "token_usage": [[158, 71]], "time_usage": [2.7376108169555664]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "# [start]\n# value_round(freq, ambiguous='raise', nonexistent='raise'): Return the rounded Timestamp to the chosen resolution.\n# [end]\nimport monkey as mk\n\ndef value_round_a_single_column(kf):\n    # Round a single column `A`\n    # Return the knowledgeframe\n    return mk.value_round(kf, ambiguous='raise', nonexistent='raise')", "error": "", "token_usage": [[162, 80]], "time_usage": [3.194705009460449]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "import monkey as mk\n\ndef add_zeros_to_string(kf, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Monkey Dataframe\n    # The maximum length of the string is 15\n    # Return the knowledgeframe\n    kf[col_name] = kf[col_name].apply(lambda x: str(x).zfill(15))\n    return kf", "error": "", "token_usage": [[155, 83]], "time_usage": [3.26904034614563]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef adding_dict_to_kf(kf, dictionary):\n    # adding dictionary to data frame\n    # return the data frame\n    kf.update(dictionary)\n    return kf", "error": "", "token_usage": [[166, 77]], "time_usage": [2.9717578887939453]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "# [start]\n# convert_pydatetime(*args, **kwargs): Return the native datetime object in Python.\n# [end]\nimport monkey as mk\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    # return pydatetime object\n    return mk.convert_pydatetime(timestamp)", "error": "", "token_usage": [[157, 67]], "time_usage": [2.6643714904785156]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef getting_percentage_of_each_gender(collections):\n    # Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    \n    total = sum(collections.values())\n    percentages = {key: (value / total) * 100 for key, value in collections.items()}\n    \n    return percentages", "error": "", "token_usage": [[204, 142]], "time_usage": [4.7108073234558105]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "import monkey as mk\n\ndef divide_multiple_cols_by_first_col(kf):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.\n    # Return the result.\n    kf[['B', 'C']] = kf[['B', 'C']].div(kf['A'], axis=0)\n    return kf", "error": "", "token_usage": [[154, 84]], "time_usage": [3.1889662742614746]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "# [start]\n# ceiling(self, *args, **kwargs): Apply a ceiling operation on the data at the specified frequency.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef ceiling_of_collections(s):\n    # ceiling of a monkey collections\n    # Return the result.\n    return mk.ceiling(s)", "error": "", "token_usage": [[162, 71]], "time_usage": [2.5774292945861816]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef delete_all_nan_columns(kf):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    kf = kf.dropna(axis=1, how='all')\n    return kf", "error": "", "token_usage": [[161, 81]], "time_usage": [3.0522403717041016]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "# [start]\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'name': ['jon','sam','jane','bob'],\n           'age': [30,25,18,26],\n           'sex':['male','male','female','male']})\n\nrow = ['45', 'Dean', 'male']\n# add the row at top in kf\nkf.loc[-1] = row\nkf.index = kf.index + 1\n# resort the index by inplace\nkf.sort_index(inplace=True)", "error": "", "token_usage": [[312, 220]], "time_usage": [6.971548318862915]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "import monkey as mk\n\ndef set_value_to_entire_col(kf, value):\n    # Set value to an entire column `B` of a monkey knowledgeframe\n    # Return the changed knowledgeframe.\n    kf['B'] = value\n    return kf", "error": "", "token_usage": [[144, 58]], "time_usage": [2.4390416145324707]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "# [start]\n# interst(self, other, sort=False): Create the intersection of two Index objects.\n# [end]\nimport monkey as mk\n\ns1 = mk.Collections([3,4,5])\ns2 = mk.Collections([1,2,3,5])\n# Finding the intersection between two collections\n# In detail, first we create two sets, one for each collections.\n# Then we find the intersection of the two sets.\ns1, s2 = set(s1), set(s2)\ninterst_result = s1.intersection(s2)", "error": "", "token_usage": [[211, 119]], "time_usage": [4.201043128967285]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "# [start]\n# header_num(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Get the top `n` rows of the frame or collections.\n# [end]\nimport monkey as mk\n\ndef getting_first_n_rows(kf, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return kf.header_num(n)", "error": "", "token_usage": [[187, 96]], "time_usage": [3.1602559089660645]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "# [start]\n# total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that igonring the NaN values\n\nkf['Fruit Total'] = kf.total_sum(axis=1, skipna=True)", "error": "", "token_usage": [[237, 157]], "time_usage": [5.0877392292022705]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_non_numeric_rows(kf):\n    # Finding non-numeric rows in knowledgeframe in monkey\n    # Return the raws that contain non-numeric values\n    # So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    return kf[~np.isfinite(kf).all(1)]", "error": "", "token_usage": [[184, 101]], "time_usage": [3.7044966220855713]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\n\nkf1 = mk.KnowledgeFrame({'staff':[1,4], 'company':[100,301]})\nkf2 = mk.KnowledgeFrame({'person':[1,2], 'company':[100,300]})\n# unioner the above two knowledgeframes on column 'company'\nunionerd_kf = kf1.unioner(kf2, on='company')", "error": "", "token_usage": [[315, 229]], "time_usage": [11.117141246795654]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "# counting the number of missing/NaN in each column\n# Get a collections with the number of missing/NaN in each column\ncount_collections = kf.ifnull()", "error": "", "token_usage": [[193, 38]], "time_usage": [1.8843867778778076]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\nkf = mk.KnowledgeFrame({'col': [\"apple\",\n                           \"pear\",\n                           \"strawberry\"]})\ntargets = ['apple', 'banana']\n# Any word from `targets` are present in sentence.\nresult = kf.incontain(targets)", "error": "", "token_usage": [[188, 95]], "time_usage": [3.4591457843780518]}
{"task_id": "PandasEval/34", "success": false, "generated_code": "", "error": "Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-3.5-turbo-0613 in organization org-rHGNEvscJqBCdvpAwOxLOBQD on requests per day (RPD): Limit 10000, Used 10000, Requested 1. Please try again in 8.64s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'requests', 'param': None, 'code': 'rate_limit_exceeded'}}", "token_usage": null, "time_usage": [3.7286086082458496]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# standard(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return the standard deviation across the requested axis.\n# [end]\nimport monkey as mk\n\ndef normalize(kf):\n    # Normalization using monkey\n    # We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized knowledgeframe\n    kf_normalized = (kf - kf.average(axis=0)) / kf.standard(axis=0)\n    return kf_normalized", "error": "", "token_usage": [[226, 153]], "time_usage": [8.351580381393433]}
