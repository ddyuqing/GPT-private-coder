{"task_id": "NumpyEval/1", "success": true, "generated_code": "c = a * b[:, None]", "error": "", "token_usage": [[334, 12]], "time_usage": [1.0203301906585693]}
{"task_id": "NumpyEval/2", "success": true, "generated_code": "# [start]\n# reshape(a, newshape, order='C'): Gives a new shape to an array without changing its data.\n# product(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# rpartition(a, sep): Partition (split) each element around the right-most separator.\n# [end]\nimport numpy as np\n\na = np.arange(8)[:,None].repeat(8,axis=1)\n# How can I use reshape to divide it into 4 chucks, such that it looks like this:\n# I would like to reshape a to (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to c\nb = np.reshape(a, (2, 4, 2, 4)).transpose(0, 2, 1, 3)", "error": "", "token_usage": [[266, 197]], "time_usage": [5.618860483169556]}
{"task_id": "NumpyEval/3", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`.\n# slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`.\n# [end]\nimport numpy as np\n\ndef get_i_th_index_in_last_dim(arr, i):\n    \"\"\"\n    I would like to slice a numpy array to obtain the i-th index in the last dimension.\n    Is there a way I can obtain this slice for any array without explicitly having to write the array dimensions?\n    There is ... or Ellipsis, which does exactly this\n    Returns: numpy array\n    \"\"\"\n    return arr[..., i]", "error": "", "token_usage": [[259, 167]], "time_usage": [4.483901739120483]}
{"task_id": "NumpyEval/0", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create a record array from a (flat) list of arrays.\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\n# create a numpy array composed of a list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]\narray = np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])", "error": "", "token_usage": [[264, 196]], "time_usage": [5.90281867980957]}
{"task_id": "NumpyEval/4", "success": true, "generated_code": "c = np.column_stack((a, b))", "error": "", "token_usage": [[236, 14]], "time_usage": [1.0190417766571045]}
{"task_id": "NumpyEval/5", "success": true, "generated_code": "c = np.concatenate((a, b))", "error": "", "token_usage": [[227, 13]], "time_usage": [0.9490244388580322]}
{"task_id": "NumpyEval/6", "success": true, "generated_code": "# [start]\n# slice(self, *args, **kwargs): Convenience fluent method for :py:func:`slice`.\n# slice_like(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_like`.\n# slice_axis(self, *args, **kwargs): Convenience fluent method for :py:func:`slice_axis`.\n# [end]\nimport numpy as np\n\nm = np.arange(2*3*5).reshape((2,3,5))\naxis, start, end = 2, 1, 3\ntarget = m[:, :, 1:3]\nslc = [slice(None)] * len(m.shape)\n# I would like to dynamically slice a numpy array along a specific axis.\n# I think one way would be to use slice(start, end):\n\n# Complete the code\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]", "error": "", "token_usage": [[267, 192]], "time_usage": [5.808624505996704]}
{"task_id": "NumpyEval/7", "success": true, "generated_code": "count_value = np.count_nonzero((a > 2) & (a < 8))", "error": "", "token_usage": [[263, 24]], "time_usage": [1.2288196086883545]}
{"task_id": "NumpyEval/8", "success": true, "generated_code": "# [start]\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array.\n# [end]\nimport numpy as np\n\n# I have a NumPy array that looks like this:\narr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])\n# How can I get multiple values from this array by index?\n# How can I get the values at the index positions 1 and 4?\nresult_arr = np.choose([1, 4], arr)", "error": "", "token_usage": [[271, 183]], "time_usage": [5.2216901779174805]}
{"task_id": "NumpyEval/9", "success": true, "generated_code": "# [start]\n# isfinite(x, out=None, **kwargs): Test element-wise for finiteness (not infinity or not Not a Number).\n# apply_over_axes(func, a, axes): Apply a function repeatedly over multiple axes.\n# all(self, axis=None, out=None): Test whether all matrix elements along a given axis evaluate to True.\n# [end]\nimport numpy as np\n\na = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])\ntol = 1e-16\n# what is the fastest and easiest way to set the super low value named tol to zero?\n# Handling of real and imaginary numbers separately\na.real[np.abs(a.real) < tol] = 0\na.imag[np.abs(a.imag) < tol] = 0", "error": "", "token_usage": [[286, 202]], "time_usage": [6.351845979690552]}
{"task_id": "NumpyEval/10", "success": true, "generated_code": "# [start]\n# diagonal(a, offset=0, axis1=0, axis2=1): If a is 2-D, returns the diagonal of a with the given offset, i.\n# diag(v, k=0): Extract a diagonal or construct a diagonal array.\n# fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef set_diagonal_to_zero(df):\n    np.fill_diagonal(df.values, 0)\n    return df\n\ndf = set_diagonal_to_zero(df)", "error": "", "token_usage": [[246, 180]], "time_usage": [5.7866880893707275]}
{"task_id": "NumpyEval/11", "success": true, "generated_code": "result = np.all(a == a[0, :], axis=0)", "error": "", "token_usage": [[305, 19]], "time_usage": [1.0481159687042236]}
{"task_id": "NumpyEval/12", "success": true, "generated_code": "# [start]\n# recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C'): Construct an ndarray that allows field access using attributes.\n# array(object, dtype=None, ctx=None): Create an array.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# [end]\nimport numpy as np\n\narr = np.array([1, 2, 3, 4, 5, 6])\n\n# Convert a numpy.ndarray to string\n# and convert it back to numpy.ndarray with dtype=int\nts = arr.tostring()\nnew_arr = np.fromstring(ts, dtype=int)", "error": "", "token_usage": [[261, 171]], "time_usage": [5.314581394195557]}
{"task_id": "NumpyEval/13", "success": true, "generated_code": "a_shape = np.shape(a)", "error": "", "token_usage": [[199, 11]], "time_usage": [0.92246413230896]}
{"task_id": "NumpyEval/14", "success": true, "generated_code": "array = np.array(list(result.items()), dtype=dtype)", "error": "", "token_usage": [[333, 16]], "time_usage": [1.7899861335754395]}
{"task_id": "NumpyEval/15", "success": true, "generated_code": "sum_value = df.sum().sum()", "error": "", "token_usage": [[262, 12]], "time_usage": [0.9487175941467285]}
{"task_id": "NumpyEval/17", "success": true, "generated_code": "# [start]\n# all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True.\n# any(a, axis=None, keepdims=False, out=None): Test whether any array element along a given axis evaluates to True.\n# in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([1,4,5])\n\n# Is there a way to compare what elements in a exist in b?\n# Return a array of booleans, True if elements in a exist in b, False otherwise\nc = np.in1d(a, b)", "error": "", "token_usage": [[266, 176]], "time_usage": [4.959946632385254]}
{"task_id": "NumpyEval/18", "success": true, "generated_code": "mean_array = np.mean([a, b, c], axis=0)", "error": "", "token_usage": [[256, 20]], "time_usage": [0.9948229789733887]}
{"task_id": "NumpyEval/19", "success": true, "generated_code": "result = np.where(a[:-1] != a[1:])[0] + 1", "error": "", "token_usage": [[316, 24]], "time_usage": [1.4139070510864258]}
{"task_id": "NumpyEval/20", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# c_array_buf(ctype, buf): Create ctypes array from a Python buffer.\n# c_array(ctype, values): Create ctypes array from a Python array.\n# [end]\nimport numpy as np\nfrom numpy import newaxis\n\na = np.array([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n# I have a 2d array with shape (x, y) which I want to convert to a 3d array with shape (x, y, 1).\n# Is there a nice Pythonic way to do this?\nb = a[..., newaxis]", "error": "", "token_usage": [[249, 156]], "time_usage": [4.2284462451934814]}
{"task_id": "NumpyEval/21", "success": true, "generated_code": "arr_sd = np.std(arr, axis=0)", "error": "", "token_usage": [[283, 15]], "time_usage": [1.000495195388794]}
{"task_id": "NumpyEval/16", "success": true, "generated_code": "a_string = np.array2string(a, separator=' ')[1:-1]", "error": "", "token_usage": [[283, 20]], "time_usage": [1.0889923572540283]}
{"task_id": "NumpyEval/22", "success": true, "generated_code": "out = a * b[:, newaxis]", "error": "", "token_usage": [[267, 13]], "time_usage": [0.9677000045776367]}
{"task_id": "NumpyEval/23", "success": true, "generated_code": "# [start]\n# norm(x, ord=None, axis=None, keepdims=False): Matrix or vector norm.\n# tensordot(a, b, axes=2): Compute tensor dot product along specified axes.\n# transpose(a, axes=None): Permute the dimensions of an array.\n# [end]\nimport numpy as np\n\nx = np.array([[1], [2], [3]])\n# Numpy Vector (N,1) dimension -> (N,) dimension conversion\nout = np.squeeze(x)", "error": "", "token_usage": [[201, 107]], "time_usage": [3.121586322784424]}
{"task_id": "NumpyEval/24", "success": true, "generated_code": "import numpy as np\n\nmyarray = np.array([(\"Hello\",2.5,3),(\"World\",3.6,2)])\n# Converting a 2D numpy array to a structured array\n# You can 'create a record array from a (flat) list of arrays' using numpy.core.records.fromarrays as follows:\n# Note that we need conduct the transpose on the array, and the names reset to 'col1, co2, col3'\nnewrecarray = np.core.records.fromarrays(myarray.T, names='col1, col2, col3')", "error": "", "token_usage": [[330, 124]], "time_usage": [3.3039586544036865]}
{"task_id": "NumpyEval/25", "success": true, "generated_code": "myarray = np.array(list_of_arrays)", "error": "", "token_usage": [[328, 13]], "time_usage": [0.9315581321716309]}
{"task_id": "NumpyEval/26", "success": true, "generated_code": "# [start]\n# cumsum(self, axis=None, dtype=None, out=None): Return the cumulative sum of the elements along the given axis.\n# cumprod(a, axis=None, dtype=None, out=None): Return the cumulative product of elements along a given axis.\n# cumproduct(*args, **kwargs): Return the cumulative product over the given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\n# How to get the cumulative distribution function with NumPy?\n# set bins to 10\n# and then generate a cumulative sum of the histogram contents to variable hist self\nhist, bin_edges = np.histogram(arr, bins=10)\nhist = np.cumsum(hist)", "error": "", "token_usage": [[249, 166]], "time_usage": [4.551780700683594]}
{"task_id": "NumpyEval/27", "success": true, "generated_code": "a_str = np.array2string(a, threshold=np.inf)", "error": "", "token_usage": [[294, 17]], "time_usage": [1.1319208145141602]}
{"task_id": "NumpyEval/28", "success": true, "generated_code": "# [start]\n# setxor1d(ar1, ar2, assume_unique=False): Set exclusive-or of 1-D arrays with unique elements.\n# setdiff1d(ar1, ar2, assume_unique=False): Set difference of 1D arrays with unique elements.\n# isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False): Returns a boolean array where two arrays are element-wise equal within a tolerance.\n# [end]\nimport numpy as np\n\na = np.array([1,2,3,4,5,6])\nb = np.array([2,3,5])\n\n# Perform a symmetric difference between two numpy arrays.\n# Don't convert the numpy array to a set to perform exclusive-or. Use setxor1d directly.\ndiff_arr = np.setxor1d(a, b)", "error": "", "token_usage": [[272, 183]], "time_usage": [5.303889751434326]}
{"task_id": "NumpyEval/29", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# [end]\nimport numpy as np\n\narr = np.array([[ 1.41421356, 0.70710678, 0.70710678], [0., 1.22474487,1.22474487], [0., 0., 0.]])\n# remove zero rows 2-D numpy array\n# Use np.all with an axis argument:\nnew_arr = arr[np.all(arr != 0, axis=1)]", "error": "", "token_usage": [[268, 182]], "time_usage": [5.275298357009888]}
{"task_id": "NumpyEval/30", "success": true, "generated_code": "# [start]\n# add(x1, x2): Return element-wise string concatenation for two arrays of str or unicode.\n# multiply(a, i): Return (a * i), that is string multiple concatenation, element-wise.\n# conjugate(a, *args, **kwargs): conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Return the complex conjugate, element-wise.\n# [end]\nimport numpy as np\n\na1=np.array(['a','b'])\na2=np.array(['E','F'])\n# I am trying to do element-wise string concatenation.\n# I thought Add() was the way to do it in numpy but obviously it is not working as expected.\nresult = np.core.defchararray.add(a1, a2)", "error": "", "token_usage": [[267, 181]], "time_usage": [5.212373733520508]}
{"task_id": "NumpyEval/31", "success": true, "generated_code": "mm = np.nanmean(mdat, axis=1)", "error": "", "token_usage": [[291, 16]], "time_usage": [0.9501144886016846]}
{"task_id": "NumpyEval/32", "success": true, "generated_code": "ind = np.lexsort((a[:, 1], a[:, 0]))", "error": "", "token_usage": [[277, 21]], "time_usage": [1.215043306350708]}
{"task_id": "NumpyEval/33", "success": true, "generated_code": "a_list = np.array(a).flatten().tolist()", "error": "", "token_usage": [[262, 15]], "time_usage": [1.0770912170410156]}
{"task_id": "NumpyEval/34", "success": true, "generated_code": "# [start]\n# copy(a, order='K', subok=False): Return an array copy of the given object.\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# [end]\nimport numpy as np\n\na = np.arange(9)\na = a.reshape((3, 3))\nb = np.zeros((5, 5))\n# Copy numpy array 'a' into part of another array 'b' in [1:4, 1:4]\nb[1:4, 1:4] = np.copy(a)", "error": "", "token_usage": [[264, 182]], "time_usage": [5.548743009567261]}
{"task_id": "NumpyEval/35", "success": true, "generated_code": "c = np.fromfunction(lambda i, j: a[i] + b[j]*2, (len(a), len(b)))", "error": "", "token_usage": [[282, 30]], "time_usage": [1.4048006534576416]}
{"task_id": "NumpyEval/36", "success": true, "generated_code": "# [start]\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# hstack(tup): Stack arrays in sequence horizontally (column wise).\n# [end]\nimport numpy as np\n\na = np.array([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\nx = np.ones(5)\n# Assigning array x to the 2th column of array a.\na[:, 2] = x", "error": "", "token_usage": [[275, 185]], "time_usage": [5.164161205291748]}
{"task_id": "NumpyEval/37", "success": true, "generated_code": "# [start]\n# masked_less(x, value, copy=True): Mask an array where less than a given value.\n# masked_less_equal(x, value, copy=True): Mask an array where less than or equal to a given value.\n# masked_object(x, value, copy=True, shrink=True): Mask the array `x` where the data are exactly equal to value.\n# [end]\nimport numpy as np\n\ny = np.array([2,1,5,2])          # y axis\n# filter out values larger than 2\nm = np.ma.masked_where(y>2, y)   \n# remove masked values from m\nout = np.ma.compressed(m)  # complete the code here\n\nout", "error": "", "token_usage": [[237, 154]], "time_usage": [4.198476076126099]}
{"task_id": "NumpyEval/38", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None): Create an array from binary file data.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# [end]\nimport numpy as np\n\na = np.zeros(4, dtype=\"float64\")\n# Convert numpy array type and values from Float64 to Float32\nb = a.astype(\"float32\")", "error": "", "token_usage": [[264, 172]], "time_usage": [5.864633321762085]}
{"task_id": "NumpyEval/39", "success": true, "generated_code": "# [start]\n# vsplit(ary, indices_or_sections): vsplit(ary, indices_or_sections) Split an array into multiple sub-arrays vertically (row-wise).\n# split(ary, indices_or_sections, axis=0): Split an array into multiple sub-arrays.\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\nSamples = {5.207403005022627: 0.69973543384229719, 6.8970222167794759: 0.080782939731898179, 7.8338517407140973: 0.10308033284258854, 8.5301143255505334: 0.018640838362318335, 10.418899728838058: 0.14427355015329846, 5.3983946820220501: 0.51319796560976771}\n# I want to separate the keys and values into 2 numpy arrays. \nkeys = np.fromiter(Samples.keys(), dtype=float)\nvals = np.fromiter(Samples.values(), dtype=float)", "error": "", "token_usage": [[339, 251]], "time_usage": [6.764163970947266]}
{"task_id": "NumpyEval/40", "success": true, "generated_code": "concated_arr = np.concatenate(L, axis=0)", "error": "", "token_usage": [[306, 16]], "time_usage": [1.0606906414031982]}
{"task_id": "NumpyEval/41", "success": true, "generated_code": "# [start]\n# argmin(a, axis=None, out=None): Returns the indices of the minimum values along an axis.\n# argmax(self, axis=None, out=None): Return indices of the maximum values along the given axis.\n# min(self, axis=None, out=None): Return the minimum value along an axis.\n# [end]\nimport numpy as np\nx = np.array([[0, 1], [3, 2]])\n# Return the indices of the minimum values along (axis is zero).\nout = np.argmin(x, axis=0)", "error": "", "token_usage": [[209, 120]], "time_usage": [4.12581992149353]}
{"task_id": "NumpyEval/42", "success": true, "generated_code": "# [start]\n# clip(self, min=None, max=None, out=None): Return an array whose values are limited to [min, max].\n# disp(mesg, device=None, linefeed=True): Display a message on a device.\n# frombuffer(*args, **params): frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) Interpret a buffer as a 1-dimensional array.\n# [end]\nimport numpy as np\n\ndef broadcasting_app(a, L, S):  # Window len = L, Stride len/stepsize = S\n    \"\"\"\n    I want to create a matrix of sub sequences from this array of length L with stride S.\n    Return the numpy array of sub sequences.\n    \"\"\"\n    nrows = ((a.size-L)//S)+1\n    \n    ncols = L\n    \n    # Calculate the number of sub sequences\n    num_subseq = nrows\n    \n    # Create an empty matrix to store the sub sequences\n    subseq_matrix = np.empty((num_subseq, ncols))\n    \n    # Iterate over the array to extract sub sequences\n    for i in range(num_subseq):\n        start = i * S\n        end = start + L\n        subseq_matrix[i] = a[start:end]\n    \n    return subseq_matrix", "error": "", "token_usage": [[269, 271]], "time_usage": [7.21394419670105]}
{"task_id": "NumpyEval/43", "success": true, "generated_code": "out = a[b[1], b[1]]", "error": "", "token_usage": [[307, 15]], "time_usage": [1.004882574081421]}
{"task_id": "NumpyEval/44", "success": true, "generated_code": "# [start]\n# unique(ar1, return_index=False, return_inverse=False): Finds the unique elements of an array.\n# isposinf(x, out=None, **kwargs): Test element-wise for positive infinity, return result as bool array.\n# absolute(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]", "error": "", "token_usage": [[241, 155]], "time_usage": [4.301005125045776]}
{"task_id": "NumpyEval/45", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# column_stack(x, *args, **params): column_stack(*args, **kwargs) Stack 1-D arrays as columns into a 2-D array.\n# [end]\nimport numpy as np\n\ndef append_arr_to_new_empty_arr(arr1, arr2):\n    new_arr = np.array([])\n    new_arr = np.row_stack((arr1, arr2))\n    return new_arr", "error": "", "token_usage": [[300, 153]], "time_usage": [4.172835350036621]}
{"task_id": "NumpyEval/46", "success": true, "generated_code": "# [start]\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# diag(array, k=0): Extracts a diagonal or constructs a diagonal array.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# [end]\nimport numpy as np\n\ndef matrix_to_array(matrix):\n    # I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.\n    # For example, if i have M = matrix([[1], [2], [3], [4]]), I want to get A = array([1,2,3,4]).\n    # Return the array\n    return np.array(matrix).flatten()", "error": "", "token_usage": [[263, 173]], "time_usage": [6.684431552886963]}
{"task_id": "NumpyEval/47", "success": true, "generated_code": "# [start]\n# repeat(a, repeats, axis=None): Repeat elements of an array.\n# all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether all array elements along a given axis evaluate to True.\n# any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>): Test whether any array element along a given axis evaluates to True.\n# [end]\nimport numpy as np\n\nn = 2\na = np.asarray([1,2,3,4,5])\ncond = (a % 2) == 0  #condition is True on even numbers\n# I have an array a and I would like to repeat the elements of a n times if they are even or if they are positive. \n# I mean I want to repeat only the elements that respect some condition, other elements are not displayed.\n# In detail, if a meets the condition cond, I want to repeat it n times. \n\n# Complete the code below\nm = np.repeat(a[cond], n)", "error": "", "token_usage": [[312, 228]], "time_usage": [5.8512282371521]}
{"task_id": "NumpyEval/48", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None): vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None) Generalized function class.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# [end]\nimport numpy as np\n\ndef get_multiply_diff(t):\n    # Is there a function that returns an array with the results of dividing the next element by the previous one? Like a \"diff()\", but with dividing\n    # Not-numpy-example:\n    # source = [1,3,6,24,36]\n    # target = [j / i for i, j in zip(source[:-1], source[1:])]\n    # Return: target implemented in numpy.\n    target = np.divide(t[1:], t[:-1])\n    return target", "error": "", "token_usage": [[362, 281]], "time_usage": [7.281694650650024]}
{"task_id": "NumpyEval/49", "success": true, "generated_code": "# [start]\n# unravel_index(indices, shape, order='C'): Converts a flat index or array of flat indices into a tuple of coordinate arrays.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# [end]\nimport numpy as np\n\nA = np.array([[1, 2], [3, 0]])\n\n# How can I know the (row, column) index of the minimum of a numpy array/matrix?\n# Use unravel_index()\nout = np.unravel_index(np.argmin(A), A.shape)", "error": "", "token_usage": [[240, 155]], "time_usage": [4.348231315612793]}
{"task_id": "NumpyEval/50", "success": true, "generated_code": "# [start]\n# array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True): Construct a record array from a wide-variety of objects.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef crop(arr, top, bottom, left, right):\n    # How do I extract a sub-array from a numpy 2d array? \n    # I'd like to extract a numpy array with a specified size from a numpy 2d array--essentially I want to crop the array.\n    # Return a sub-array from a numpy 2d array.\n    return arr[top:bottom, left:right]", "error": "", "token_usage": [[294, 206]], "time_usage": [5.368061065673828]}
{"task_id": "NumpyEval/51", "success": true, "generated_code": "out = np.vectorize(my_dict.get)(a)", "error": "", "token_usage": [[287, 15]], "time_usage": [1.118107795715332]}
{"task_id": "NumpyEval/52", "success": true, "generated_code": "# [start]\n# masked_array(data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None): An array class with possibly masked values.\n# where(condition, x=<no value>, y=<no value>): Return a masked array with elements from `x` or `y`, depending on condition.\n# mask_indices(n, mask_func, k=0): Return the indices to access (n, n) arrays, given a masking function.\n# [end]\nimport numpy as np\n\nx = np.array([range(100, 1, -1)])\n\n# This will tell me those values\n# generate a mask to find all values that are even numbers\n# Is there an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a condition is true as opposed to the Boolean mask array?\nout = np.where(x % 2 == 0)", "error": "", "token_usage": [[293, 210]], "time_usage": [5.477248668670654]}
{"task_id": "NumpyEval/53", "success": true, "generated_code": "# [start]\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# dstack(x, *args, **params): dstack(*args, **kwargs) Stack arrays in sequence depth wise (along third axis).\n# hstack(x, *args, **params): hstack(*args, **kwargs) Stack arrays in sequence horizontally (column wise).\n# [end]\nimport numpy as np\n\ndef consecutive(data, stepsize=1):\n    # How to find the groups of consecutive elements in a NumPy array\n    # I have to cluster the consecutive elements from a NumPy array. Considering the following example\n    # a = [ 0, 47, 48, 49, 50, 97, 98, 99]\n    # The output should be a list of tuples as follows\n    # [(0), (47, 48, 49, 50), (97, 98, 99)]\n    # Here the difference is just one between the elements. It will be great if the difference can also be specified as a limit or a hardcoded number.\n    # Finally, return the number of consecutive elements in the array.\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]", "error": "", "token_usage": [[359, 293]], "time_usage": [7.65826153755188]}
{"task_id": "NumpyEval/54", "success": true, "generated_code": "out = dists[np.logical_and(dists >= r, dists <= r+dr)]", "error": "", "token_usage": [[324, 23]], "time_usage": [1.0825390815734863]}
{"task_id": "NumpyEval/55", "success": true, "generated_code": "# [start]\n# array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0): An array class with possibly masked values.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# [end]\nimport numpy as np\n\ndef xor_operation(x, y, z):\n    \"\"\"\n    How can I define in numpy a matrix that uses operations modulo 2?\n    This operation is called \"xor\".\n    Arguments:\n        x: a numpy array\n        y: a numpy array\n        z: a numpy array\n    Returns:\n        a numpy array containing the result of the operation\n    \"\"\"\n    return np.logical_xor(np.logical_xor(x, y), z)", "error": "", "token_usage": [[287, 203]], "time_usage": [5.693964958190918]}
{"task_id": "NumpyEval/56", "success": true, "generated_code": "# [start]\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# vstack(x, *args, **params): vstack(*args, **kwargs) Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\na = np.array([ 0,  3,  6,  9, 12])\nb = np.array([ 1,  4,  7, 10, 13])\nc = np.array([ 2,  5,  8, 11, 14])\n\n# How can I join them using numpy methods\n# You can transpose and flatten the arrays:\nd = np.vstack((a, b, c)).flatten()", "error": "", "token_usage": [[273, 186]], "time_usage": [5.352174282073975]}
{"task_id": "NumpyEval/57", "success": true, "generated_code": "# [start]\n# array(obj, itemsize=None, copy=True, unicode=None, order=None): Create a `chararray`.\n# unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None): Find the unique elements of an array.\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# [end]\nimport numpy as np\n\na = np.array([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n# I need to find unique rows in a numpy.array.\nout = np.unique(a, axis=0)", "error": "", "token_usage": [[292, 202]], "time_usage": [5.506023645401001]}
{"task_id": "NumpyEval/58", "success": true, "generated_code": "# [start]\n# dist(p, q, /): Return the Euclidean distance between two points p and q.\n# radians(x, /): Convert angle x from degrees to radians.\n# degrees(x, /): Convert angle x from radians to degrees.\n# [end]\nimport numpy as np\n\na = np.array((1,2,3))\nb = np.array((4,5,6))\n# How can the Euclidean distance be calculated with NumPy?\ndist = np.linalg.norm(a - b)", "error": "", "token_usage": [[199, 109]], "time_usage": [3.4758636951446533]}
{"task_id": "NumpyEval/59", "success": true, "generated_code": "result = np.array(list(itertools.zip_longest(*data, fillvalue=0)))", "error": "", "token_usage": [[269, 22]], "time_usage": [1.0516078472137451]}
{"task_id": "NumpyEval/60", "success": true, "generated_code": "# [start]\n# asarray(a, dtype=None, order=None): Convert the input to a masked array of the given data-type.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# fromfunction(*args, **params): fromfunction(function, shape, **dtype) Construct an array by executing a function over each coordinate.\n# [end]\nimport numpy as np\n\n# We array `data` defines the columns of the nonzero elements in the output array. \ndata = np.array([1, 0, 3])\n# We need to also define the rows and then use fancy indexing in the following way:\nresult = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult", "error": "", "token_usage": [[270, 185]], "time_usage": [5.473681926727295]}
{"task_id": "NumpyEval/61", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndata = np.array([1,2,3,4,5,6,7,8,9])\n# How to remove specific elements in a numpy array\uff1f\n# I then want to remove 3,4,7 from a. All I know is the index of the values (index=[2,3,6]).\nindex = [2, 3, 6]\nresult = np.delete(data, index)", "error": "", "token_usage": [[271, 179]], "time_usage": [5.057503700256348]}
{"task_id": "NumpyEval/62", "success": true, "generated_code": "is_sorted = np.all(np.diff(a) >= 0)", "error": "", "token_usage": [[221, 17]], "time_usage": [1.043482780456543]}
{"task_id": "NumpyEval/63", "success": true, "generated_code": "# [start]\n# shape(obj): Return the shape of an array.\n# array(object, dtype=None, ctx=None): Create an array.\n# as_array(obj, shape=None): Create a numpy array from a ctypes array or POINTER.\n# [end]\nimport numpy as np\n\n# How do I create a numpy array of arbitrary shape 3x4 filled with all True?\ndata = np.full((3, 4), True)", "error": "", "token_usage": [[181, 93]], "time_usage": [2.8161025047302246]}
{"task_id": "NumpyEval/64", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# [end]\nimport numpy as np\n\ndef replace_elements_that_greater_than_value(arr, value, new_value):\n    # Replace all elements of Python NumPy Array that are greater than `value` with `new_value`\n    # Return the array\n    arr[arr > value] = new_value\n    return arr", "error": "", "token_usage": [[266, 182]], "time_usage": [4.6483752727508545]}
{"task_id": "NumpyEval/65", "success": true, "generated_code": "# [start]\n# concatenate(arrays, axis=0): Concatenate a sequence of arrays along the given axis.\n# block(arrays): Assemble an nd-array from nested lists of blocks.\n# stack(arrays, axis=0, out=None): Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\ndef concatenate_two_arrays(arr1, arr2):\n    # Concatenate a NumPy array to another NumPy array\n    return np.concatenate((arr1, arr2))", "error": "", "token_usage": [[197, 110]], "time_usage": [3.4145874977111816]}
{"task_id": "NumpyEval/66", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# all(a, axis=None, keepdims=False, out=None): Test whether all array elements along a given axis evaluate to True.\n# in1d(ar1, ar2, assume_unique=False, invert=False): Test whether each element of an array is also present in a second array.\n# [end]\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.any(arr)", "error": "", "token_usage": [[231, 137]], "time_usage": [3.960871458053589]}
{"task_id": "NumpyEval/67", "success": true, "generated_code": "# [start]\n# count(self, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``.\n# bincount(x, weights=None, minlength=0): Count number of occurrences of each value in array of non-negative ints.\n# [end]\nimport numpy as np\n\ndef count_true_number(arr):\n    # How to count the number of true elements in a NumPy bool array?\n    # return the count value\n    return np.count_nonzero(arr)", "error": "", "token_usage": [[238, 148]], "time_usage": [4.102894067764282]}
{"task_id": "NumpyEval/68", "success": true, "generated_code": "# [start]\n# row_stack(arrays): Stack arrays in sequence vertically (row wise).\n# vstack(tup): Stack arrays in sequence vertically (row wise).\n# column_stack(tup): Stack 1-D arrays as columns into a 2-D array.\n# [end]\nimport numpy as np\n\ndef add_row_to_arr(arr, row):\n    # How does one add rows to a numpy array?\n    # Is there a numpythonic way to do this?\n    if arr.ndim == 1:\n        arr = np.expand_dims(arr, axis=0)\n    elif arr.ndim == 2:\n        arr = np.vstack((arr, row))\n    else:\n        raise ValueError(\"Input array must be 1-D or 2-D\")\n    return arr", "error": "", "token_usage": [[199, 162]], "time_usage": [4.5916383266448975]}
{"task_id": "NumpyEval/69", "success": true, "generated_code": "# [start]\n# removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones.\n# append(object, /): Append object to the end of the list.\n# makedirs(name, mode=511, exist_ok=False): makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory and all intermediate ones.\n# [end]\nimport numpy as np\n\na = np.arange(1, 10)\na = a.reshape(len(a), 1)\n# I want to access the elements from index 4 to the end:\nb = a[4:]", "error": "", "token_usage": [[231, 137]], "time_usage": [3.9166758060455322]}
{"task_id": "NumpyEval/70", "success": true, "generated_code": "result = arr.reshape((-1, arr.shape[-1]))", "error": "", "token_usage": [[226, 16]], "time_usage": [1.0275757312774658]}
{"task_id": "NumpyEval/71", "success": true, "generated_code": "# [start]\n# vander(x, n=None): Generate a Vandermonde matrix.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array.\n# [end]\nimport numpy as np\n\ndef matrix2array(M):\n    # I am using numpy. I have a matrix `M` 1*N and I want to get an array from with N elements.\n    # To achieve it, Does anyone know a more elegant way to get the result?\n    return np.array(M)[0]", "error": "", "token_usage": [[234, 144]], "time_usage": [4.502397775650024]}
{"task_id": "NumpyEval/72", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# indices(dimensions, dtype=<class 'int'>, sparse=False): Return an array representing the indices of a grid.\n# argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis.\n# [end]\nimport numpy as np\n\ndef find_indices_zero(arr):\n    # Find indices of elements equal to zero in a NumPy array\n    # Return the indices\n    return np.argwhere(arr == 0)", "error": "", "token_usage": [[225, 137]], "time_usage": [3.863301992416382]}
{"task_id": "NumpyEval/73", "success": true, "generated_code": "# [start]\n# count(a, sub, start=0, end=None): Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n# count_nonzero(a, axis=None, *, keepdims=False): Counts the number of non-zero values in the array ``a``.\n# round(a, decimals=0, out=None): Round an array to the given number of decimals.\n# [end]\nimport numpy as np\n\ndef find_most_frequent_number(arr):\n    # Find the most frequent number in a NumPy array\n    # Return the number\n    unique, counts = np.unique(arr, return_counts=True)\n    index = np.argmax(counts)\n    return unique[index]", "error": "", "token_usage": [[230, 158]], "time_usage": [4.543637275695801]}
{"task_id": "NumpyEval/74", "success": true, "generated_code": "M = np.stack(L, axis=-1)", "error": "", "token_usage": [[230, 14]], "time_usage": [0.8839893341064453]}
{"task_id": "NumpyEval/75", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# array(object, dtype=None, ctx=None): Create an array.\n# append(arr, values, axis=None): Append values to the end of an array.\n# [end]\nimport numpy as np\n\ndef add_first_element_to_arr(arr):\n    # I want to add the first element on to the end of the array.\n    # Return the appended array.\n    return np.append(arr, arr[0])", "error": "", "token_usage": [[201, 113]], "time_usage": [3.163818359375]}
{"task_id": "NumpyEval/76", "success": true, "generated_code": "# [start]\n# fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs): Construct an array by executing a function over each coordinate.\n# empty_like(prototype, dtype=None, order='C', subok=False, shape=None): Return a new array with the same shape and type as a given array.\n# array(object, dtype=None, ctx=None): Create an array.\n# [end]\nimport numpy as np\n\ndef convert_string_in_array_to_float(arr):\n    # How to convert an array of strings to an array of floats in numpy?\n    # Return the final result\n    return np.array(arr, dtype=float)", "error": "", "token_usage": [[229, 140]], "time_usage": [4.8325560092926025]}
{"task_id": "NumpyEval/77", "success": true, "generated_code": "# [start]\n# max(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# amax(a, axis=None, keepdims=False, out=None): Return the maximum of an array or maximum along an axis.\n# maximum(a, b=None): maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Element-wise maximum of array elements.\n# [end]\nimport numpy as np\n\ndef get_index_max_element(arr, axis_value):\n    # How to get the index of a maximum element in a NumPy array along axis_value?\n    # Return the result\n    return np.argmax(arr, axis=axis_value)", "error": "", "token_usage": [[255, 168]], "time_usage": [4.793789386749268]}
{"task_id": "NumpyEval/78", "success": true, "generated_code": "# [start]\n# reshape(self, *args, **kwargs): Returns a copy of the array with a new shape.\n# transpose(a, axes=None): Reverse or permute the axes of an array; returns the modified array.\n# astype(self, dtype, order='K', casting='unsafe', subok=True, copy=True): Copy of the array, cast to a specified type.\n# [end]\nimport numpy as np\n\ndef arr2tuple(arr):\n    # Convert numpy array to tuple\n    # Return the transformed tuple\n    return tuple(arr)", "error": "", "token_usage": [[212, 119]], "time_usage": [3.4928267002105713]}
{"task_id": "NumpyEval/79", "success": true, "generated_code": "# [start]\n# any(self, axis=None, out=None): Test whether any array element along a given axis evaluates to True.\n# isposinf(x, out=None): Test element-wise for positive infinity, return result as bool array.\n# isneginf(x, out=None): Test element-wise for negative infinity, return result as bool array.\n# [end]\nimport numpy as np\n\ndef test_arr_contain_only_zeros(arr):\n    # Test if numpy array contains only zeros\n    # Return the result\n    return np.all(arr == 0)", "error": "", "token_usage": [[207, 118]], "time_usage": [3.7637240886688232]}
{"task_id": "NumpyEval/80", "success": true, "generated_code": "# [start]\n# argwhere(a): Find the indices of array elements that are non-zero, grouped by element.\n# argmin(a, *args, **params): argmin(self, axis=None, fill_value=None, out=None) Return array of indices to the minimum values along the given axis.\n# choose(indices, choices, out=None, mode='raise'): Use an index array to construct a new array from a list of choices.\n# [end]\nimport numpy as np\n\ndef find_index_within_range(arr, low, high):\n    # find index of the elements within range [low, high]\n    # Return the final array of indices.\n    indices = np.argwhere((arr >= low) & (arr <= high))\n    return indices", "error": "", "token_usage": [[235, 158]], "time_usage": [4.8748087882995605]}
{"task_id": "NumpyEval/81", "success": true, "generated_code": "# [start]\n# nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth percentile of the data along the specified axis, while ignoring nan values.\n# nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>): Compute the qth quantile of the data along the specified axis, while ignoring nan values.\n# power(a, b, third=None): Returns element-wise base array raised to power from second array.\n# [end]\nimport numpy as np\n\ndef convert_nan_to_zero(arr):\n    # convert nan value to zero\n    arr[np.isnan(arr)] = 0\n    # Return the changed array\n    return arr", "error": "", "token_usage": [[251, 167]], "time_usage": [5.029465913772583]}
{"task_id": "NumpyEval/82", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# remove(self, v, /): Remove the first occurrence of v in the array.\n# empty(*args, **params): empty(shape, dtype=float, order='C', *, like=None) Return a new array of given shape and type, without initializing entries.\n# [end]\nimport numpy as np\n\ndef remove_all_rows_contain_non_numeric_values(arr):\n    # How to remove all rows in a numpy.ndarray that contain non-numeric values?\n    # Return the final result\n    mask = np.array([np.all(np.isfinite(row)) for row in arr])\n    return arr[mask]", "error": "", "token_usage": [[227, 152]], "time_usage": [4.899065971374512]}
{"task_id": "NumpyEval/83", "success": true, "generated_code": "result = np.where(a < 0, 0, a)", "error": "", "token_usage": [[234, 18]], "time_usage": [1.078437328338623]}
{"task_id": "NumpyEval/84", "success": true, "generated_code": "# [start]\n# transpose(a, axes=None): Permute the dimensions of an array.\n# sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>): Sum of array elements over a given axis.\n# truncate(path, length): Truncate a file, specified by path, to a specific length.\n# [end]\nimport numpy as np\n\ndef interweaving_two_arrays(a, b):\n    # How would one interweave them efficiently?\n    # It can be assumed that length(a)==length(b).\n    c = np.empty((a.size + b.size,), dtype=a.dtype)\n    c[0::2] = a\n    c[1::2] = b\n    return c", "error": "", "token_usage": [[238, 164]], "time_usage": [4.318741083145142]}
{"task_id": "NumpyEval/85", "success": true, "generated_code": "# Find the index of the k smallest values of a numpy array\nidx = np.argsort(A)[:k]", "error": "", "token_usage": [[236, 26]], "time_usage": [1.279071569442749]}
{"task_id": "NumpyEval/86", "success": true, "generated_code": "# [start]\n# flatten_structured_array(a): Flatten a structured array.\n# reshape(a, newshape, order='C', out=None): Gives a new shape to an array without changing its data.\n# stack(x, *args, **params): stack(*args, **kwargs) Join a sequence of arrays along a new axis.\n# [end]\nimport numpy as np\n\ninput_list = [np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]]), np.array([[ 0.00353654]])]\n# Flattening a list of NumPy arrays?\n# We can use numpy.concatenate, which as the name suggests, basically concatenates all the elements of such an input list into a single NumPy array\n# And then we can use numpy.ravel to flatten the array\noutput = np.ravel(np.concatenate(input_list))", "error": "", "token_usage": [[328, 238]], "time_usage": [6.408842086791992]}
{"task_id": "NumpyEval/87", "success": true, "generated_code": "np.array_split(x, 3)", "error": "", "token_usage": [[198, 12]], "time_usage": [0.9417870044708252]}
{"task_id": "NumpyEval/88", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# matrix(data, dtype=None, copy=True): matrix(data, dtype=None, copy=True).\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef inverse_matrix(matrix):\n    # Inverse of a matrix using numpy and return it.\n    # Input:\n    #   matrix: numpy array, shape (n, n)\n    # Output:\n    #   inverse: numpy array, shape (n, n)\n    return np.linalg.inv(matrix)", "error": "", "token_usage": [[232, 141]], "time_usage": [4.145330190658569]}
{"task_id": "NumpyEval/89", "success": true, "generated_code": "# [start]\n# mean(self, axis=None, dtype=None, out=None, keepdims=False): Returns the average of the array elements along given axis.\n# average(a, axis=None, weights=None, returned=False): Return the weighted average of array over the given axis.\n# sum(a, axis=None, dtype=None, keepdims=False, initial=None, out=None): Sum of array elements over a given axis.\n# [end]\nimport numpy as np\n\ndef average_every_3_elements(arr):\n    # Averaging over every 3 elements of a numpy array\n    # I have a numpy array. I want to create a new array which is the average over every consecutive triplet of elements. So the new array will be a third of the size as the original.\n    # Return it\n    return np.mean(arr.reshape(-1, 3), axis=1)", "error": "", "token_usage": [[265, 183]], "time_usage": [5.30932879447937]}
{"task_id": "NumpyEval/90", "success": true, "generated_code": "# [start]\n# array(object, dtype=None, ctx=None): Create an array.\n# fromlist(self, list, /): Append items to array from list.\n# array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None): Return a string representation of an array.\n# [end]\nimport numpy as np\n\ndef prepend_element_to_array(arr, element):\n    # Prepend element to numpy array\n    arr = np.insert(arr, 0, element)\n    # Return the array\n    return arr", "error": "", "token_usage": [[228, 146]], "time_usage": [4.495578765869141]}
{"task_id": "NumpyEval/91", "success": true, "generated_code": "out = np.concatenate(a).flatten()", "error": "", "token_usage": [[288, 12]], "time_usage": [0.9359915256500244]}
{"task_id": "NumpyEval/92", "success": true, "generated_code": "out = np.searchsorted(master, search)", "error": "", "token_usage": [[231, 13]], "time_usage": [0.8979594707489014]}
{"task_id": "NumpyEval/93", "success": true, "generated_code": "import numpy as np\ndef get_minimum_value(arr):\n    # I wish to find and return the minimum value in this 2D array\n    # The following code is aim to implement it\n    return np.min(arr)", "error": "", "token_usage": [[223, 50]], "time_usage": [1.763929843902588]}
{"task_id": "NumpyEval/94", "success": true, "generated_code": "# [start]\n# inv(a): Compute the (multiplicative) inverse of a matrix.\n# i0(x): Modified Bessel function of the first kind, order 0.\n# getI(self): Returns the (multiplicative) inverse of invertible `self`.\n# [end]\nimport numpy as np\n\nz = np.array([ 0, 1, 3, 9, 18 ])\n# What is the inverse of the numpy cumsum function?\nz[1:] = np.cumsum(z[1:])[::-1]", "error": "", "token_usage": [[203, 116]], "time_usage": [3.517354965209961]}
{"task_id": "NumpyEval/95", "success": true, "generated_code": "out = np.full((5, 5), -1)", "error": "", "token_usage": [[263, 17]], "time_usage": [1.069941759109497]}
{"task_id": "NumpyEval/96", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# removedirs(name): removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate ones.\n# remove(self, v, /): Remove the first occurrence of v in the array.\n# [end]\nimport numpy as np\n\na = np.arange(12).reshape(3,4)\n# Removing columns with index 1 and 3 in numpy\n# If you ever want to delete more than one columns, you just pass indices of columns you want deleted as a list to np.delete, like this:\nout = np.delete(a, [1, 3], axis=1)", "error": "", "token_usage": [[237, 153]], "time_usage": [4.6320507526397705]}
{"task_id": "NumpyEval/97", "success": true, "generated_code": "# [start]\n# delete(arr, obj, axis=None): Return a new array with sub-arrays along an axis deleted.\n# prod(a, axis=None, dtype=None, out=None, keepdims=False): Return the product of array elements over a given axis.\n# take(a, indices, axis=None, mode='raise', out=None): Take elements from an array along an axis.\n# [end]\nimport numpy as np\n\nA = np.array([1,2,3,4,5,6,7])\nB = np.array([2,4,6])\nC = np.searchsorted(A, B)\n\ndef check_elements_in_array(A, B):\n    \"\"\"\n    Check if each element in a numpy array is in another array.\n    \n    Parameters:\n    A (numpy array): The array to check.\n    B (numpy array): The array to check against.\n    \n    Returns:\n    indices_in (numpy array): The indices of A where the elements are in B.\n    indices_not_in (numpy array): The indices of A where the elements are not in B.\n    \"\"\"\n    indices_in = np.where(np.isin(A, B))[0]\n    indices_not_in = np.where(~np.isin(A, B))[0]\n    return indices_in, indices_not_in\n\nindices_in, indices_not_in = check_elements_in_array(A, B)", "error": "", "token_usage": [[304, 283]], "time_usage": [7.772644281387329]}
{"task_id": "NumpyEval/98", "success": true, "generated_code": "b = a[np.where((a[:,0]==0) & (a[:,1]==1))]", "error": "", "token_usage": [[273, 24]], "time_usage": [1.1295480728149414]}
{"task_id": "NumpyEval/99", "success": true, "generated_code": "b = np.rollaxis(a, 2, start=0)", "error": "", "token_usage": [[283, 18]], "time_usage": [1.0681977272033691]}
{"task_id": "NumpyEval/100", "success": true, "generated_code": "result = a - np.min(a, axis=0)", "error": "", "token_usage": [[256, 16]], "time_usage": [1.0821666717529297]}
