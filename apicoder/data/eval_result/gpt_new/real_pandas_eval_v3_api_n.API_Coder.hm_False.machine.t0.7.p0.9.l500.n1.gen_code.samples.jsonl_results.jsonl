{"task_id": "PandasEval/0", "completion": "\n    df['mean_along_rows'] = df.mean(axis=1)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/1", "completion": "\n    return df[df[col_name].isin(values)]", "result": "passed", "passed": true}
{"task_id": "PandasEval/2", "completion": "\n    df.rename(columns=dict(zip(origin_names, new_names)), inplace=True)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/3", "completion": "\n    df = df.drop(column_name, axis=1)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/4", "completion": "\n    return df[columns]", "result": "passed", "passed": true}
{"task_id": "PandasEval/5", "completion": "\n    return len(df)", "result": "passed", "passed": true}
{"task_id": "PandasEval/6", "completion": "\n    return df.columns.tolist()", "result": "passed", "passed": true}
{"task_id": "PandasEval/7", "completion": "\n    df[column_name] = column_data\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/8", "completion": "\n    return df.apply(pd.to_numeric)", "result": "passed", "passed": true}
{"task_id": "PandasEval/9", "completion": " df", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/11", "completion": "\n    df_to_append = pd.DataFrame(list_to_append, columns=column_name_list)\n    return df.append(df_to_append)", "result": "passed", "passed": true}
{"task_id": "PandasEval/12", "completion": "\n    df[column_name] = pd.to_numeric(df[column_name].str[:4])\n    df[column_name] = df[column_name] + 1\n    \n    return df[column_name]", "result": "passed", "passed": true}
{"task_id": "PandasEval/13", "completion": "\n    return df.tail(n)", "result": "passed", "passed": true}
{"task_id": "PandasEval/14", "completion": "\n    return df[column_name].iloc[n]", "result": "passed", "passed": true}
{"task_id": "PandasEval/15", "completion": "\n# [start]\n# copy(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Make a copy of this object.\n# [end]\nimport pandas as pd\n\ndef creating_df_with_same_as_other(df_original):\n    # creating a new dataframe of all same with df_original one, but no any rows\n    new_df = pd.DataFrame(columns=df_original.columns)\n    return new_df", "result": "failed: expected an indented block (<string>, line 9)", "passed": false}
{"task_id": "PandasEval/20", "completion": " df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "result": "passed", "passed": true}
{"task_id": "PandasEval/10", "completion": " pd.Series([56, 24, 421, 90])", "result": "passed", "passed": true}
{"task_id": "PandasEval/16", "completion": " df.loc[df['col_0']=='a','col_1'].clip(-2, 2)", "result": "passed", "passed": true}
{"task_id": "PandasEval/17", "completion": " df.apply(lambda x: x.where(x > x.mean()).dropna())", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/18", "completion": "target_series = target_series.append(source_series, ignore_index=True)", "result": "passed", "passed": true}
{"task_id": "PandasEval/19", "completion": " df[df['x2'].isnull()]", "result": "passed", "passed": true}
{"task_id": "PandasEval/21", "completion": " pd.DataFrame(a, columns=['one', 'two'])\ndf['two'] = df['two'].astype(float)", "result": "passed", "passed": true}
{"task_id": "PandasEval/22", "completion": " my_df.select_dtypes(include=['float64']).columns\nmy_df[cols] = my_df[cols].astype('float32')", "result": "passed", "passed": true}
{"task_id": "PandasEval/23", "completion": " df[df['col2'] == 'Jimmy']\n    return new_df\n\nnew_df = filter_dataframe(df)", "result": "failed: unexpected indent (<string>, line 6)", "passed": false}
{"task_id": "PandasEval/24", "completion": "\nfor index, row in df.iterrows():\n    rows_dict[row['MSRA']] = row['THU']\n#", "result": "passed", "passed": true}
{"task_id": "PandasEval/25", "completion": " df.apply(lambda x: (x - x.min()) / (x.max() - x.min()))", "result": "passed", "passed": true}
{"task_id": "PandasEval/26", "completion": "\ndf.loc[0, 'Email'] = emails", "result": "failed: Must have equal len keys and value when setting with an iterable", "passed": false}
{"task_id": "PandasEval/28", "completion": "\n    if isinstance(df, pd.DataFrame):\n        print(\"The DataFrame exists.\")\n    else:\n        print(\"The DataFrame does not exist.\")", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/29", "completion": " df[df['line_num'] != 0]", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/30", "completion": "\n# [start]\ndef drop(self, labels, errors: 'str_t' = 'raise') -> 'Index':\n    \"\"\"\n    Make new Index with passed list of labels deleted.\n    \n    Parameters:\n    - labels: A list of labels to be deleted.\n    - errors: Determines how to handle when an element to be deleted does not exist.\n    \n    Returns:\n    - Index: A new Index object with passed labels deleted.\n    \"\"\"\n    new_index = self.copy()\n    try:\n        for label in labels:\n            new_index._data.remove(label)\n    except:\n        if errors == 'raise':\n            raise ValueError(f\"labels {labels} not contained in axis\")\n        elif errors == 'ignore':\n            pass\n    return new_index\n# [end]", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/31", "completion": "\ndf['C'] = df['A'] + df['B']", "result": "passed", "passed": true}
{"task_id": "PandasEval/32", "completion": " df.apply(lambda x: sorted(x, key=pd.isnull))\nnew_df = new_df.dropna()", "result": "failed: check() missing 1 required positional argument: 'candidate'", "passed": false}
{"task_id": "PandasEval/33", "completion": "\n    data.columns = map(str.lower, data.columns)", "result": "failed: 'NoneType' object has no attribute 'equals'", "passed": false}
{"task_id": "PandasEval/35", "completion": " df['a'].nlargest(1).iloc[0]", "result": "passed", "passed": true}
{"task_id": "PandasEval/36", "completion": " np.unique(df.values.ravel())", "result": "passed", "passed": true}
{"task_id": "PandasEval/37", "completion": " df.sort_values('date', ascending=True).groupby('id').last()", "result": "passed", "passed": true}
{"task_id": "PandasEval/38", "completion": "\n    df = df.drop(idx, errors='ignore')\n    # [start]\n    # drop(self, labels, errors: 'str_t' = 'raise') -> 'Index': Make new Index with passed list of labels deleted.\n    # [end]\n    return df", "result": "failed: invalid syntax (<string>, line 31)", "passed": false}
{"task_id": "PandasEval/39", "completion": "\n    df['gdp'] = df['gdp'].shift(periods=1)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/40", "completion": " df.select_dtypes(include='float64')", "result": "passed", "passed": true}
{"task_id": "PandasEval/41", "completion": "\n# [start]\n# merge(self, right: 'FrameOrSeriesUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'DataFrame': Merge DataFrame or named Series objects with a database-style join.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef merge_df(df1, df2):\n    # How to merge two dataframes with different column names but same number of rows?\n    # I have two different data frames in pandas. Example:\n    # df1=a b  df2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to merge them so\n    # df1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to merge two dataframes you can use this two examples. Both returns the same goal\n    # Using merge plus additional arguments instructing it to use the indexes\n    df1.merge(df2, left_index=True, right_index=True)\n    # Using concat and setting axis=1 to concatenate columns\n    pd.concat([df1, df2], axis=1)", "result": "failed: expected an indented block (<string>, line 22)", "passed": false}
{"task_id": "PandasEval/42", "completion": " df.drop(['A', 'C'], axis=1)", "result": "passed", "passed": true}
{"task_id": "PandasEval/43", "completion": "\n    counts = df.value_counts().rename_axis('unique_values').reset_index(name='counts')\n    return counts", "result": "passed", "passed": true}
{"task_id": "PandasEval/44", "completion": " ['a', 'b', 'c']", "result": "passed", "passed": true}
{"task_id": "PandasEval/45", "completion": "\n    return data.rename(columns=str.lower)", "result": "passed", "passed": true}
{"task_id": "PandasEval/46", "completion": " df.groupby(\"section\").sample(n=50)", "result": "passed", "passed": true}
{"task_id": "PandasEval/47", "completion": " df['Name'].str.replace('\\d+', '', regex=True)", "result": "passed", "passed": true}
{"task_id": "PandasEval/48", "completion": " df.groupby('Mt').apply(lambda x: x[x['num'] == x['num'].max()])", "result": "passed", "passed": true}
{"task_id": "PandasEval/49", "completion": " pd.to_datetime(df['date'], errors='coerce')", "result": "passed", "passed": true}
{"task_id": "PandasEval/50", "completion": "\n    return df.isnull().any().any()", "result": "passed", "passed": true}
{"task_id": "PandasEval/51", "completion": "\n    df = df.reindex(sorted(df.columns), axis=1)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/52", "completion": "\n    values = df[df['B'] == 3]['A']\n    return values", "result": "passed", "passed": true}
{"task_id": "PandasEval/53", "completion": "\n    return df[col_name].mean()", "result": "passed", "passed": true}
{"task_id": "PandasEval/54", "completion": "\n    return pd.concat([df1, df2], ignore_index=True)", "result": "passed", "passed": true}
{"task_id": "PandasEval/55", "completion": " pd.concat([x] * 5)", "result": "passed", "passed": true}
{"task_id": "PandasEval/56", "completion": "\n    return df.to_dict(orient='records')", "result": "passed", "passed": true}
{"task_id": "PandasEval/57", "completion": "\n# [start]\n# to_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, format: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_format: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Series | DatetimeScalar | NaTType | None': Convert argument to datetime.\n# [end]\nimport pandas as pd\n\ndef convert_column_to_date(df):\n    # Convert Column `Date` to Date Format using pandas function\n    return pd.to_datetime(df['Date'])", "result": "failed: expected an indented block (<string>, line 10)", "passed": false}
{"task_id": "PandasEval/58", "completion": "\n", "result": "failed: expected an indented block (<string>, line 11)", "passed": false}
{"task_id": "PandasEval/59", "completion": "\n    df = df.append(row_to_insert, ignore_index=False)\n    df.sort_index(inplace=True)\n    df.reset_index(drop=True, inplace=True)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/60", "completion": "\n    return df", "result": "failed: name 'df' is not defined", "passed": false}
{"task_id": "PandasEval/61", "completion": " df1.merge(df2, left_index=True, right_index=True)", "result": "failed: name 'merged_result' is not defined", "passed": false}
{"task_id": "PandasEval/62", "completion": " df.to_string(index=False)", "result": "failed: EOL while scanning string literal (<string>, line 17)", "passed": false}
{"task_id": "PandasEval/63", "completion": "\n    return df.dropna(how='all')", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/64", "completion": "\n    return value in series.unique()", "result": "passed", "passed": true}
{"task_id": "PandasEval/65", "completion": "\n# [start]\n# rename(self, name, inplace=False): Alter Index or MultiIndex name.\n# [end]\nimport pandas as pd\n\ndef rename_column(df, old_name, new_name):\n    # How would I rename the only one column header?\n    df.rename(columns={old_name: new_name}, inplace=True)\n    return df", "result": "failed: expected an indented block (<string>, line 10)", "passed": false}
{"task_id": "PandasEval/66", "completion": "\n# [start]\n# drop_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Return Index with duplicate values removed.\n# [end]\nimport pandas as pd\n\ndef remove_duplicates_by_column(df, col1, col2):\n    # I have a dataframe with repeat values in column `col1`. I want to drop duplicates, keeping the row with the last value in column `col2`.\n    df.drop_duplicates(subset=col1, keep='last', inplace=True)\n    return df", "result": "failed: expected an indented block (<string>, line 11)", "passed": false}
{"task_id": "PandasEval/67", "completion": "\n    return pd.DataFrame(columns=col_names)", "result": "passed", "passed": true}
{"task_id": "PandasEval/68", "completion": "\n    #   n: int\n    # Return:\n    #   DataFrame\n    return df[n:]", "result": "passed", "passed": true}
{"task_id": "PandasEval/69", "completion": "\n    return df.loc[:, ~df.columns.duplicated()]", "result": "passed", "passed": true}
{"task_id": "PandasEval/70", "completion": "\n    df[col_name] = df[col_name].astype(int)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/71", "completion": "\n    return len(df.columns)", "result": "passed", "passed": true}
{"task_id": "PandasEval/72", "completion": "\n    return df.columns[df.isna().any()].tolist()", "result": "passed", "passed": true}
{"task_id": "PandasEval/73", "completion": " df.tail(N)", "result": "passed", "passed": true}
{"task_id": "PandasEval/74", "completion": "\n    return df", "result": "failed: could not convert string to float: ", "passed": false}
{"task_id": "PandasEval/75", "completion": "\n    df[col_names] = df[col_names].fillna(0)\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/76", "completion": "\n# [start]\n# concat(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, copy: 'bool' = True) -> 'FrameOrSeriesUnion': Concatenate pandas objects along a particular axis with optional set logic along the other axes.\n# [end]\nimport pandas as pd\n\ndef concat_df(df1, df2):\n    # Given that all the dataframes have the same columns, you can simply concat them:\n    return pd.concat([df1, df2])", "result": "failed: expected an indented block (<string>, line 10)", "passed": false}
{"task_id": "PandasEval/77", "completion": "\n    first_row = df.head(1)\n    last_row = df.tail(1)\n    \n    return pd.concat([first_row, last_row])", "result": "passed", "passed": true}
{"task_id": "PandasEval/78", "completion": "\n    return df[df.isna().any(axis=1)]", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/79", "completion": "\n    return df.index.tolist()", "result": "passed", "passed": true}
{"task_id": "PandasEval/80", "completion": " df['mycol'].get(1, np.nan)", "result": "passed", "passed": true}
{"task_id": "PandasEval/81", "completion": "\n    return series.value_counts()[value]", "result": "passed", "passed": true}
{"task_id": "PandasEval/82", "completion": "\n    return df[df[col_a] > df[col_b]]", "result": "passed", "passed": true}
{"task_id": "PandasEval/83", "completion": "\n    return series", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/84", "completion": "\n    df['A'] = df['A'].round()\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/85", "completion": "\n    df[col_name] = df[col_name].apply(lambda x: str(x).zfill(15))\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/86", "completion": "\n    return df.append(dictionary, ignore_index=True)", "result": "passed", "passed": true}
{"task_id": "PandasEval/87", "completion": "\n# [start]\n# to_pydatetime(*args, **kwargs): Convert a Timestamp object to a native Python datetime object.\n# [end]\nimport pandas as pd\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    return timestamp.to_pydatetime()", "result": "failed: expected an indented block (<string>, line 10)", "passed": false}
{"task_id": "PandasEval/88", "completion": "\n    total_count = series.sum()\n    percentage_series = series / total_count * 100\n    \n    return percentage_series", "result": "failed: unsupported operand type(s) for /: 'str' and 'str'", "passed": false}
{"task_id": "PandasEval/89", "completion": "\n    df[['B', 'C']] = df[['B', 'C']].div(df['A'], axis='index')\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/90", "completion": "\n    return np.ceil(s)", "result": "passed", "passed": true}
{"task_id": "PandasEval/91", "completion": "\n    return df.dropna(axis=1, how='all')", "result": "passed", "passed": true}
{"task_id": "PandasEval/92", "completion": "\ndf.sort_index(inplace=True)", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/93", "completion": "\n    df['B'] = value\n    return df", "result": "passed", "passed": true}
{"task_id": "PandasEval/94", "completion": " s1.intersection(s2)", "result": "passed", "passed": true}
{"task_id": "PandasEval/95", "completion": "\n    return df.head(n)", "result": "passed", "passed": true}
{"task_id": "PandasEval/96", "completion": "\ndf['Fruit Total'] = df.sum(axis=1, skipna=True)", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/97", "completion": "\n    return df.select_dtypes(exclude=[np.number])", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/98", "completion": " df1.merge(df2, on='company')", "result": "passed", "passed": true}
{"task_id": "PandasEval/99", "completion": " df.isnull().sum()", "result": "passed", "passed": true}
{"task_id": "PandasEval/100", "completion": " df['col'].isin(targets)", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/34", "completion": "\n    return df.groupby('Group').apply(f)", "result": "failed: ", "passed": false}
{"task_id": "PandasEval/27", "completion": "\n    return df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)", "result": "failed: Could not convert abc to numeric", "passed": false}
