{"task_id": "NumpyEval/0", "completion": " np.array([[8, 7, 2], [5, 6, 1], [8, 2, 6]])"}
{"task_id": "NumpyEval/4", "completion": " np.column_stack((a, b))"}
{"task_id": "NumpyEval/5", "completion": " np.concatenate((a, b))"}
{"task_id": "NumpyEval/6", "completion": "\n# Complete the code by dynamically slicing the numpy array along the specified axis\nslc[axis] = slice(start, end)\nresult = m[tuple(slc)]"}
{"task_id": "NumpyEval/7", "completion": " np.sum((2 < a) & (a < 8))"}
{"task_id": "NumpyEval/8", "completion": " arr[[1, 4]]"}
{"task_id": "NumpyEval/9", "completion": "\n"}
{"task_id": "NumpyEval/10", "completion": "\n# [start]\n# fill_diagonal(a, val, wrap=False): Fill the main diagonal of the given array of any dimensionality.\n# [end]\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,3], 'B':[1,2,3], 'C':[1,2,3]})\n# I have a pandas dataframe I would like to set the diagonal to 0\n\ndef fill_diagonal(a, val, wrap=False):\n    np.fill_diagonal(a.values, val, wrap)\n\nfill_diagonal(df, 0)"}
{"task_id": "NumpyEval/11", "completion": " np.all(a == a[0, :], axis=0)"}
{"task_id": "NumpyEval/12", "completion": " np.fromstring(ts, dtype=int)"}
{"task_id": "NumpyEval/13", "completion": " a.shape"}
{"task_id": "NumpyEval/14", "completion": " np.array(list(result.items()), dtype=dtype)"}
{"task_id": "NumpyEval/15", "completion": " np.sum(df.values)"}
{"task_id": "NumpyEval/17", "completion": " np.in1d(a, b)"}
{"task_id": "NumpyEval/18", "completion": " (a + b + c) / 3"}
{"task_id": "NumpyEval/19", "completion": " np.where(np.diff(a) != 0)[0] + 1"}
{"task_id": "NumpyEval/20", "completion": " a[..., newaxis]"}
{"task_id": "NumpyEval/21", "completion": " np.std(arr, axis=0)"}
{"task_id": "NumpyEval/16", "completion": " \"1 2 3 4 5\".\na_string = ' '.join(map(str, a))"}
{"task_id": "NumpyEval/22", "completion": " a * b[:, newaxis]"}
{"task_id": "NumpyEval/23", "completion": " np.reshape(x, x.shape[0])"}
{"task_id": "NumpyEval/24", "completion": " np.core.records.fromarrays(myarray.transpose(), names='col1, col2, col3')"}
{"task_id": "NumpyEval/25", "completion": " np.stack(list_of_arrays)"}
{"task_id": "NumpyEval/26", "completion": " np.histogram(arr, bins=10, density=True)\nhist = np.cumsum(hist)"}
{"task_id": "NumpyEval/27", "completion": " np.array2string(a, precision=np.inf, separator=',')"}
{"task_id": "NumpyEval/28", "completion": " np.setxor1d(a, b)"}
{"task_id": "NumpyEval/29", "completion": " arr[np.all(arr != 0, axis=1)]"}
{"task_id": "NumpyEval/30", "completion": " np.core.defchararray.add(a1, a2)"}
{"task_id": "NumpyEval/31", "completion": " np.ma.mean(mdat, axis=1, fill_value=np.nan)"}
{"task_id": "NumpyEval/32", "completion": " np.lexsort((a[:, 1], a[:, 0]))\n\n# The lexsort function returns an array of indices that would sort the given arrays in lexicographical order.\n# In this case, we want to sort the points based on the x-coordinate first, so we pass a[:, 0] as the first array to sort.\n# Then, we want to sort the points based on the y-coordinate if the x-coordinate is the same, so we pass a[:, 1] as the second array to sort.\n\n# The resulting indices can be used to access the sorted points from the original array.\nsorted_points = a[ind]\n\n# Now, the sorted_points array contains the points sorted by x-coordinate, and then by y-coordinate in cases where the x-coordinate is the same.\n# The original array 'a' remains unchanged.\n\n# You can use the sorted_points array for further processing or analysis."}
{"task_id": "NumpyEval/33", "completion": " np.array(a).flatten().tolist()"}
{"task_id": "NumpyEval/34", "completion": "\nb[1:4, 1:4] = a"}
{"task_id": "NumpyEval/35", "completion": " np.zeros((len(a), len(b)))\nfor i in range(len(a)):\n    for j in range(len(b)):\n        c[i][j] = a[i] + b[j]*2"}
{"task_id": "NumpyEval/36", "completion": "\na[:, 1] = x"}
{"task_id": "NumpyEval/37", "completion": " m.compressed()"}
{"task_id": "NumpyEval/38", "completion": " a.astype(\"float32\")"}
{"task_id": "NumpyEval/39", "completion": " np.fromiter(Samples.values(), dtype=float)"}
{"task_id": "NumpyEval/40", "completion": " np.concatenate(L, axis=0)"}
{"task_id": "NumpyEval/41", "completion": " np.argmin(x, axis=0)"}
{"task_id": "NumpyEval/42", "completion": "\n    ncols = L\n    return np.lib.stride_tricks.as_strided(a, shape=(nrows, ncols), strides=(a.strides[0]*S, a.strides[0]))"}
{"task_id": "NumpyEval/43", "completion": " a[b[1], b[1]]"}
{"task_id": "NumpyEval/44", "completion": "\n# [start]\n# abs(a, *args, **kwargs): absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) Calculate the absolute value element-wise.\n# argmin(self, axis=None, out=None): Indexes of the minimum values along an axis.\n# [end]\nimport numpy as np\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    # Find nearest value in numpy array\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]"}
{"task_id": "NumpyEval/45", "completion": "\n    return new_arr"}
{"task_id": "NumpyEval/46", "completion": "\n    return np.squeeze(np.asarray(matrix))"}
{"task_id": "NumpyEval/47", "completion": " np.repeat(a[cond], n)"}
{"task_id": "NumpyEval/48", "completion": "\n    target = np.divide(t[1:], t[:-1])\n    return target"}
{"task_id": "NumpyEval/49", "completion": " np.unravel_index(np.argmin(A), A.shape)"}
{"task_id": "NumpyEval/50", "completion": "\n    return arr[top:bottom, left:right]"}
{"task_id": "NumpyEval/51", "completion": " np.vectorize(my_dict.get)(a)"}
{"task_id": "NumpyEval/52", "completion": " np.where(x % 2 == 0)"}
{"task_id": "NumpyEval/53", "completion": "\n    groups = np.split(data, np.where(np.diff(data) != stepsize)[0]+1)\n    return [tuple(group) for group in groups]"}
{"task_id": "NumpyEval/54", "completion": " dists[(dists >= r) & (dists <= r + dr)]"}
{"task_id": "NumpyEval/55", "completion": "\n    return np.logical_xor(np.logical_xor(x, y), z).astype(int)"}
{"task_id": "NumpyEval/56", "completion": " np.array([a, b, c]).flatten()"}
{"task_id": "NumpyEval/57", "completion": " np.unique(a, axis=0)"}
{"task_id": "NumpyEval/58", "completion": " np.linalg.norm(a-b)"}
{"task_id": "NumpyEval/59", "completion": " np.array(data, dtype=object, copy=True)"}
{"task_id": "NumpyEval/60", "completion": "\n = np.zeros((data.size, data.max()+1))\n# Convert array of indices to 1-hot encoded numpy array\nresult[np.arange(data.size), data] = 1\nresult"}
{"task_id": "NumpyEval/61", "completion": " np.delete(data, index)"}
{"task_id": "NumpyEval/62", "completion": " np.all(np.diff(a) >= 0)"}
{"task_id": "NumpyEval/63", "completion": " np.ones((3, 4), dtype=bool)"}
{"task_id": "NumpyEval/64", "completion": "\n    arr[arr > value] = new_value\n    return arr"}
{"task_id": "NumpyEval/65", "completion": "\n    return np.concatenate((arr1, arr2))"}
{"task_id": "NumpyEval/66", "completion": "\nimport numpy as np\n\ndef numpy_is_empty(arr):\n    # How can I check whether a numpy array is empty or not?\n    # Return the result that contains True or False\n    return np.size(arr) == 0"}
{"task_id": "NumpyEval/67", "completion": "\n    return np.sum(arr)"}
{"task_id": "NumpyEval/68", "completion": "\n    return np.vstack((arr, row))"}
{"task_id": "NumpyEval/69", "completion": " a[4:]"}
{"task_id": "NumpyEval/70", "completion": " arr.reshape((arr.shape[0]*arr.shape[1], arr.shape[2]))"}
{"task_id": "NumpyEval/71", "completion": "\n    return np.squeeze(np.asarray(M))"}
{"task_id": "NumpyEval/72", "completion": "\n    return np.where(arr == 0)[0]"}
{"task_id": "NumpyEval/73", "completion": "\n    counts = np.bincount(arr)\n    return np.argmax(counts)"}
{"task_id": "NumpyEval/74", "completion": " np.stack(L, axis=-1)"}
{"task_id": "NumpyEval/75", "completion": "\n    arr.append(arr[0])\n    return arr"}
{"task_id": "NumpyEval/76", "completion": "\n    return np.array(arr, dtype=float)"}
{"task_id": "NumpyEval/77", "completion": "\n    return np.argmax(arr, axis=axis_value)"}
{"task_id": "NumpyEval/78", "completion": "\n    return tuple(arr)"}
{"task_id": "NumpyEval/79", "completion": "\n    return np.any(arr)"}
{"task_id": "NumpyEval/80", "completion": "\n    condition = np.logical_and(arr >= low, arr <= high)\n    indices = np.where(condition)\n    return indices"}
{"task_id": "NumpyEval/81", "completion": "\n    return np.nan_to_num(arr)"}
{"task_id": "NumpyEval/82", "completion": "\n    return arr[~np.isnan(arr).any(axis=1)]"}
{"task_id": "NumpyEval/83", "completion": " np.where(a < 0, 0, a)"}
{"task_id": "NumpyEval/84", "completion": "\n    c[0::2] = a\n    c[1::2] = b\n    \n    return c"}
{"task_id": "NumpyEval/85", "completion": " np.argpartition(A, k)[:k]"}
{"task_id": "NumpyEval/86", "completion": " np.concatenate(input_list).ravel()"}
{"task_id": "NumpyEval/87", "completion": "np.array_split(x, 3)"}
{"task_id": "NumpyEval/88", "completion": "\n    return np.linalg.inv(matrix)"}
{"task_id": "NumpyEval/89", "completion": "\n    return np.mean(arr.reshape(-1, 3), axis=1)"}
{"task_id": "NumpyEval/90", "completion": "\n    return np.insert(arr, 0, element)"}
{"task_id": "NumpyEval/91", "completion": " np.hstack(a).flatten()"}
{"task_id": "NumpyEval/92", "completion": " np.searchsorted(master, search, side='left')"}
{"task_id": "NumpyEval/93", "completion": "\n    return np.min(arr)"}
{"task_id": "NumpyEval/94", "completion": " np.diff(z)"}
{"task_id": "NumpyEval/95", "completion": " np.full((5, 5), -1)"}
{"task_id": "NumpyEval/96", "completion": " np.delete(a, [1, 3], axis=1)"}
{"task_id": "NumpyEval/97", "completion": " check_elements_in_array(A, B)"}
{"task_id": "NumpyEval/98", "completion": " np.where((a[:,0]==0) & (a[:,1]==1))"}
{"task_id": "NumpyEval/99", "completion": " np.flip(a, axis=2)"}
{"task_id": "NumpyEval/100", "completion": " np.subtract(a, np.min(a, axis=0))"}
{"task_id": "NumpyEval/1", "completion": " a * b[:, None]"}
{"task_id": "NumpyEval/2", "completion": " np.reshape(a, (2, 4, 2, 4))\nc = np.transpose(b, (0, 2, 1, 3))"}
{"task_id": "NumpyEval/3", "completion": "\n    return arr[..., i]"}
