{"task_id": "PandasEval/0", "success": true, "generated_code": "# [start]\n# mean(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the mean of the values over the requested axis.\n# sem(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return unbiased standard error of the mean over requested axis.\n# [end]\nimport pandas as pd\n\ndef compute_mean_along_rows(df):\n    # You can specify a new column named `mean_along_rows` that contains the mean of each row. You also need to compute the mean along the rows, so use axis=1.\n    # Finally, return the dataframe with the new column.\n    df['mean_along_rows'] = df.mean(axis=1)\n    return df", "error": "", "token_usage": [[245, 165]], "time_usage": [5.422332763671875]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "# [start]\n# isin(self, values, level=None) -> 'np.ndarray': Return a boolean array where the index values are in `values`.\n# query(self, expr: 'str', inplace: 'bool' = False, **kwargs): Query the columns of a DataFrame with a boolean expression.\n# [end]\nimport pandas as pd\n\ndef select_rows_from_column(df, col_name, values):\n    # How do I select rows from a DataFrame df based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    return df[df[col_name].isin(values)]", "error": "", "token_usage": [[221, 133]], "time_usage": [3.623319149017334]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "# [start]\n# rename(self, index=None, *, axis=None, copy=True, inplace=False, level=None, errors='ignore'): Alter Series index labels or name.\n# reorder_categories(self, new_categories, ordered=None, inplace=<no_default>): Reorder categories as specified in new_categories.\n# [end]\nimport pandas as pd\n\ndef change_col_names_of_df(df, origin_names, new_names):\n    # How do I change the column labels of df\uff1f\n    # And return the dataframe that has been renamed\n    df.rename(columns=dict(zip(origin_names, new_names)), inplace=True)\n    return df", "error": "", "token_usage": [[208, 129]], "time_usage": [3.799631118774414]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "# [start]\n# drop(self, labels, errors: 'str_t' = 'raise') -> 'Index': Make new Index with passed list of labels deleted.\n# delete(self: '_IndexT', loc) -> '_IndexT': Make new Index with passed location(-s) deleted.\n# [end]\nimport pandas as pd\n\ndef delete_column(df, column_name):\n    # deleting a column from a Pandas DataFrame\n    # return the changed dataframe\n    return df.drop(column_name, axis=1)", "error": "", "token_usage": [[198, 110]], "time_usage": [3.262507200241089]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "# [start]\n# assign(self, **kwargs) -> 'DataFrame': Assign new columns to a DataFrame.\n# pivot(data: 'DataFrame', index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, values: 'IndexLabel | None' = None) -> 'DataFrame': Return reshaped DataFrame organized by given index / column values.\n# [end]\nimport pandas as pd\n\ndef select_multiple_columns(df, columns):\n    # How do I select the given columns and return the new DataFrame?\n    return df[columns]", "error": "", "token_usage": [[212, 120]], "time_usage": [3.381014585494995]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "# [start]\n# len(self): Compute the length of each element in the Series/Index.\n# take(self, indices: 'Sequence[int]', allow_fill: 'bool' = False, fill_value: 'Any' = None): Take elements from an array.\n# [end]\nimport pandas as pd\n\ndef get_row_count(df):\n    \"\"\"\n    Return the row count of df\n    \"\"\"\n    return len(df)", "error": "", "token_usage": [[182, 89]], "time_usage": [2.7436139583587646]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "# [start]\n# tolist(self) -> 'list[Scalar]': Return a list of the values.\n# to_list(self) -> 'list[Scalar]': Return a list of the values.\n# [end]\nimport pandas as pd\n\ndef get_list_from_dataframe(df):\n    # I want to get a list of the column headers from a Pandas DataFrame. \n    # The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return df.columns.tolist()", "error": "", "token_usage": [[217, 125]], "time_usage": [3.4361884593963623]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "# [start]\n# assign(self, **kwargs) -> 'DataFrame': Assign new columns to a DataFrame.\n# insert(self, loc, column, value, allow_duplicates: 'bool' = False) -> 'None': Insert column into DataFrame at specified location.\n# [end]\nimport pandas as pd\n\ndef add_column_to_dataframe(df, column_name, column_data):\n    # How to add a new column to an existing DataFrame?\n    # I would like to add a new column data with the column name, to the existing dataframe\n    df[column_name] = column_data\n    return df", "error": "", "token_usage": [[211, 126]], "time_usage": [3.826817512512207]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\n\ndef change_all_cols_type(df):\n    # Change all columns type of DataFrame to numeric\n    # And return the new DataFrame\n    # The code is:\n    return df.apply(pd.to_numeric)", "error": "", "token_usage": [[236, 146]], "time_usage": [4.2746007442474365]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "# [start]\n# dropna(self: '_IndexT', how: 'str_t' = 'any') -> '_IndexT': Return Index without NA/NaN values.\n# drop(self, codes, level=None, errors='raise'): Make new MultiIndex with passed list of codes deleted.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef drop_rows_col_nan(df, col_name):\n    # How to drop rows of Pandas DataFrame whose value in a certain column is NaN\n    df.dropna(subset=[col_name], inplace=True)\n    return df", "error": "", "token_usage": [[206, 124]], "time_usage": [3.6431100368499756]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# to_arrays(data, columns: 'Index | None', dtype: 'DtypeObj | None' = None) -> 'tuple[list[ArrayLike], Index]': Return list of arrays, columns.\n# [end]\nfrom typing import List\nimport pandas as pd\nimport numpy as np\n\ndef append_in_dataframe(df, list_to_append, column_name_list) -> pd.DataFrame:\n    \"\"\"    \n    Params:\n        df: The dataframe to append to.\n        list_to_append: The list to append.\n        column_name_list: The column names of the list to append.\n\n    Returns:\n        The dataframe with the list appended.\n    \"\"\"\n    # Append the list to the dataframe\n    df = df.append(pd.DataFrame(list_to_append, columns=column_name_list), ignore_index=True)\n    \n    return df", "error": "", "token_usage": [[296, 233]], "time_usage": [7.350385427474976]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "# [start]\n# type(value=None, freq=None, ordinal=None, year=None, month=None, quarter=None, day=None, hour=None, minute=None, second=None): Represents a period of time.\n# to_numeric(arg, errors='raise', downcast=None): Convert argument to a numeric type.\n# [end]\nimport pandas as pd\n\ndef extract_the_last_year(df, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my apply method should add to the first two digits.\n    # the column_name is the column name of the dataframe that contains the date strings.\n    # return the numerical Series obj of the last year.\n    df[column_name] = pd.to_numeric(df[column_name].str[:4]) + pd.to_numeric(df[column_name].str[5:7]) // 100\n    return df[column_name]", "error": "", "token_usage": [[291, 234]], "time_usage": [7.368816137313843]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "# [start]\n# head(self: 'FrameOrSeries', n: 'int' = 5) -> 'FrameOrSeries': Return the first `n` rows.\n# nlargest(self, n, columns, keep: 'str' = 'first') -> 'DataFrame': Return the first `n` rows ordered by `columns` in descending order.\n# [end]\nimport pandas as pd\n\ndef get_last_n_rows(df, n):\n    # How to get the last N rows of a pandas DataFrame?\n    return df.tail(n)", "error": "", "token_usage": [[208, 116]], "time_usage": [3.907491445541382]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# count(self, value, /): Return number of occurrences of value.\n# [end]\nimport pandas as pd\n\ndef get_values_at_nth_rows(df, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Pandas?\n    return the value\n    \"\"\"\n    return df[column_name].iloc[n]", "error": "", "token_usage": [[221, 132]], "time_usage": [4.309828281402588]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "# [start]\n# combine(self, other: 'DataFrame', func, fill_value=None, overwrite: 'bool' = True) -> 'DataFrame': Perform column-wise combine with another DataFrame.\n# reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None): Conform Series/DataFrame to new index with optional filling logic.\n# [end]\nimport pandas as pd\n\ndef creating_df_with_same_as_other(df_original):\n    # creating a new dataframe of all same with df_original one, but no any rows\n    new_df = pd.DataFrame(columns=df_original.columns)\n    return new_df", "error": "", "token_usage": [[236, 147]], "time_usage": [4.46325159072876]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_df = df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "error": "", "token_usage": [[425, 33]], "time_usage": [1.412074089050293]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "my_series = pd.Series([56, 24, 421, 90])", "error": "", "token_usage": [[212, 21]], "time_usage": [1.1959068775177002]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', convert_dtype: 'bool' = True, args: 'tuple[Any, ...]' = (), **kwargs) -> 'FrameOrSeriesUnion': Invoke function on values of Series.\n# swapaxes(self: 'FrameOrSeries', axis1, axis2, copy=True) -> 'FrameOrSeries': Interchange axes and swap values axes appropriately.\n# [end]\nimport pandas as pd\n\ndata = {'col_0': ['a', 'a', 'a', 'a', 'b','b','b'], 'col_1': [-2, -7, 6, 8, -5, 2, 6]}\ndf = pd.DataFrame(data)\n# What I want is to clip the values of `col_1` between -2 to 2 if `col_0` is `a`.\n# # Using `clip` function in pandas.\ndf.loc[df['col_0']=='a','col_1'] = df.loc[df['col_0']=='a','col_1'].clip(-2, 2)", "error": "", "token_usage": [[310, 234]], "time_usage": [6.277094602584839]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "df = df.apply(lambda x: x.where(x > x.mean()).dropna())", "error": "", "token_usage": [[309, 21]], "time_usage": [1.224792718887329]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "merged_series = target_series.append(source_series, ignore_index=True)", "error": "", "token_usage": [[236, 17]], "time_usage": [1.1005520820617676]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "# Selecting rows where column x2 is NaN \nnan_df = df[df['x2'].isna()]", "error": "", "token_usage": [[276, 27]], "time_usage": [1.358262538909912]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "df = pd.DataFrame(a, columns=['one', 'two'])\ndf['two'] = df['two'].astype(float)", "error": "", "token_usage": [[296, 29]], "time_usage": [1.3645164966583252]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "cols = ['col1', 'col2']\nmy_df[cols] = my_df[cols].astype(np.float32)", "error": "", "token_usage": [[270, 30]], "time_usage": [1.3761539459228516]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# pivot(self, index=None, columns=None, values=None) -> 'DataFrame': Return reshaped DataFrame organized by given index / column values.\n# [end]\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1,2,3], 'col2': ['Jimmy','Tom','Jimmy']})\n# I have a dataframe that has two columns, the second column is one of only a few values. \n# I want to return a dataframe where only the rows where that col2 had a specific value 'Jimmy' are included.\nnew_df = df[df['col2'] == 'Jimmy']", "error": "", "token_usage": [[270, 182]], "time_usage": [4.998663425445557]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "# [start]\n# iterrows(self) -> 'Iterable[tuple[Hashable, Series]]': Iterate over DataFrame rows as (index, Series) pairs.\n# items(self) -> 'Iterable[tuple[Hashable, Series]]': Iterate over (column name, Series) pairs.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\ndf = df.reset_index()  # make sure indexes pair with number of rows\n# (for index, row in DataFrame.iterrows) is a generator which yields both the index and row (as a Series)\n# for each row in the DataFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\n# Complete the code\nfor index, row in df.iterrows():\n    rows_dict[row['MSRA']] = row['THU']", "error": "", "token_usage": [[293, 223]], "time_usage": [6.188649654388428]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a dataframe in pandas where each column has different value range.\n# Any idea how I can normalize the columns of this dataframe where each value is between 0 and 1?\nnormalized_df = df.apply(lambda x: (x - x.min()) / (x.max() - x.min()))", "error": "", "token_usage": [[274, 196]], "time_usage": [5.937314748764038]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "# [start]\n# astype(self, dtype: 'Dtype', copy: 'bool' = True) -> 'ArrayLike': Coerce this type to another dtype.\n# from_dict(data, orient: 'str' = 'columns', dtype: 'Dtype | None' = None, columns=None) -> 'DataFrame': Construct DataFrame from dict of array-like or dicts.\n# [end]\nimport pandas as pd\n\n# I want to create a dataframe with one of the column as a list or array.\ndf = pd.DataFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\ndf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\n# Assigning emails to the 'Email' column\ndf.at[0, 'Email'] = emails\n\n# Printing the updated dataframe\nprint(df)", "error": "", "token_usage": [[280, 215]], "time_usage": [6.2332940101623535]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\n\ndef is_df_exist(df):\n    # In my code, I have several variables which can either contain a pandas DataFrame or nothing at all.\n    # Let's say I want to test and see if a certain DataFrame has been created yet or not.\n    if isinstance(df, pd.DataFrame):\n        return True\n    else:\n        return False", "error": "", "token_usage": [[254, 175]], "time_usage": [4.9588401317596436]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "n_df = df[df['line_num'] != 0]", "error": "", "token_usage": [[260, 17]], "time_usage": [1.0613350868225098]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "# [start]\n# drop(self, labels, errors: 'str_t' = 'raise') -> 'Index': Make new Index with passed list of labels deleted.\n# drop_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Return Index with duplicate values removed.\n# [end]\nimport pandas as pd\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\ndf = pd.DataFrame(web_stats)\n# I would like to drop all data in a pandas dataframe\n# Using df.index to drop all rows\n\n# Drop all rows in the dataframe\ndf.drop(df.index, inplace=True)", "error": "", "token_usage": [[279, 197]], "time_usage": [5.460808038711548]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "# [start]\n# add(self, other, level=None, fill_value=None, axis=0): Return Addition of series and other, element-wise (binary operator `add`).\n# multiply(self, other, level=None, fill_value=None, axis=0): Return Multiplication of series and other, element-wise (binary operator `mul`).\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n# I would like to add a new column C that is the sum value of A and B cell.\n\ndf['C'] = df['A'].add(df['B'])", "error": "", "token_usage": [[231, 147]], "time_usage": [5.841066837310791]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "# [start]\n# drop(self, labels=None, axis: 'Axis' = 0, index=None, columns=None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'str' = 'raise'): Drop specified labels from rows or columns.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# [end]\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n# Move next value to first empty row pandas\n# how do i move each value from a column to the first empty \"row/cell\" in pandas?\n# use sorted to align non NULL data at the top, use dropna to drop all rows with all NaN\nnew_df = df.apply(lambda x: sorted(x, key=pd.isnull))", "error": "", "token_usage": [[335, 252]], "time_usage": [7.386319875717163]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "# [start]\n# map(self, mapper): Map categories using input correspondence (dict, Series, or function).\n# lower(self): Convert strings in the Series/Index to lowercase.\n# [end]\nimport pandas as pd\n\ndef make_dataframe_column_headers_lowercase(data):\n    # I want to make all column headers in my pandas data frame lower case\n    data.columns = data.columns.str.lower()\n    return data", "error": "", "token_usage": [[172, 87]], "time_usage": [3.0208096504211426]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "df.nlargest(1, 'a').iloc[0]['a']", "error": "", "token_usage": [[267, 20]], "time_usage": [1.2204792499542236]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "# [start]\n# unique(self): Return the ``Categorical`` which ``categories`` and ``codes`` are unique.\n# factorize_array(values: 'np.ndarray', na_sentinel: 'int' = -1, size_hint: 'int | None' = None, na_value=None, mask: 'np.ndarray | None' = None) -> 'tuple[np.ndarray, np.ndarray]': Factorize an array-like to codes and uniques.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randint(0,10,size=100).reshape(10,10))\n# I have a Pandas dataframe and I want to find all the unique values in that dataframe...irrespective of row/columns. \n# If I have a 10 x 10 dataframe, and suppose they have 84 unique values, I need to find them - Not the count.\n# Using xx.values.ravel to get the flattened array of the dataframe\n# Getting the unique values by numpy.unique\nunique_ndarray = np.unique(df.values.ravel())", "error": "", "token_usage": [[317, 225]], "time_usage": [6.446408033370972]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "last_df = df.sort_values('date', ascending=False).groupby('id').first()", "error": "", "token_usage": [[461, 23]], "time_usage": [1.2104170322418213]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "# [start]\n# drop(self, labels, errors: 'str_t' = 'raise') -> 'Index': Make new Index with passed list of labels deleted.\n# drop_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Return Index with duplicate values removed.\n# [end]\nimport pandas as pd\n\ndef drop2rows_zero(df):\n    # i want to drop 2 rows in the dataframe if zero comes in the column\n    # if 0 comes on odd index drop previous row as well as current row using pandas\n    # Assuming your dataframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = df[(df['column2'] == 0) & (df.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.append(idx-1)\n    # A new dataframe with those rows removed\n    df = df.drop(idx)\n    return df", "error": "", "token_usage": [[303, 216]], "time_usage": [5.627326488494873]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "def shift_column_up_by_one(df):\n    # Shift column in pandas dataframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return dataframe with the changed gdp column.\n    df['gdp'] = df['gdp'].shift(periods=1)\n    return df", "error": "", "token_usage": [[230, 71]], "time_usage": [2.33455753326416]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "new_df = df.select_dtypes(include='float64')", "error": "", "token_usage": [[282, 16]], "time_usage": [1.0115792751312256]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "# [start]\n# merge_ordered(left: 'DataFrame', right: 'DataFrame', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_by=None, right_by=None, fill_method: 'str | None' = None, suffixes: 'Suffixes' = ('_x', '_y'), how: 'str' = 'outer') -> 'DataFrame': Perform merge with optional filling/interpolation.\n# combine(self, other: 'DataFrame', func, fill_value=None, overwrite: 'bool' = True) -> 'DataFrame': Perform column-wise combine with another DataFrame.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef merge_df(df1, df2):\n    # How to merge two dataframes with different column names but same number of rows?\n    # I have two different data frames in pandas. Example:\n    # df1=a b  df2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to merge them so\n    # df1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to merge two dataframes you can use this two examples. Both returns the same goal\n    # Using merge plus additional arguments instructing it to use the indexes\n    df1.merge(df2, left_index=True, right_index=True)\n    # Using join plus additional arguments instructing it to use the indexes\n    df1.join(df2, lsuffix='_left', rsuffix='_right')", "error": "", "token_usage": [[442, 376]], "time_usage": [10.051969051361084]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "# [start]\n# delete(self, loc): Make new Index with passed location(-s) deleted.\n# remove_unused_categories(self, *args, **kwargs): Remove categories which are not used.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3],'B': [100, 300, 500],'C': list('abc')})\n\n# How can I delete multiple columns in one pass?\n# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\nnew_df = df.drop(['A', 'C'], axis=1)", "error": "", "token_usage": [[226, 141]], "time_usage": [4.400907754898071]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "def get_value_counts(df):\n    # I want to get the counts of unique values of the dataframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a pandas dataframe.\n    # Use rename_axis('unique_values') for name ('counts') of column from index and reset_index\n    # return the final dataframe\n    counts = df.value_counts().rename_axis('unique_values').reset_index(name='counts')\n    return counts", "error": "", "token_usage": [[260, 107]], "time_usage": [3.210130453109741]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "# [start]\n# rename(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='ignore'): Alter axes labels.\n# rename_categories(self, new_categories, inplace=<no_default>): Rename categories.\n# [end]\nimport pandas as pd\n\ndata = pd.DataFrame({'A':range(3), 'B':range(3,0,-1), 'C':list('abc')})\n# How do I change the column labels of a pandas DataFrame from ['A', 'B', 'C'] to ['a', 'b', 'c']?\ndata.columns = ['a', 'b', 'c']", "error": "", "token_usage": [[229, 141]], "time_usage": [4.197658061981201]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', convert_dtype: 'bool' = True, args: 'tuple[Any, ...]' = (), **kwargs) -> 'FrameOrSeriesUnion': Invoke function on values of Series.\n# lower(self): Convert strings in the Series/Index to lowercase.\n# [end]\nimport pandas as pd\n\ndef make_df_all_cols_lower(data):\n    # I want to make all column headers in my pandas data frame lower case\n    # Return the changed dataframe\n    data.columns = data.columns.str.lower()\n    return data", "error": "", "token_usage": [[208, 123]], "time_usage": [3.948030471801758]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample = df.groupby('section').sample(n=50)", "error": "", "token_usage": [[435, 16]], "time_usage": [0.8994307518005371]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "df['Name'] = df['Name'].str.replace('\\d+', '', regex=True)", "error": "", "token_usage": [[299, 22]], "time_usage": [1.2648296356201172]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "new_df = df.loc[df.groupby('Mt')['num'].idxmax()]", "error": "", "token_usage": [[389, 19]], "time_usage": [1.1560893058776855]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "# [start]\n# replace(self, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, nanosecond=None, tzinfo=<class 'object'>, fold=None): Implements datetime.\n# DatetimeIndex(data=None, freq=<no_default>, tz=None, normalize: 'bool' = False, closed=None, ambiguous='raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable' = None) -> 'DatetimeIndex': Immutable ndarray-like of datetime64 data.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({\n'date': [\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"friday\"],\n'value': [1, 2, 3, 4]\n})\n\n# transfer column date to datetime type\n# when there is a string that is not capable of beeing turned into datetime format, skip that row,\n# use errors='coerce' for this\ndf['date'] = pd.to_datetime(df['date'], errors='coerce')", "error": "", "token_usage": [[345, 260]], "time_usage": [7.179208278656006]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "# [start]\n# dropna(self, how: 'str' = 'any') -> 'MultiIndex': Return Index without NA/NaN values.\n# isin(self, values) -> 'DataFrame': Whether each element in the DataFrame is contained in values.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef if_any_value_is_nan(df):\n    # How to check if any value is NaN in a Pandas DataFrame? Return the result.\n    return df.isnull().values.any()", "error": "", "token_usage": [[197, 108]], "time_usage": [3.022634267807007]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "# [start]\n# rename_axis(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False): Set the name of the axis for the index or columns.\n# rename(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='ignore'): Alter axes labels.\n# [end]\nimport pandas as pd\n\ndef sorting_columns_based_on_column_name(df):\n    # Sorting columns in pandas dataframe based on column name\n    # Note that axis is one\n    df = df.sort_index(axis=1)\n    return df", "error": "", "token_usage": [[212, 128]], "time_usage": [3.7510242462158203]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# isin(self, values) -> 'Series': Whether elements in Series are contained in `values`.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef get_value_when_condition(df):\n    # How can I get the values of column `A` when column `B`=3?\n    return df[df['B'] == 3]['A']", "error": "", "token_usage": [[217, 132]], "time_usage": [4.039543390274048]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "# [start]\n# mean(self, axis=0, *args, **kwargs): Mean of non-NA/null values.\n# std(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return sample standard deviation over requested axis.\n# [end]\nimport pandas as pd\n\ndef get_mean_in_column(df, col_name):\n    # return the column average/mean\n    return df[col_name].mean()", "error": "", "token_usage": [[190, 100]], "time_usage": [2.9116554260253906]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# combine(self, other: 'DataFrame', func, fill_value=None, overwrite: 'bool' = True) -> 'DataFrame': Perform column-wise combine with another DataFrame.\n# [end]\nimport pandas as pd\n\ndef combine_df(df1, df2):\n    \"\"\"\n    How do I combine two dataframes with ignore index? Return the concated dataframe.\n    \"\"\"\n    return pd.concat([df1, df2], ignore_index=True)", "error": "", "token_usage": [[227, 147]], "time_usage": [4.34084415435791]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "# [start]\n# repeat(self, repeats: 'int | Sequence[int]', axis: 'int | None' = None): Repeat elements of a ExtensionArray.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# [end]\nimport pandas as pd\n\n# This is my DataFrame that should be repeated for 5 times:\nx = pd.DataFrame({'a':1,'b':2}, index = range(1))\n# I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a DataFrame.\n# You can use the concat function:\nrepeated_x = pd.concat([x] * 5)", "error": "", "token_usage": [[261, 172]], "time_usage": [4.418410539627075]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "# [start]\n# astype(self: 'FrameOrSeries', dtype, copy: 'bool_t' = True, errors: 'str' = 'raise') -> 'FrameOrSeries': Cast a pandas object to a specified dtype ``dtype``.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\n\ndef dataframe2list_of_dict(df):\n    # Pandas DataFrame to List of Dictionaries\n    # Use df.to_dict() to solve it and return the result\n    return df.to_dict(orient='records')", "error": "", "token_usage": [[237, 149]], "time_usage": [4.0122339725494385]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "# [start]\n# strftime(self, date_format: 'str') -> 'np.ndarray': Convert to Index using specified date_format.\n# to_period(self, freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool' = True) -> 'DataFrame': Convert DataFrame from DatetimeIndex to PeriodIndex.\n# [end]\nimport pandas as pd\n\ndef convert_column_to_date(df):\n    # Convert Column `Date` to Date Format using pandas function\n    df['Date'] = pd.to_datetime(df['Date'])\n    # return the converted dataframe\n    return df", "error": "", "token_usage": [[213, 131]], "time_usage": [3.7768847942352295]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "# [start]\n# value_counts(self, subset: 'Sequence[Hashable] | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True): Return a Series containing counts of unique rows in the DataFrame.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# [end]\nimport pandas as pd\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/pandas array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    z = []\n    count = 0\n    for value in y:\n        if value == 1:\n            count += 1\n        else:\n            count = 0\n        z.append(count)\n    return z", "error": "", "token_usage": [[337, 280]], "time_usage": [8.011410474777222]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "# [start]\n# take(self, indices: 'Sequence[int]', allow_fill: 'bool' = False, fill_value: 'Any' = None): Take elements from an array.\n# reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None): Conform Series/DataFrame to new index with optional filling logic.\n# [end]\nimport pandas as pd\n\ndef insert_row_at_arbitrary_in_dataframe(df, row_to_insert):\n    \"\"\"\n    Inserts a row into a dataframe at a specified row with no ingore index, and sort & reset the index with drop=True. \n    Returns the new dataframe.\n    \"\"\"\n    df = pd.concat([df.iloc[:row_to_insert], row_to_insert, df.iloc[row_to_insert:]]).reset_index(drop=True)\n    return df", "error": "", "token_usage": [[251, 187]], "time_usage": [5.410928249359131]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# to_frame(self, name=None) -> 'DataFrame': Convert Series to DataFrame.\n# [end]\nimport pandas as pd\n\ndef get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to dataframe?\n    # Return the dataframe\n    return pd.DataFrame(data=list_of_lists[1:], columns=list_of_lists[0])", "error": "", "token_usage": [[264, 184]], "time_usage": [5.578376054763794]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "merged_df = pd.merge_ordered(df1, df2, left_index=True, right_index=True)", "error": "", "token_usage": [[323, 24]], "time_usage": [1.2725601196289062]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "# [start]\n# astype(self, dtype, copy: 'bool' = True) -> 'Index': Create an Index with values cast to dtypes.\n# append(self, other: 'Index | Sequence[Index]') -> 'Index': Append a collection of Index options together.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'a': [0, 1], 'b': [5, 3]})\n# How to obtain pandas DataFrame without index\n# I want to print the whole dataframe, but I don't want to print the index\ndf_string = df.to_string(index=False)\nprint(df_string)", "error": "", "token_usage": [[222, 134]], "time_usage": [4.347283601760864]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "# [start]\n# dropna(self, how: 'str' = 'any') -> 'MultiIndex': Return Index without NA/NaN values.\n# drop(self, codes, level=None, errors='raise'): Make new MultiIndex with passed list of codes deleted.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef drop_all_nan_rows(df):\n    # We will drop all Nan rows.\n    # Return the changed dataframe.\n    return df.dropna(how='all')", "error": "", "token_usage": [[194, 106]], "time_usage": [3.3960561752319336]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "# [start]\n# select_column(self, key: 'str', column: 'str', start: 'int | None' = None, stop: 'int | None' = None): return a single column from the table.\n# isin(self, values) -> 'DataFrame': Whether each element in the DataFrame is contained in values.\n# [end]\nimport pandas as pd\n\ndef is_contain_particular_value(series, value):\n    # How to determine whether a Pandas Column contains a particular value?\n    # Return the result\n    return series.isin([value])", "error": "", "token_usage": [[212, 122]], "time_usage": [3.7472281455993652]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "# [start]\n# rename(self, name, inplace=False): Alter Index or MultiIndex name.\n# to_frame(self, name=None) -> 'DataFrame': Convert Series to DataFrame.\n# [end]\nimport pandas as pd\n\ndef rename_column(df, old_name, new_name):\n    # How would I rename the only one column header?\n    df.rename(columns={old_name: new_name}, inplace=True)\n    return df", "error": "", "token_usage": [[178, 91]], "time_usage": [2.7152891159057617]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "# [start]\n# drop_duplicates(self, keep='first', inplace=False) -> 'Series | None': Return Series with duplicate values removed.\n# duplicated(self, keep='first') -> 'Series': Indicate duplicate Series values.\n# [end]\nimport pandas as pd\n\ndef remove_duplicates_by_column(df, col1, col2):\n    # I have a dataframe with repeat values in column `col1`. I want to drop duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    df.drop_duplicates(subset=col1, keep='last', inplace=True)\n    return df", "error": "", "token_usage": [[220, 136]], "time_usage": [3.8948092460632324]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# astype(self: 'FrameOrSeries', dtype, copy: 'bool_t' = True, errors: 'str' = 'raise') -> 'FrameOrSeries': Cast a pandas object to a specified dtype ``dtype``.\n# [end]\nimport pandas as pd\n\ndef create_empty_df(col_names):\n    # Pandas create empty DataFrame with only column names\n    # Return: DataFrame\n    return pd.DataFrame(columns=col_names)", "error": "", "token_usage": [[247, 158]], "time_usage": [4.649143218994141]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# uname_result(system, node, release, version, machine, processor): uname_result(system, node, release, version, machine, processor).\n# [end]\nimport pandas as pd\n\ndef delete_first_n_rows(df, n):\n    # Delete first n rows of a dataframe\n    # Input:\n    #   df: DataFrame\n    #   n: int\n    # Return:\n    #   DataFrame\n    return df.iloc[n:]", "error": "", "token_usage": [[249, 157]], "time_usage": [4.692359685897827]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "# [start]\n# insert(self, loc, column, value, allow_duplicates: 'bool' = False) -> 'None': Insert column into DataFrame at specified location.\n# duplicated(self, keep='first') -> 'np.ndarray': Indicate duplicate index values.\n# [end]\nimport pandas as pd\n\ndef remove_duplicates_by_col_names(df):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the dataframe with duplicate columns removed\n    \"\"\"\n    df = df.loc[:, ~df.columns.duplicated()]\n    return df", "error": "", "token_usage": [[198, 119]], "time_usage": [3.734067916870117]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "# [start]\n# astype(self, dtype, copy: 'bool' = True): Create an Index with values cast to dtypes.\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# [end]\nimport pandas as pd\n\ndef convert_bool_to_int(df, col_name):\n    # How can I map True/False to 1/0 in a Pandas DataFrame?\n    # return the dataframe with the column converted to int\n    df[col_name] = df[col_name].astype(int)\n    return df", "error": "", "token_usage": [[231, 150]], "time_usage": [4.305181503295898]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "# [start]\n# to_frame(self, index: 'bool' = True, name: 'Hashable' = None) -> 'DataFrame': Create a DataFrame with a column containing the Index.\n# abs(self: 'FrameOrSeries') -> 'FrameOrSeries': Return a Series/DataFrame with absolute numeric value of each element.\n# [end]\nimport pandas as pd\n\ndef get_number_columns(df):\n    # How do I retrieve the number of columns in a Pandas data frame?\n    # Return the number of columns in the dataframe\n    return len(df.columns)", "error": "", "token_usage": [[213, 121]], "time_usage": [3.924196720123291]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "def find_columns_name_lists(df):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    return df.columns[df.isna().any()].tolist()", "error": "", "token_usage": [[201, 64]], "time_usage": [2.278965950012207]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "# [start]\n# head(self: 'FrameOrSeries', n: 'int' = 5) -> 'FrameOrSeries': Return the first `n` rows.\n# nlargest(self, n, columns, keep: 'str' = 'first') -> 'DataFrame': Return the first `n` rows ordered by `columns` in descending order.\n# [end]\nimport pandas as pd\n\nN = 2\ndf = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n# How to get the last N rows of a pandas DataFrame?\nresult = df.tail(N)", "error": "", "token_usage": [[244, 152]], "time_usage": [4.748053789138794]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "# [start]\n# replace(self, to_replace=None, value=None, inplace: 'bool' = False, limit=None, regex: 'bool' = False, method: 'str' = 'pad'): Replace values given in `to_replace` with `value`.\n# fillna(self, value=None, method=None, limit=None): Fill missing values with `value`.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef replacing_blank_with_nan(df):\n    # replace field that's entirely space (or empty) with NaN using regex\n    df.replace(r'^\\s*$', np.nan, regex=True, inplace=True)\n    # return the result\n    return df", "error": "", "token_usage": [[222, 146]], "time_usage": [4.378292560577393]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "# [start]\n# fillna(self, value=None, method=None, limit=None): Fill missing values with `value`.\n# shift(self, periods: 'int' = 1, fill_value: 'object' = None) -> 'ExtensionArray': Shift values by desired number.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef fill_none_with_zero(df, col_names):\n    # Pandas dataframe fillna() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed dataframe\n    df[col_names] = df[col_names].fillna(0)\n    return df", "error": "", "token_usage": [[216, 136]], "time_usage": [4.262699127197266]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "# [start]\n# DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None): Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n# assign(self, **kwargs) -> 'DataFrame': Assign new columns to a DataFrame.\n# [end]\nimport pandas as pd\n\ndef concat_df(df1, df2):\n    # Given that all the dataframes have the same columns, you can simply concat them:\n    return pd.concat([df1, df2])", "error": "", "token_usage": [[228, 133]], "time_usage": [4.375711679458618]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "# [start]\n# extract(self, pat: 'str', flags: 'int' = 0, expand: 'bool' = True) -> 'FrameOrSeriesUnion | Index': Extract capture groups in the regex `pat` as columns in a DataFrame.\n# extractall(self, pat, flags=0): Extract capture groups in the regex `pat` as columns in DataFrame.\n# [end]\nimport pandas as pd\n\ndef extract_first_and_last_df(df):\n    # Extract first and last row of a dataframe in pandas\n    # Return the dataframe with the first and last row\n    return pd.concat([df.head(1), df.tail(1)])", "error": "", "token_usage": [[223, 140]], "time_usage": [4.154340982437134]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "def display_rows_with_gt_1_nan(df):\n    # Return the dataframe with the rows with one or more NaN values\n    return df[df.isna().sum(axis=1) > 0]", "error": "", "token_usage": [[180, 45]], "time_usage": [1.6199126243591309]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "# [start]\n# tolist(self) -> 'list[Scalar]': Return a list of the values.\n# to_list(self) -> 'list[Scalar]': Return a list of the values.\n# [end]\nimport pandas as pd\n\ndef get_row_index_values_as_list(df):\n    # Return the row-index values of the dataframe as a list\n    return df.index.tolist()", "error": "", "token_usage": [[176, 84]], "time_usage": [2.5693273544311523]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'mycol':np.arange(5), 'dummy':np.arange(5)})\n# I find myself often having to check whether a column or row exists in a dataframe before trying to reference it.\n# Is there any way to do this more nicely? \n# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in pandas? Really any way to achieve what I'm doing more gracefully?\n# Output the second row of data in `mycol` column if it exists, otherwise output NaN\nvalue = df['mycol'].iloc[1] if 'mycol' in df.columns else np.nan", "error": "", "token_usage": [[331, 254]], "time_usage": [6.709709405899048]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "# [start]\n# count(self, value, /): Return number of occurrences of value.\n# value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True): Return a Series containing counts of unique values.\n# [end]\nimport pandas as pd\n\ndef counting_occurrences_of_a_value(series, value):\n    # Count the number of occurrences of a value in a series\n    # Return the count\n    return series.value_counts()[value]", "error": "", "token_usage": [[211, 121]], "time_usage": [4.039201736450195]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "# [start]\n# searchsorted(self, value, side='left', sorter=None) -> 'np.ndarray': Find indices where elements should be inserted to maintain order.\n# rank(values: 'ArrayLike', axis: 'int' = 0, method: 'str' = 'average', na_option: 'str' = 'keep', ascending: 'bool' = True, pct: 'bool' = False) -> 'np.ndarray': Rank the values along a given axis.\n# [end]\nimport pandas as pd\n\ndef find_col_a_gt_col_b_rows(df, col_a, col_b):\n    # Find rows in df where col_a > col_b\n    # Return the rows\n    return df[df[col_a] > df[col_b]]", "error": "", "token_usage": [[245, 159]], "time_usage": [4.644007921218872]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "# [start]\n# drop_duplicates(self, keep='first', inplace=False) -> 'Series | None': Return Series with duplicate values removed.\n# drop(self, codes, level=None, errors='raise'): Make new MultiIndex with passed list of codes deleted.\n# [end]\nimport pandas as pd\n\ndef drop_consecutive_duplicates(series):\n    # Drop consecutive duplicates\n    series = series.drop_duplicates(keep='first', inplace=False)\n    # Return the result\n    return series", "error": "", "token_usage": [[183, 103]], "time_usage": [3.0594699382781982]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "# [start]\n# round(self, decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -> 'DataFrame': Round a DataFrame to a variable number of decimal places.\n# pivot(data: 'DataFrame', index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, values: 'IndexLabel | None' = None) -> 'DataFrame': Return reshaped DataFrame organized by given index / column values.\n# [end]\nimport pandas as pd\n\ndef round_a_single_column(df):\n    # Round a single column `A`\n    df['A'] = df['A'].round()\n    # Return the dataframe\n    return df", "error": "", "token_usage": [[236, 154]], "time_usage": [4.29531192779541]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# [end]\nimport pandas as pd\n\ndef add_zeros_to_string(df, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Pandas Dataframe\n    # The maximum length of the string is 15\n    # Return the dataframe\n    df[col_name] = df[col_name].apply(lambda x: x.zfill(15))\n    return df", "error": "", "token_usage": [[251, 177]], "time_usage": [5.506544828414917]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "# [start]\n# to_dict(self, orient: 'str' = 'dict', into=<class 'dict'>): Convert the DataFrame to a dictionary.\n# append(self, other: 'Index | Sequence[Index]') -> 'Index': Append a collection of Index options together.\n# [end]\nimport pandas as pd\n\ndef append_dict_to_df(df, dictionary):\n    # append dictionary to data frame\n    df = df.append(dictionary, ignore_index=True)\n    # return the data frame\n    return df", "error": "", "token_usage": [[192, 109]], "time_usage": [3.634950637817383]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "# [start]\n# transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'FrameOrSeriesUnion': Call ``func`` on self producing a Series with transformed values.\n# to_pydatetime(*args, **kwargs): Convert a Timestamp object to a native Python datetime object.\n# [end]\nimport pandas as pd\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    pydatetime = timestamp.to_pydatetime()\n    # return pydatetime object\n    return pydatetime", "error": "", "token_usage": [[207, 123]], "time_usage": [3.9574036598205566]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "# [start]\n# asfreq(self, freq, method=None, how: 'str | None' = None, normalize: 'bool' = False, fill_value=None) -> 'Series': Convert time series to specified frequency.\n# value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True): Return a Series containing counts of unique values.\n# [end]\nimport pandas as pd\n\ndef get_percentage_of_each_gender(series):\n    # Given a pandas series that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    total = series.sum()\n    percentages = (series / total) * 100\n    return percentages", "error": "", "token_usage": [[247, 171]], "time_usage": [5.0108537673950195]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "# [start]\n# divide(self, other, axis='columns', level=None, fill_value=None): Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n# div(self, other, axis='columns', level=None, fill_value=None): Get Floating division of dataframe and other, element-wise (binary operator `truediv`).\n# [end]\nimport pandas as pd\n\ndef divide_multiple_cols_by_first_col(df):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a DataFrame by the first column.\n    # Return the result.\n    return df[['B', 'C']].div(df['A'], axis='index')", "error": "", "token_usage": [[230, 150]], "time_usage": [4.309514760971069]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "# [start]\n# floor(self, freq, ambiguous='raise', nonexistent='raise'): Return a new Timestamp floored to this resolution.\n# ceil(self, freq, ambiguous='raise', nonexistent='raise'): Return a new Timestamp ceiled to this resolution.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef ceil_of_series(s):\n    # ceiling of a pandas series\n    # Return the result.\n    return np.ceil(s)", "error": "", "token_usage": [[188, 96]], "time_usage": [3.245630979537964]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "# [start]\n# fillna(self, value=None, downcast=None): Fill NA/NaN values with the specified value.\n# delete(self, loc): Make new Index with passed location(-s) deleted.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef delete_all_nan_columns(df):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    return df.dropna(axis=1, how='all')", "error": "", "token_usage": [[183, 98]], "time_usage": [3.0746123790740967]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "# [start]\n# add(self, other, level=None, fill_value=None, axis=0): Return Addition of series and other, element-wise (binary operator `add`).\n# join(self, other, how: 'str' = 'left', level=None, return_indexers: 'bool' = False, sort: 'bool' = False): See Index.\n# [end]\nimport pandas as pd\n\ndf = pd.DataFrame({'name': ['jon','sam','jane','bob'],\n           'age': [30,25,18,26],\n           'sex':['male','male','female','male']})\n\nrow = ['45', 'Dean', 'male']\n# add the row at top in df\ndf.loc[-1] = row\ndf.index = df.index + 1\n# resort the index by inplace\ndf.sort_index(inplace=True)", "error": "", "token_usage": [[274, 182]], "time_usage": [5.273481607437134]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "# [start]\n# apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Apply a function along an axis of the DataFrame.\n# assign(self, **kwargs) -> 'DataFrame': Assign new columns to a DataFrame.\n# [end]\nimport pandas as pd\n\ndef set_value_to_entire_col(df, value):\n    # Set value to an entire column `B` of a pandas dataframe\n    # Return the changed dataframe.\n    df['B'] = value\n    return df", "error": "", "token_usage": [[216, 130]], "time_usage": [4.292623281478882]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "intersection_result = s1.intersection(s2)", "error": "", "token_usage": [[242, 13]], "time_usage": [1.0031063556671143]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "# [start]\n# slice(self, start=None, stop=None, step=None): Slice substrings from each element in the Series or Index.\n# transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'FrameOrSeriesUnion': Call ``func`` on self producing a Series with transformed values.\n# [end]\nimport pandas as pd\n\ndef get_first_n_rows(df, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return df[:n]", "error": "", "token_usage": [[220, 128]], "time_usage": [4.072643280029297]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "# [start]\n# sum(self, axis: 'int' = 0, min_count: 'int' = 0, *args, **kwargs) -> 'Scalar': Sum of non-NA/null values.\n# nansum(values: 'np.ndarray', *, axis: 'int | None' = None, skipna: 'bool' = True, min_count: 'int' = 0, mask: 'np.ndarray | None' = None) -> 'float': Sum the elements along an axis ignoring NaNs.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that ignoring the NaN values\n\ndf['Fruit Total'] = df.sum(axis=1, skipna=True)\ndf", "error": "", "token_usage": [[304, 223]], "time_usage": [6.1429760456085205]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "# [start]\n# applymap(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame': Apply a function to a Dataframe elementwise.\n# itertuples(self, index: 'bool' = True, name: 'str | None' = 'Pandas') -> 'Iterable[tuple[Any, ...]]': Iterate over DataFrame rows as namedtuples.\n# [end]\nimport pandas as pd\nimport numpy as np\n\ndef find_non_numeric_rows(df):\n    # Finding non-numeric rows in dataframe in pandas\n    # Return the raws that contain non-numeric values\n    # So to get the subDataFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    return df[~df.applymap(np.isreal).all(1)]", "error": "", "token_usage": [[274, 192]], "time_usage": [5.83523154258728]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "# [start]\n# combine(self, other: 'DataFrame', func, fill_value=None, overwrite: 'bool' = True) -> 'DataFrame': Perform column-wise combine with another DataFrame.\n# merge_ordered(left: 'DataFrame', right: 'DataFrame', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_by=None, right_by=None, fill_method: 'str | None' = None, suffixes: 'Suffixes' = ('_x', '_y'), how: 'str' = 'outer') -> 'DataFrame': Perform merge with optional filling/interpolation.\n# [end]\nimport pandas as pd\n\ndf1 = pd.DataFrame({'staff':[1,4], 'company':[100,301]})\ndf2 = pd.DataFrame({'person':[1,2], 'company':[100,300]})\n# merge the above two dataframes on column 'company'\nmerged_df = df1.merge(df2, on='company')", "error": "", "token_usage": [[307, 219]], "time_usage": [6.145908355712891]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "count_series = df.isna().sum()", "error": "", "token_usage": [[201, 14]], "time_usage": [1.0169055461883545]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "# [start]\n# Term(where, queryables: 'dict[str, Any] | None' = None, encoding=None, scope_level: 'int' = 0): Hold a pytables-like expression, comprised of possibly multiple 'terms'.\n# isna(self) -> 'np.ndarray': Boolean NumPy array indicating if each value is missing.\n# [end]\nimport pandas as pd\ndf = pd.DataFrame({'col': [\"apple\",\n                           \"pear\",\n                           \"strawberry\"]})\ntargets = ['apple', 'banana']\n# Any word from `targets` are present in sentence.\nresult = df['col'].isin(targets)", "error": "", "token_usage": [[225, 134]], "time_usage": [3.9256575107574463]}
{"task_id": "PandasEval/34", "success": true, "generated_code": "# [start]\n# groupby(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, dropna: 'bool' = True) -> 'DataFrameGroupBy': Group DataFrame using a mapper or by a Series of columns.\n# sum(self, axis: 'int' = 0, min_count: 'int' = 0, *args, **kwargs) -> 'Scalar': Sum of non-NA/null values.\n# [end]\nimport pandas as pd\n\ndef f(x):\n    a = x['Value'].iat[2] - x['Value'].iat[1]\n    b = x['Value'].iat[3] - x['Value'].iat[0]\n    c = x['ID'].iat[2] + ' - ' + x['ID'].iat[1]\n    d = x['ID'].iat[3] + ' - ' + x['ID'].iat[0]\n    return pd.DataFrame({'Value': [a,b], 'ID':[c,d]})\n\ndef calculate_row_diff_groupwise(df):\n    # I need to calculate the difference between two rows groupwise using pandas.\n    # To calculate the sum I would use pandas.groupby('Group').sum(), but how do you calculate the difference between rows where the row ordering is important?\n    # I think we need custom function with apply which return DataFrame for each group, for select by position is used iat:\n    # Return the result\n    return df.groupby('Group').apply(f)", "error": "", "token_usage": [[456, 368]], "time_usage": [9.394394636154175]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "# [start]\n# mean(self, axis=0, *args, **kwargs): Mean of non-NA/null values.\n# mad(self, axis=None, skipna=None, level=None): Return the mean absolute deviation of the values over the requested axis.\n# [end]\nimport pandas as pd\n\ndef normalize(df):\n    # Normalization using pandas\n    # We simply subtract the mean and divide by standard deviation on df.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized dataframe\n    df_normalized = (df - df.mean()) / df.std()\n    return df_normalized", "error": "", "token_usage": [[208, 129]], "time_usage": [3.9481191635131836]}
