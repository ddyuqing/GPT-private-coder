{"task_id": "PandasEval/0", "success": true, "generated_code": "import monkey as mk\n\ndef compute_average_along_rows(kf):\n    # You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.\n    # Finally, return the knowledgeframe with the new column.\n    kf['average_along_rows'] = kf.mean(axis=1)\n    return kf", "error": "", "token_usage": [[170, 90]], "time_usage": [3.330312967300415]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "import monkey as mk\n\ndef select_rows_from_column(kf, col_name, values):\n    # How do I select rows from a KnowledgeFrame kf based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    return kf[kf[col_name].isin(values)]", "error": "", "token_usage": [[156, 69]], "time_usage": [2.720233678817749]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "import monkey as mk\n\ndef change_col_names_of_kf(kf, origin_names, new_names):\n    \"\"\"\n    How do I change the column labels of kf\uff1f\n    And return the knowledgeframe that has been renamed\n    \"\"\"\n    kf = kf.rename(columns=dict(zip(origin_names, new_names)))\n    return kf", "error": "", "token_usage": [[147, 69]], "time_usage": [2.550165891647339]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "import monkey as mk\n\ndef delete_column(kf, column_name):\n    # deleting a column from a Monkey KnowledgeFrame\n    # return the changed knowledgeframe\n    kf = mk.delete_column(kf, column_name)\n    return kf", "error": "", "token_usage": [[136, 53]], "time_usage": [2.314319133758545]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "import monkey as mk\n\ndef select_multiple_columns(kf, columns):\n    \"\"\"\n    How do I select the given columns and return the new KnowledgeFrame?\n    \"\"\"\n    # Use the select_columns method from the monkey module to select the given columns\n    new_kf = mk.select_columns(kf, columns)\n    \n    # Return the new KnowledgeFrame\n    return new_kf", "error": "", "token_usage": [[132, 82]], "time_usage": [3.3829643726348877]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_count(kf):\n    \"\"\"\n    Return the row count of kf\n    \"\"\"\n    return kf.get_row_count()", "error": "", "token_usage": [[126, 35]], "time_usage": [1.766765832901001]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "import monkey as mk\n\ndef get_list_from_knowledgeframe(kf):\n    # I want to get a list of the column headers from a Monkey KnowledgeFrame. \n    # The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return list(kf.columns)", "error": "", "token_usage": [[175, 84]], "time_usage": [3.112647771835327]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "import monkey as mk\n\ndef add_column_to_knowledgeframe(kf, column_name, column_data):\n    # How to add a new column to an existing KnowledgeFrame?\n    # I would like to add a new column data with the column name, to the existing knowledgeframe\n    kf[column_name] = column_data", "error": "", "token_usage": [[159, 70]], "time_usage": [2.743333578109741]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "import monkey as mk\n\ndef change_all_cols_type(kf):\n    # Change all columns type of KnowledgeFrame to numeric\n    # And return the new KnowledgeFrame\n    # The code is:\n    kf = kf.astype(float)\n    return kf", "error": "", "token_usage": [[142, 55]], "time_usage": [2.4440813064575195]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef sip_rows_col_nan(kf, col_name):\n    # How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN\n    return kf[kf[col_name].isnull()]", "error": "", "token_usage": [[143, 55]], "time_usage": [4.7604334354400635]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "from typing import List\nimport monkey as mk\nimport numpy as np\n\ndef adding_in_knowledgeframe(kf, list_to_add, column_name_list) -> mk.KnowledgeFrame:\n    \"\"\"    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    \"\"\"\n    # Convert the list to a numpy array\n    array_to_add = np.array(list_to_add)\n\n    # Get the number of rows in the knowledgeframe\n    num_rows = kf.shape[0]\n\n    # Check if the number of rows in the knowledgeframe matches the length of the list to add\n    if num_rows != len(list_to_add):\n        raise ValueError(\"The number of rows in the knowledgeframe does not match the length of the list to add.\")\n\n    # Create a new column in the knowledgeframe for each column name in the column name list\n    for column_name in column_name_list:\n        kf[column_name] = array_to_add\n\n    # Return the updated knowledgeframe\n    return kf", "error": "", "token_usage": [[194, 243]], "time_usage": [7.354110240936279]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "import monkey as mk\n\ndef extract_the_last_year(kf, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.\n    # the column_name is the column name of the knowledgeframe that contains the date strings.\n    # return the numerical Collections obj of the last year.\n    \n    # Split the fiscal date string by the hyphen\n    date_parts = kf[column_name].split('-')\n    \n    # Extract the last two digits of the year\n    last_year = int(date_parts[1])\n    \n    # Check if it is the end of the century\n    if last_year == 99:\n        # Add 1 to the first two digits\n        first_year = int(date_parts[0]) + 1\n        last_year = str(first_year) + '00'\n    \n    return last_year", "error": "", "token_usage": [[227, 239]], "time_usage": [7.840945482254028]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "import monkey as mk\n\ndef get_last_n_rows(kf, n):\n    # How to get the last N rows of a monkey KnowledgeFrame?\n    return kf.tail(n)", "error": "", "token_usage": [[132, 40]], "time_usage": [2.2862801551818848]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "import monkey as mk\n\ndef get_values_at_nth_rows(kf, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    \"\"\"\n    return kf[column_name][n]", "error": "", "token_usage": [[149, 59]], "time_usage": [2.4931564331054688]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "import monkey as mk\n\ndef creating_kf_with_same_as_other(kf_original):\n    # creating a new knowledgeframe of all same with kf_original one, but no any rows\n    # return the new knowledgeframe\n    new_kf = mk.KnowledgeFrame(kf_original.columns)\n    return new_kf", "error": "", "token_usage": [[147, 69]], "time_usage": [2.7151687145233154]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_kf = kf.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "error": "", "token_usage": [[291, 34]], "time_usage": [1.7013475894927979]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "import monkey as mk\n\n# creating a Collections from a list [56, 24, 421, 90]\nmy_collections = mk.Collections([56, 24, 421, 90])", "error": "", "token_usage": [[128, 45]], "time_usage": [2.08543062210083]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# Using `clip` function in monkey.\nkf.loc[kf['col_0']=='a','col_1'] = kf.loc[kf['col_0']=='a','col_1'].clip(-2, 2)", "error": "", "token_usage": [[223, 51]], "time_usage": [2.191960573196411]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "kf = kf.apply(lambda x: x.where(x > x.mean(), np.nan).ffill())", "error": "", "token_usage": [[231, 24]], "time_usage": [1.3523008823394775]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "unionerd_collections = target_collections.append(source_collections, ignore_index=True)", "error": "", "token_usage": [[173, 18]], "time_usage": [1.2801427841186523]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "nan_kf = kf[kf['x2'].isnull()]", "error": "", "token_usage": [[214, 18]], "time_usage": [1.3252301216125488]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "import monkey as mk\n\na = [['a', '1.2'], ['b', '70'], ['x', '5']]\n# I want to convert a table, represented as a list of lists, into a monkey KnowledgeFrame.\n# The columns are ['one', 'two']\n# What is the best way to convert the columns to the appropriate types, in this case the 'two' column into floats?\n\n# Create an empty KnowledgeFrame\nkf = mk.KnowledgeFrame()\n\n# Extract the column names from the first sublist in 'a'\ncolumns = a[0]\n\n# Add the columns to the KnowledgeFrame\nkf.add_columns(columns)\n\n# Iterate over the remaining sublists in 'a'\nfor sublist in a[1:]:\n    # Convert the second element in each sublist to float and add the sublist as a row to the KnowledgeFrame\n    kf.add_row([sublist[0], float(sublist[1])])\n\n# Print the resulting KnowledgeFrame\nprint(kf)", "error": "", "token_usage": [[188, 205]], "time_usage": [6.887424468994141]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "# I need to change the dtype of multiple columns but the knowledgeframe has different kind of dtypes. \n# Some columns dtypes are float64 whereas some columns are int64\n# I need to change all float64 to float32.\ncols = my_kf.get_columns()\nfor col in cols:\n    if my_kf.get_dtype(col) == np.float64:\n        my_kf.change_dtype(col, np.float32)", "error": "", "token_usage": [[199, 92]], "time_usage": [3.546865940093994]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "new_kf = kf[kf['col2'] == 'Jimmy']", "error": "", "token_usage": [[189, 19]], "time_usage": [1.2583255767822266]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\nkf = kf.reseting_index()  # make sure indexes pair with number of rows\n# (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)\n# for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\nfor index, row in kf.traversal():\n    rows_dict[row['MSRA']] = row['THU']", "error": "", "token_usage": [[235, 160]], "time_usage": [5.136937856674194]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a knowledgeframe in monkey where each column has different value range.\n# Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?\n\ndef normalize(kf):\n    normalized_kf = {}\n    for column in kf.columns:\n        min_val = min(kf[column])\n        max_val = max(kf[column])\n        normalized_column = [(val - min_val) / (max_val - min_val) for val in kf[column]]\n        normalized_kf[column] = normalized_column\n    return normalized_kf\n\nnormalized_kf = normalize(kf)", "error": "", "token_usage": [[182, 164]], "time_usage": [5.409303426742554]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "import monkey as mk\n\n# I want to create a knowledgeframe with one of the column as a list or array.\nkf = mk.KnowledgeFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\nkf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\nkf['Email'][0] = emails", "error": "", "token_usage": [[201, 113]], "time_usage": [4.120649814605713]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "import monkey as mk\n\ndef is_kf_exist(kf):\n    # In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.\n    # Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.\n    \n    if kf is not None:\n        # The monkey KnowledgeFrame is not None, which means it has been created.\n        return True\n    else:\n        # The monkey KnowledgeFrame is None, which means it has not been created yet.\n        return False", "error": "", "token_usage": [[161, 117]], "time_usage": [4.017890453338623]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "n_kf = kf[kf['line_num'] != 0]", "error": "", "token_usage": [[187, 19]], "time_usage": [1.3183300495147705]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "import monkey as mk\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\nkf = mk.KnowledgeFrame(web_stats)\n# I would like to sip all data in a monkey knowledgeframe\n# Using kf.index to sip all rows\n\ndef sip_all_data(kf):\n    \"\"\"\n    Sips all data in a Monkey KnowledgeFrame.\n    \n    Parameters:\n    kf (Monkey KnowledgeFrame): The Monkey KnowledgeFrame object.\n    \n    Returns:\n    None\n    \"\"\"\n    kf.index\n\nsip_all_data(kf)", "error": "", "token_usage": [[211, 169]], "time_usage": [5.611382007598877]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n# I would like to add a new column C that is the sum value of A and B cell.\n\n# Define a function to add a new column to the KnowledgeFrame\ndef add_column(kf, column_name, column_values):\n    kf[column_name] = column_values\n\n# Calculate the sum of values in columns A and B\nsum_values = [a + b for a, b in zip(kf['A'], kf['B'])]\n\n# Add the new column C to the KnowledgeFrame\nadd_column(kf, 'C', sum_values)\n\n# Print the updated KnowledgeFrame\nprint(kf)", "error": "", "token_usage": [[158, 165]], "time_usage": [5.437587022781372]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\nkf = mk.KnowledgeFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n# Move next value to first empty row monkey\n# how do i move each value from a column to the first empty \"row/cell\" in monkey?\n# use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN\n\ndef move_next_value(kf):\n    for col in kf.columns:\n        kf[col] = sorted(kf[col], key=lambda x: np.isnan(x))\n    new_kf = kf.fillna(method='ffill')\n    return new_kf", "error": "", "token_usage": [[224, 173]], "time_usage": [5.448027849197388]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "import monkey as mk\n\ndef make_knowledgeframe_column_headers_lowercase(data):\n    # I want to make all column headers in my monkey data frame lower case\n    data.columns = [col.lower() for col in data.columns]", "error": "", "token_usage": [[134, 50]], "time_usage": [2.2903549671173096]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "first_value = kf['a'].nsmallest(1).iloc[0]", "error": "", "token_usage": [[185, 21]], "time_usage": [1.348393201828003]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "unique_ndarray = np.unique(kf.values.flat_underlying)", "error": "", "token_usage": [[227, 17]], "time_usage": [1.3128035068511963]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "final_item_kf = kf.sort_values('date', ascending=False).groupby('id').first()", "error": "", "token_usage": [[305, 25]], "time_usage": [1.5339033603668213]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "import monkey as mk\n\ndef sip2rows_zero(kf):\n    # i want to sip 2 rows in the knowledgeframe if zero comes in the column\n    # if 0 comes on odd index sip previous row as well as current row using monkey\n    # Assuming your knowledgeframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = kf[(kf['column2'] == 0) & (kf.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.adding(idx-1)\n    # A new knowledgeframe with those rows removed\n    new_kf = kf.drop(idx)\n    return new_kf", "error": "", "token_usage": [[237, 154]], "time_usage": [5.097106456756592]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef shift_column_up_by_one(kf):\n    # Shift column in monkey knowledgeframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.\n    kf['gdp'] = np.roll(kf['gdp'], -1)\n    return kf", "error": "", "token_usage": [[160, 84]], "time_usage": [3.665562391281128]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "new_kf = kf.select_dtypes(include=np.float64)", "error": "", "token_usage": [[182, 17]], "time_usage": [1.2986688613891602]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    # Specially, we can set left_index and right_index to True\n    \n    # Example 1: Using the unioner function from the monkey module\n    unioned_kf = mk.unioner(kf1, kf2, left_index=True, right_index=True)\n    \n    # Example 2: Using the pandas library\n    import pandas as pd\n    unioned_kf = pd.merge(kf1, kf2, left_index=True, right_index=True)\n    \n    return unioned_kf", "error": "", "token_usage": [[302, 293]], "time_usage": [8.907105922698975]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1, 2, 3],'B': [100, 300, 500],'C': list('abc')})\n\n# How can I delete multiple columns in one pass?\n# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\nnew_kf = kf.drop(['A', 'C'], axis=1)", "error": "", "token_usage": [[185, 99]], "time_usage": [3.5021958351135254]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "import monkey as mk\n\ndef get_value_counts(kf):\n    # I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a monkey knowledgeframe.\n    # Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index\n    # return the final knowledgeframe\n    counts = kf.count_values().renaming_axis('distinctive_values').reset_index(name='counts')\n    return counts", "error": "", "token_usage": [[193, 120]], "time_usage": [4.0101869106292725]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "# You can change the column labels of a monkey KnowledgeFrame by assigning a new list of labels to the 'columns' attribute.\ndata.columns = ['a', 'b', 'c']", "error": "", "token_usage": [[175, 42]], "time_usage": [1.9064092636108398]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "import monkey as mk\n\ndef make_kf_all_cols_lower(data):\n    # I want to make all column headers in my monkey data frame lower case\n    # Return the changed knowledgeframe\n    data.columns = [col.lower() for col in data.columns]\n    return data", "error": "", "token_usage": [[141, 61]], "time_usage": [2.273507595062256]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample_by_num = kf.groupby(\"section\").sample_by_num(n=50)", "error": "", "token_usage": [[256, 20]], "time_usage": [1.2032968997955322]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "def remove_numbers_from_column(column):\n    \"\"\"\n    Removes all the numbers from the given column in the KnowledgeFrame.\n    \n    Args:\n    column (str): The name of the column to remove numbers from.\n    \n    Returns:\n    None\n    \"\"\"\n    kf[column] = [name for name in kf[column] if not any(char.isdigit() for char in name)]", "error": "", "token_usage": [[225, 79]], "time_usage": [2.956570625305176]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'num': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n\n# How do I find all rows in a monkey KnowledgeFrame which have the max value for 'num' column, after grouping by 'Mt' column?\nnew_kf = kf.groupby('Mt').filter(lambda x: x['num'] == x['num'].max())", "error": "", "token_usage": [[292, 214]], "time_usage": [6.683444023132324]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "import pandas as pd\n\nkf['date'] = pd.to_datetime(kf['date'], errors='coerce')", "error": "", "token_usage": [[205, 27]], "time_usage": [1.5574655532836914]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef if_any_value_is_nan(kf):\n    # How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.\n    result = kf.isnull().values.any()\n    return result", "error": "", "token_usage": [[141, 57]], "time_usage": [2.320605993270874]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "import monkey as mk\n\ndef sorting_columns_based_on_column_name(kf):\n    # Sorting columns in monkey knowledgeframe based on column name\n    # Note that axis is one\n    kf.sort_index(axis=1, inplace=True)", "error": "", "token_usage": [[138, 51]], "time_usage": [8.162628889083862]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef get_value_when_condition(kf):\n    # How can I get the values of column `A` when column `B`=3?\n    values = kf[kf['B'] == 3]['A']\n    return values", "error": "", "token_usage": [[140, 61]], "time_usage": [2.360997200012207]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "import monkey as mk\n\ndef get_average_in_column(kf, col_name):\n    # return the column average/mean\n    return kf[col_name].mean()", "error": "", "token_usage": [[127, 37]], "time_usage": [2.3404507637023926]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "import monkey as mk\n\ndef combine_kf(kf1, kf2):\n    \"\"\"\n    How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.\n    \"\"\"\n    return mk.concat([kf1, kf2], ignore_index=True)", "error": "", "token_usage": [[138, 58]], "time_usage": [2.4538815021514893]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "import monkey as mk\n\n# This is my KnowledgeFrame that should be repeated for 5 times:\nx = mk.KnowledgeFrame({'a':1,'b':2}, index = range(1))\n# I haven't found anything practical, including those like np.repeat ---- it just doesn't work on a KnowledgeFrame.\n# You can use the concating function:\nrepeated_x = mk.concat([x] * 5)", "error": "", "token_usage": [[180, 91]], "time_usage": [3.2505879402160645]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "import monkey as mk\n\ndef knowledgeframe2list_of_dict(kf):\n    # Monkey KnowledgeFrame to List of Dictionaries\n    # Use kf.convert_dict() to solve it and return the result\n    return kf.convert_dict()", "error": "", "token_usage": [[143, 51]], "time_usage": [2.131675958633423]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "import monkey as mk\n\ndef convert_column_to_date(kf):\n    # Convert Column `Date` to Date Format using monkey function\n    # return the converted knowledgeframe\n    kf['Date'] = mk.convert_to_date(kf['Date'])\n    return kf", "error": "", "token_usage": [[138, 58]], "time_usage": [2.3639488220214844]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "import monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    # Return the result\n    \n    count = 0\n    result = []\n    \n    for value in y:\n        if value == 1:\n            count += 1\n        else:\n            count = 0\n        result.append(count)\n    \n    return result", "error": "", "token_usage": [[216, 167]], "time_usage": [5.326017141342163]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "import monkey as mk\n\ndef insert_row_at_arbitrary_in_knowledgeframe(kf, row_to_insert):\n    \"\"\"\n    Inserts a row into a knowledgeframe at a specified row with no ignore index, and sort & reset the index with sip=True. \n    Returns the new knowledgeframe.\n    \"\"\"\n    kf = kf.append(row_to_insert, ignore_index=False)\n    kf = kf.sort_index().reset_index(drop=True)\n    return kf", "error": "", "token_usage": [[164, 94]], "time_usage": [3.639047384262085]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "import monkey as mk\n\ndef get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to knowledgeframe?\n    # Return the knowledgeframe\n    \n    # Create an empty knowledgeframe\n    knowledgeframe = mk.KnowledgeFrame()\n    \n    # Extract the header from the list_of_lists\n    header = list_of_lists[0]\n    \n    # Add the header as columns to the knowledgeframe\n    for column in header:\n        knowledgeframe.add_column(column)\n    \n    # Extract the rows from the list_of_lists\n    rows = list_of_lists[1:]\n    \n    # Add the rows as records to the knowledgeframe\n    for row in rows:\n        knowledgeframe.add_record(row)\n    \n    # Return the knowledgeframe\n    return knowledgeframe", "error": "", "token_usage": [[182, 208]], "time_usage": [6.659657001495361]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "import monkey as mk\n\nkf1 = mk.KnowledgeFrame({'a': [0, 1], 'b': [5, 3]})\nkf2 = mk.KnowledgeFrame({'c': [0, 1], 'd': [10, 20]})\n# How do I unioner two knowledgeframes by index?\n# Set left&right indexs to True\nunionerd_kf = kf1.union(kf2, left_index=True, right_index=True)", "error": "", "token_usage": [[183, 101]], "time_usage": [3.494934558868408]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "kf_string = kf.to_string(index=False)\nprint(kf_string)", "error": "", "token_usage": [[164, 18]], "time_usage": [1.3007047176361084]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef sip_all_nan_rows(kf):\n    # We will sip all Nan rows.\n    # Return the changed knowledgeframe.\n    kf = kf[~np.isnan(kf).any(axis=1)]\n    return kf", "error": "", "token_usage": [[137, 59]], "time_usage": [2.374481439590454]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "import monkey as mk\n\ndef is_contain_particular_value(collections, value):\n    # How to determine whether a Monkey Column contains a particular value?\n    # Return the result\n    return value in collections", "error": "", "token_usage": [[139, 47]], "time_usage": [1.963956356048584]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "import monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    kf.columns = [new_name if col == old_name else col for col in kf.columns]\n    return kf", "error": "", "token_usage": [[139, 57]], "time_usage": [2.4170124530792236]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "import monkey as mk\n\ndef remove_duplicates_by_column(kf, col1, col2):\n    # I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    kf.drop_duplicates(subset=col1, keep='last', inplace=True)\n    return kf", "error": "", "token_usage": [[172, 87]], "time_usage": [3.1902897357940674]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "import monkey as mk\n\ndef create_empty_kf(col_names):\n    # Monkey create empty KnowledgeFrame with only column names\n    # Return: KnowledgeFrame\n    return mk.KnowledgeFrame(col_names)", "error": "", "token_usage": [[134, 45]], "time_usage": [1.9822425842285156]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "import monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf.drop(kf.index[:n])", "error": "", "token_usage": [[157, 69]], "time_usage": [2.625340223312378]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "import monkey as mk\n\ndef remove_duplicates_by_col_names(kf):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    \"\"\"\n    # Get the list of column names\n    col_names = kf.columns\n    \n    # Find the duplicate column names\n    duplicate_cols = set([col for col in col_names if col_names.count(col) > 1])\n    \n    # Remove the duplicate columns\n    kf = kf.drop(columns=duplicate_cols)\n    \n    # Return the modified knowledgeframe\n    return kf", "error": "", "token_usage": [[142, 121]], "time_usage": [4.330914258956909]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "import monkey as mk\n\ndef convert_bool_to_int(kf, col_name):\n    \"\"\"\n    How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n    Return the knowledgeframe with the column converted to int\n    \"\"\"\n    kf[col_name] = kf[col_name].astype(int)\n    return kf", "error": "", "token_usage": [[151, 72]], "time_usage": [2.663348913192749]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "import monkey as mk\n\ndef get_number_columns(kf):\n    # How do I retrieve the number of columns in a Monkey data frame?\n    # Return the number of columns in the knowledgeframe\n    return kf.shape[1]", "error": "", "token_usage": [[142, 51]], "time_usage": [2.2007503509521484]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_columns_name_lists(kf):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    nan_columns = kf.columns[kf.isna().any()].tolist()\n    return nan_columns", "error": "", "token_usage": [[161, 83]], "time_usage": [3.103935480117798]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "result = kf.tail(N)", "error": "", "token_usage": [[169, 10]], "time_usage": [0.9822919368743896]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef replacing_blank_with_nan(kf):\n    # replace field that's entirely space (or empty) with NaN using regex\n    kf = kf.replace(r'^\\s*$', np.nan, regex=True)\n    # return the result\n    return kf", "error": "", "token_usage": [[143, 66]], "time_usage": [2.7610509395599365]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef fill_none_with_zero(kf, col_names):\n    # Monkey knowledgeframe fillnone() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed knowledgeframe\n    kf.fillnone(col_names, 0)\n    return kf", "error": "", "token_usage": [[156, 72]], "time_usage": [2.823357105255127]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "import monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    return mk.concat([kf1, kf2])", "error": "", "token_usage": [[147, 51]], "time_usage": [2.2739691734313965]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "import monkey as mk\n\ndef extract_first_and_last_kf(kf):\n    # Extract first and last row of a knowledgeframe in monkey\n    # Return the knowledgeframe with the first and last row\n    first_row = kf.iloc[0]\n    last_row = kf.iloc[-1]\n    return kf.iloc[[0, -1]]", "error": "", "token_usage": [[144, 74]], "time_usage": [2.7489333152770996]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef display_rows_with_gt_1_nan(kf):\n    # Return the knowledgeframe with the rows with one or more NaN values\n    return kf[kf.isnull().sum(axis=1) > 0]", "error": "", "token_usage": [[139, 58]], "time_usage": [2.47228741645813]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_index_values_as_list(kf):\n    # Return the row-index values of the knowledgeframe as a list\n    return kf.index.tolist()", "error": "", "token_usage": [[132, 40]], "time_usage": [1.897045612335205]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.\n# Is there any way to do this more nicely? \n# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?\n\n# Check if the column 'mycol' exists in the knowledgeframe\nif 'mycol' in kf.columns:\n    # Output the second row of data in 'mycol' column if it exists, otherwise output NaN\n    value = kf['mycol'][1] if len(kf['mycol']) > 1 else np.nan\nelse:\n    value = np.nan", "error": "", "token_usage": [[237, 162]], "time_usage": [5.170773267745972]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "import monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = 0\n    for item in collections:\n        if item == value:\n            count += 1\n    return count", "error": "", "token_usage": [[139, 69]], "time_usage": [2.7440922260284424]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "import monkey as mk\n\ndef find_col_a_gt_col_b_rows(kf, col_a, col_b):\n    # Find rows in kf where col_a > col_b\n    # Return the rows\n    rows = []\n    for row in kf:\n        if row[col_a] > row[col_b]:\n            rows.append(row)\n    return rows", "error": "", "token_usage": [[143, 75]], "time_usage": [2.851137161254883]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "import monkey as mk\n\ndef sip_consecutive_duplicates(collections):\n    # Drop consecutive duplicates\n    result = []\n    for i in range(len(collections)):\n        if i == 0 or collections[i] != collections[i-1]:\n            result.append(collections[i])\n    # Return the result\n    return result", "error": "", "token_usage": [[127, 69]], "time_usage": [2.731027603149414]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "import monkey as mk\n\ndef value_round_a_single_column(kf):\n    # Round a single column `A`\n    # Return the knowledgeframe\n    kf['A'] = kf['A'].round()\n    return kf", "error": "", "token_usage": [[132, 50]], "time_usage": [2.2325921058654785]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "import monkey as mk\n\ndef add_zeros_to_string(kf, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Monkey Dataframe\n    # The maximum length of the string is 15\n    # Return the knowledgeframe\n    kf[col_name] = kf[col_name].apply(lambda x: str(x).zfill(15))\n    return kf", "error": "", "token_usage": [[155, 83]], "time_usage": [3.422337293624878]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "import monkey as mk\n\ndef adding_dict_to_kf(kf, dictionary):\n    # adding dictionary to data frame\n    kf = kf.append(dictionary, ignore_index=True)\n    # return the data frame\n    return kf", "error": "", "token_usage": [[133, 50]], "time_usage": [2.1003365516662598]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "import monkey as mk\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    # return pydatetime object\n    import datetime\n    return datetime.datetime.fromtimestamp(timestamp)", "error": "", "token_usage": [[131, 45]], "time_usage": [1.849353551864624]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "import monkey as mk\n\ndef getting_percentage_of_each_gender(collections):\n    # Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    total = sum(collections.values())\n    percentages = {key: (value / total) * 100 for key, value in collections.items()}\n    return percentages", "error": "", "token_usage": [[147, 83]], "time_usage": [2.9068541526794434]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "import monkey as mk\n\ndef divide_multiple_cols_by_first_col(kf):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.\n    # Return the result.\n    kf[['B', 'C']] = kf[['B', 'C']].div(kf['A'], axis=0)\n    return kf", "error": "", "token_usage": [[154, 84]], "time_usage": [3.1342556476593018]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef ceiling_of_collections(s):\n    # ceiling of a monkey collections\n    # Return the result.\n    return np.ceil(s)", "error": "", "token_usage": [[132, 40]], "time_usage": [1.8446097373962402]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef delete_all_nan_columns(kf):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    kf = kf.dropna(axis=1, how='all')\n    return kf", "error": "", "token_usage": [[137, 57]], "time_usage": [2.2902140617370605]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "# add the row at top in kf\nkf.loc[-1] = row\nkf.index = kf.index + 1\n# resort the index by inplace\nkf.sort_index(inplace=True)", "error": "", "token_usage": [[196, 43]], "time_usage": [1.8935017585754395]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "import monkey as mk\n\ndef set_value_to_entire_col(kf, value):\n    # Set value to an entire column `B` of a monkey knowledgeframe\n    # Return the changed knowledgeframe.\n    kf['B'] = value\n    return kf", "error": "", "token_usage": [[144, 58]], "time_usage": [2.2774314880371094]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "import monkey as mk\n\ns1 = mk.Collections([3,4,5])\ns2 = mk.Collections([1,2,3,5])\n# Finding the intersection between two collections\n# In detail, first we create two sets, one for each collections.\n# Then we find the intersection of the two sets.\ns1, s2 = set(s1), set(s2)\ninterst_result = s1.intersection(s2)", "error": "", "token_usage": [[185, 93]], "time_usage": [3.2607052326202393]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "import monkey as mk\n\ndef getting_first_n_rows(kf, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return kf[:n]", "error": "", "token_usage": [[141, 49]], "time_usage": [1.981062412261963]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that ignoring the NaN values\n\ndef add_fruit_total(kf):\n    kf['Fruit Total'] = kf.sum(axis=1, skipna=True)\n    return kf\n\nkf = add_fruit_total(kf)", "error": "", "token_usage": [[192, 131]], "time_usage": [4.22984504699707]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef find_non_numeric_rows(kf):\n    # Finding non-numeric rows in knowledgeframe in monkey\n    # Return the raws that contain non-numeric values\n    # So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    return kf[~np.isfinite(kf).all(1)]", "error": "", "token_usage": [[184, 101]], "time_usage": [3.479886531829834]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "import monkey as mk\n\nkf1 = mk.KnowledgeFrame({'staff':[1,4], 'company':[100,301]})\nkf2 = mk.KnowledgeFrame({'person':[1,2], 'company':[100,300]})\n# unioner the above two knowledgeframes on column 'company'\nunioned_kf = kf1.union(kf2, on='company')", "error": "", "token_usage": [[167, 80]], "time_usage": [2.9072766304016113]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'A':[1,4], 'B':[np.nan,301]})\n# # counting the number of missing/NaN in each column\n# Get a collections with the number of missing/NaN in each column\ncount_collections = kf.isnull().sum()", "error": "", "token_usage": [[164, 72]], "time_usage": [2.9197564125061035]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "import monkey as mk\nkf = mk.KnowledgeFrame({'col': [\"apple\",\n                           \"pear\",\n                           \"strawberry\"]})\ntargets = ['apple', 'banana']\n# Any word from `targets` are present in sentence.\nresult = kf.filter(lambda x: any(word in x for word in targets))", "error": "", "token_usage": [[152, 68]], "time_usage": [2.3932693004608154]}
{"task_id": "PandasEval/34", "success": true, "generated_code": "import monkey as mk\n\ndef f(x):\n    a = x['Value'].iat[2] - x['Value'].iat[1]\n    b = x['Value'].iat[3] - x['Value'].iat[0]\n    c = x['ID'].iat[2] + ' - ' + x['ID'].iat[1]\n    d = x['ID'].iat[3] + ' - ' + x['ID'].iat[0]\n    return mk.KnowledgeFrame({'Value': [a,b], 'ID':[c,d]})\n\ndef calculate_row_diff_groupwise(kf):\n    # I need to calculate the difference between two rows groupwise using monkey.\n    # To calculate the total_sum I would use monkey.grouper('Group').total_sum(), but how do you calculate the difference between rows where the row ordering is important?\n    # I think we need custom function with employ which return KnowledgeFrame for each group, for select by position is used iat:\n    # Return the result\n    \n    # Calculate the difference between rows groupwise\n    result = kf.groupby('Group').apply(f)\n    \n    # Return the result\n    return result", "error": "", "token_usage": [[313, 247]], "time_usage": [7.270652532577515]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "import monkey as mk\n\ndef normalize(kf):\n    # Normalization using monkey\n    # We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized knowledgeframe\n    \n    avg = mk.average(kf.iloc[:,0,-1], axis=0)\n    std = mk.standard_deviation(kf.iloc[:,0,-1], axis=0)\n    normalized_kf = (kf - avg) / std\n    \n    return normalized_kf", "error": "", "token_usage": [[153, 110]], "time_usage": [3.668581485748291]}
