{"task_id": "PandasEval/0", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\ndef compute_average_along_rows(kf):\n    # You can specify a new column named `average_along_rows` that contains the average of each row. You also need to compute the average along the rows, so use axis=1.\n    # Finally, return the knowledgeframe with the new column. \n    kf['average_along_rows'] = kf.average(axis=1)\n    return kf", "error": "", "token_usage": [[208, 129]], "time_usage": [7.685540676116943]}
{"task_id": "PandasEval/1", "success": true, "generated_code": "# [start]\n# incontain(self, values) -> 'np.ndarray': Return a boolean array where True if the value is contained in the passed values.\n# [end]\nimport monkey as mk\n\ndef select_rows_from_column(kf, col_name, values):\n    # How do I select rows from a KnowledgeFrame kf based on column values?\n    # Return rows whose column value named `col_name` is in an iterable `values`\n    \n    # Use the `incontain` method from the `monkey` module to check if the column values are contained in the passed values\n    mask = kf[col_name].incontain(values)\n    \n    # Select the rows from the KnowledgeFrame based on the created mask\n    selected_rows = kf[mask]\n    \n    return selected_rows", "error": "", "token_usage": [[192, 163]], "time_usage": [5.051994562149048]}
{"task_id": "PandasEval/2", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef change_col_names_of_kf(kf, origin_names, new_names):\n    # How do I change the column labels of kf\uff1f\n    # And return the knowledgeframe that has been renamed\n    kf.rename(columns=dict(zip(origin_names, new_names)), inplace=True)\n    return kf", "error": "", "token_usage": [[174, 95]], "time_usage": [3.167872190475464]}
{"task_id": "PandasEval/3", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\ndef delete_column(kf, column_name):\n    # deleting a column from a Monkey KnowledgeFrame\n    # return the changed knowledgeframe\n    kf.delete_column(column_name)\n    return kf", "error": "", "token_usage": [[173, 85]], "time_usage": [3.0555672645568848]}
{"task_id": "PandasEval/4", "success": true, "generated_code": "import monkey as mk\n\ndef select_multiple_columns(kf, columns):\n    # How do I select the given columns and return the new KnowledgeFrame?\n    new_kf = kf.select_columns(columns)\n    return new_kf", "error": "", "token_usage": [[132, 50]], "time_usage": [1.921600103378296]}
{"task_id": "PandasEval/5", "success": true, "generated_code": "import monkey as mk\n\ndef get_row_count(kf):\n    \"\"\"\n    Return the row count of kf\n    \"\"\"\n    return kf.get_row_count()", "error": "", "token_usage": [[126, 35]], "time_usage": [1.6145484447479248]}
{"task_id": "PandasEval/6", "success": true, "generated_code": "def get_list_from_knowledgeframe(kf):\n    # I want to get a list of the column headers from a Monkey KnowledgeFrame. \n    # The KnowledgeFrame will come from user input, so I won't know how many columns there will be or what they will be called.\n    # Return a list of the column headers.\n    return kf.columns", "error": "", "token_usage": [[202, 77]], "time_usage": [2.5422534942626953]}
{"task_id": "PandasEval/7", "success": true, "generated_code": "import monkey as mk\n\ndef add_column_to_knowledgeframe(kf, column_name, column_data):\n    # How to add a new column to an existing KnowledgeFrame?\n    # I would like to add a new column data with the column name, to the existing knowledgeframe\n\n    # Use the add_column() function from the monkey module to add a new column to the KnowledgeFrame\n    kf.add_column(column_name, column_data)", "error": "", "token_usage": [[159, 94]], "time_usage": [3.391650676727295]}
{"task_id": "PandasEval/8", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n# [end]\nimport monkey as mk\n\ndef change_all_cols_type(kf):\n    # Change all columns type of KnowledgeFrame to numeric\n    # And return the new KnowledgeFrame\n    # The code is:\n    kf.employ(mk.to_num, axis=1, raw=True)\n    return kf", "error": "", "token_usage": [[226, 148]], "time_usage": [4.392692565917969]}
{"task_id": "PandasEval/9", "success": true, "generated_code": "def sip_rows_col_nan(kf, col_name):\n    # How to sip rows of Monkey KnowledgeFrame whose value in a certain column is NaN\n    return kf.loc[kf[col_name].isna()]", "error": "", "token_usage": [[167, 46]], "time_usage": [1.9800033569335938]}
{"task_id": "PandasEval/11", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nfrom typing import List\nimport monkey as mk\nimport numpy as np\n\ndef adding_in_knowledgeframe(kf, list_to_add, column_name_list) -> mk.KnowledgeFrame:\n    \"\"\"    \n    Params:\n        kf: The knowledgeframe to add to.\n        list_to_add: The list to add.\n        column_name_list: The column names of the list to add.\n\n    Returns:\n        The knowledgeframe with the list added.\n    \"\"\"\n    # [start]\n    # KnowledgeFrame.adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n    # [end]\n    return kf.adding(list_to_add, column_name_list)", "error": "", "token_usage": [[289, 243]], "time_usage": [6.77904748916626]}
{"task_id": "PandasEval/12", "success": true, "generated_code": "# [start]\n# to_num(arg, errors='raise', downcast=None): Transform the the argumemt to the numeric type.\n# [end]\nimport monkey as mk\n\ndef extract_the_last_year(kf, column_name):\n    # I am trying to extract the last year (YY) of a fiscal date string in the format of YYYY-YY.\n    # e.g The last year of this '1999-00' would be 2000.\n    # I need a logic to include a case where if it is the end of the century then my employ method should add to the first two digits.\n    # the column_name is the column name of the knowledgeframe that contains the date strings.\n    # return the numerical Collections obj of the last year.\n    \n    # Extract the last 2 characters from the date string\n    last_year = kf[column_name].str[-2:]\n    \n    # Convert the last year to numeric type\n    last_year_numeric = mk.to_num(last_year)\n    \n    # Check if it is the end of the century\n    if last_year_numeric < 50:\n        # Add 2000 to the first two digits\n        last_year_numeric += 2000\n    else:\n        # Add 1900 to the first two digits\n        last_year_numeric += 1900\n    \n    return last_year_numeric", "error": "", "token_usage": [[260, 283]], "time_usage": [7.320249080657959]}
{"task_id": "PandasEval/13", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\ndef get_last_n_rows(kf, n):\n    # How to get the last N rows of a monkey KnowledgeFrame?\n    return kf.last_tail(n)", "error": "", "token_usage": [[176, 85]], "time_usage": [2.773914337158203]}
{"task_id": "PandasEval/14", "success": true, "generated_code": "import monkey as mk\n\ndef get_values_at_nth_rows(kf, n, column_name):\n    \"\"\"\n    how do I get the value at an nth row of a given column name in Monkey?\n    return the value\n    \"\"\"\n    # Use the get_value function from the monkey module to get the value at the nth row and column_name\n    value = kf.get_value(n, column_name)\n    return value", "error": "", "token_usage": [[149, 89]], "time_usage": [2.826570510864258]}
{"task_id": "PandasEval/15", "success": true, "generated_code": "# [start]\n# clone(self: '_IndexT', name: 'Hashable | None' = None, deep: 'bool' = False, dtype: 'Dtype | None' = None, names: 'Sequence[Hashable] | None' = None) -> '_IndexT': Create a duplicate of this object.\n# [end]\nimport monkey as mk\ndef creating_kf_with_same_as_other(kf_original):\n    # creating a new knowledgeframe of all same with kf_original one, but no any rows\n    # return the new knowledgeframe\n    return kf_original.clone()", "error": "", "token_usage": [[219, 127]], "time_usage": [3.9078376293182373]}
{"task_id": "PandasEval/20", "success": true, "generated_code": "new_kf = kf.grouper(by=['Country', 'Item_Code']).total_sum(numeric_only=True, axis=1)", "error": "", "token_usage": [[440, 31]], "time_usage": [1.4828975200653076]}
{"task_id": "PandasEval/10", "success": true, "generated_code": "# [start]\n# Collections(data=None, index=None, dtype: 'Dtype | None' = None, name=None, clone: 'bool' = False, fastpath: 'bool' = False): ndarray with axis labels in one-dimension (also time collections).\n# [end]\nimport monkey as mk\n\n# creating a Collections from a list [56, 24, 421, 90]\nmy_collections = mk.Collections([56, 24, 421, 90])", "error": "", "token_usage": [[188, 105]], "time_usage": [3.4153213500976562]}
{"task_id": "PandasEval/16", "success": true, "generated_code": "# Complete the code by using the `clip` function from the `monkey` module\nkf.loc[kf['col_0']=='a','col_1'] = mk.clip(kf.loc[kf['col_0']=='a','col_1'], -2, 2)", "error": "", "token_usage": [[223, 62]], "time_usage": [2.6847169399261475]}
{"task_id": "PandasEval/17", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# Collections(data=None, index=None, dtype: 'Dtype | None' = None, name=None, clone: 'bool' = False, fastpath: 'bool' = False): ndarray with axis labels in one-dimension (also time collections).\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\nkf = mk.KnowledgeFrame({'a': [4, 1, 7, 3], 'b': [5, 2, 9, 6], 'c': [6, 3, 2, 8]})\n# I would like to create new knowledgeframe out of the old one in a way that there will only be values that exceed the average value of the column. \n# We can compare values and then add NaNs by indexing or `where`\n# We want remove NaNs also in first rows add custom function with `sipna`\nkf = kf.where(kf > kf.mean(), np.nan).sipna()", "error": "", "token_usage": [[388, 305]], "time_usage": [8.08792519569397]}
{"task_id": "PandasEval/18", "success": true, "generated_code": "unionerd_collections = target_collections.adding(source_collections)", "error": "", "token_usage": [[206, 16]], "time_usage": [1.1275219917297363]}
{"task_id": "PandasEval/19", "success": true, "generated_code": "# Selecting rows where column x2 is NaN \nnan_kf = kf.ifnull()['x2']", "error": "", "token_usage": [[243, 83]], "time_usage": [2.9210731983184814]}
{"task_id": "PandasEval/21", "success": true, "generated_code": "kf = mk.KnowledgeFrame(data=a, columns=['one', 'two'])\nkf['two'] = kf['two'].astype(float)", "error": "", "token_usage": [[285, 32]], "time_usage": [1.5325427055358887]}
{"task_id": "PandasEval/22", "success": true, "generated_code": "# [start]\n# choose_dtypes(self, include=None, exclude=None) -> 'KnowledgeFrame': Extract a collection of columns from the KnowledgeFrame based on their dtypes.\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nmy_kf = mk.KnowledgeFrame({'col1': [1,2,3], 'col2': [1.0,2.0,3.0]})\n# I need to change the dtype of multiple columns but the knowledgeframe has different kind of dtypes. \n# Some columns dtypes are float64 whereas some columns are int64\n# I need to change all float64 to float32.\ncols = my_kf.choose_dtypes(include=np.float64).columns\nmy_kf[cols] = my_kf[cols].totype(np.float32)", "error": "", "token_usage": [[267, 200]], "time_usage": [6.597430944442749]}
{"task_id": "PandasEval/23", "success": true, "generated_code": "new_kf = kf[kf['col2'] == 'Jimmy']", "error": "", "token_usage": [[189, 19]], "time_usage": [1.2412266731262207]}
{"task_id": "PandasEval/24", "success": true, "generated_code": "# [start]\n# traversal(self) -> 'Iterable[tuple[Hashable, Collections]]': Return the rows of the KnowledgeFrame organized in (index, Collections) pairs.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'MSRA': [10, 11, 12], 'THU': [100, 110, 120]})\nkf = kf.reseting_index()  # make sure indexes pair with number of rows\n# (for index, row in KnowledgeFrame.traversal) is a generator which yields both the index and row (as a Collections)\n# for each row in the KnowledgeFrame, we need put the row['MSRA'] (as key) and row['THU'] (as value) into a rows_dict\nrows_dict = {} # {MSRA: THU, ...}\n\n# Complete the code to iterate over the rows of the KnowledgeFrame and populate the rows_dict dictionary\nfor index, row in kf.traversal():\n    rows_dict[row['MSRA']] = row['THU']", "error": "", "token_usage": [[275, 220]], "time_usage": [6.678378105163574]}
{"task_id": "PandasEval/25", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# get_min(self, *, skipna=True, **kwargs): Return the object's smallest value.\n# get_max(self, axis=None, skipna: 'bool' = True, *args, **kwargs): The Index's maximum value\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1000, 765, 800], 'B': [10, 5, 7]})\n# I have a knowledgeframe in monkey where each column has different value range.\n# Any idea how I can normalize the columns of this knowledgeframe where each value is between 0 and 1?\n\nnormalized_kf = kf.employ(lambda x: (x - kf.get_min()) / (kf.get_max() - kf.get_min()))", "error": "", "token_usage": [[290, 216]], "time_usage": [5.900859355926514]}
{"task_id": "PandasEval/26", "success": true, "generated_code": "# [start]\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\n\n# I want to create a knowledgeframe with one of the column as a list or array.\nkf = mk.KnowledgeFrame({'Name':['Juda','Pri']})\nemails = {'a@a.com','b@b.com'}\nkf['Email'] = ''\n# After you assign a list like or array like value to the columns, the column should be considered as type object\n# Now I want to assign the emails to first row and the 'Email' column\n\nkf.loc[0, 'Email'] = emails", "error": "", "token_usage": [[236, 150]], "time_usage": [4.3338282108306885]}
{"task_id": "PandasEval/28", "success": true, "generated_code": "import monkey as mk\n\ndef is_kf_exist(kf):\n    # In my code, I have several variables which can either contain a monkey KnowledgeFrame or nothing at all.\n    # Let's say I want to test and see if a certain KnowledgeFrame has been created yet or not.\n    if kf is not None:\n        return True\n    else:\n        return False", "error": "", "token_usage": [[161, 81]], "time_usage": [2.9768640995025635]}
{"task_id": "PandasEval/29", "success": true, "generated_code": "n_kf = kf[kf['line_num'] != 0]", "error": "", "token_usage": [[187, 19]], "time_usage": [1.1266114711761475]}
{"task_id": "PandasEval/30", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\nweb_stats = {'Day': [1, 2, 3, 4, 2, 6],\n             'Visitors': [43, 43, 34, 23, 43, 23],\n             'Bounce_Rate': [3, 2, 4, 3, 5, 5]}\nkf = mk.KnowledgeFrame(web_stats)\n\nkf.sip(kf.index)", "error": "", "token_usage": [[248, 134]], "time_usage": [3.9097368717193604]}
{"task_id": "PandasEval/31", "success": true, "generated_code": "import monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# Add a new column C that is the sum value of A and B cell.\nkf['C'] = kf['A'] + kf['B']\n\nkf", "error": "", "token_usage": [[158, 73]], "time_usage": [2.780862808227539]}
{"task_id": "PandasEval/32", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# ifnull(self) -> 'np.ndarray': Indicates whether values are missing in an array-like object\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\nkf = mk.KnowledgeFrame({'A': [1, 4, 7, np.nan], 'B': [np.nan, 2, 5, np.nan], 'C': [np.nan, np.nan, 3, 6]})\n# Move next value to first empty row monkey\n# how do i move each value from a column to the first empty \"row/cell\" in monkey?\n# use sorted to align non NULL data at the top, use sipna to sip all rows with all NaN\nnew_kf = kf.apply(lambda x: sorted(x, key=lambda y: np.isnan(y)), axis=0).sipna()", "error": "", "token_usage": [[320, 245]], "time_usage": [6.546759128570557]}
{"task_id": "PandasEval/33", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function\n# [end]\nimport monkey as mk\n\ndef make_knowledgeframe_column_headers_lowercase(data):\n    # I want to make all column headers in my monkey data frame lower case\n    data.columns = map(str.lower, data.columns)", "error": "", "token_usage": [[165, 78]], "time_usage": [2.8860886096954346]}
{"task_id": "PandasEval/35", "success": true, "generated_code": "kf.nbiggest(1, 'first')['a'].iloc[0]", "error": "", "token_usage": [[223, 20]], "time_usage": [1.1869409084320068]}
{"task_id": "PandasEval/36", "success": true, "generated_code": "# [start]\n# flat_underlying(self, order='C'): Flatten the underlying values into an ndarray.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame(np.random.randint(0,10,size=100).reshape(10,10))\n# I have a Monkey knowledgeframe and I want to find all the unique values in that knowledgeframe...irrespective of row/columns. \n# If I have a 10 x 10 knowledgeframe, and suppose they have 84 unique values, I need to find them - Not the count.\n# Using xx.values.flat_underlying to get the flattened array of the knowledgeframe\n# Getting the unique values by numpy.unique\nunique_ndarray = np.unique(kf.values.flat_underlying())", "error": "", "token_usage": [[253, 164]], "time_usage": [4.87602686882019]}
{"task_id": "PandasEval/37", "success": true, "generated_code": "final_item_kf = kf.sort_the_values(by='date', ascending=True).grouper(by='id').final_item(-1)", "error": "", "token_usage": [[506, 32]], "time_usage": [1.6581213474273682]}
{"task_id": "PandasEval/38", "success": true, "generated_code": "def sip2rows_zero(kf):\n    # i want to sip 2 rows in the knowledgeframe if zero comes in the column\n    # if 0 comes on odd index sip previous row as well as current row using monkey\n    # Assuming your knowledgeframe is indexed starting from 0\n    # Rows with column2 = 0 and on odd index\n    idx = kf[(kf['column2'] == 0) & (kf.index % 2 == 1)].index\n    # The rows above them\n    idx = idx.adding(idx-1)\n    # A new knowledgeframe with those rows removed\n    new_kf = kf.drop(idx)\n    return new_kf", "error": "", "token_usage": [[274, 149]], "time_usage": [4.437178611755371]}
{"task_id": "PandasEval/39", "success": true, "generated_code": "# [start]\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef shift_column_up_by_one(kf):\n    # Shift column in monkey knowledgeframe up by one?\n    # In detail, in 'gdp' column, shift up by one and return knowledgeframe with the changed gdp column.\n    kf['gdp'] = kf['gdp'].shifting(periods=1, freq=None)\n    return kf", "error": "", "token_usage": [[191, 119]], "time_usage": [3.848848342895508]}
{"task_id": "PandasEval/40", "success": true, "generated_code": "# [start]\n# choose_dtypes(self, include=None, exclude=None) -> 'KnowledgeFrame': Extract a collection of colums from the KnowledgeFrame based on their dtypes.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame([[1, 2.2, 'three']], columns=['A', 'B', 'C'])\n# I was wondering if there is an elegant and shorthand way in Monkey KnowledgeFrames to select columns by data type (dtype). \n# i.e. Select only float64 columns from a KnowledgeFrame\nnew_kf = kf.choose_dtypes(include=np.float64)", "error": "", "token_usage": [[223, 135]], "time_usage": [5.199005126953125]}
{"task_id": "PandasEval/41", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\nimport numpy as np\ndef unioner_kf(kf1, kf2):\n    # How to unioner two knowledgeframes with different column names but same number of rows?\n    # I have two different data frames in monkey. Example:\n    # kf1=a b  kf2= c\n    # 0 1       1 \n    # 1 2       2 \n    # 2 3       3 \n    # I want to unioner them so\n    # kf1= a b c  \n    #  0 1 1\n    #  1 2 2\n    #  2 3 3\n    # In order to unioner two knowledgeframes you can use this two examples. Both returns the same goal\n    # Using unioner plus additional arguments instructing it to use the indexes\n    kf1.unioner(kf2, left_index=True, right_index=True)\n    # Using join method with 'inner' how argument and on argument set to None\n    kf1.join(kf2, how='inner')", "error": "", "token_usage": [[450, 400]], "time_usage": [12.125662565231323]}
{"task_id": "PandasEval/42", "success": true, "generated_code": "# [start]\n# sip(self, labels, errors: 'str_t' = 'raise') -> 'Index': Create a new Index with no passed labels.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'A': [1, 2, 3],'B': [100, 300, 500],'C': list('abc')})\n\n# How can I delete multiple columns in one pass?\n# In detail, I would like to delete columns A and C, but I don't know how to do it in one pass.\nnew_kf = kf.drop(['A', 'C'], axis=1)", "error": "", "token_usage": [[222, 136]], "time_usage": [4.512442588806152]}
{"task_id": "PandasEval/43", "success": true, "generated_code": "def get_value_counts(kf):\n    # I want to get the counts of distinctive values of the knowledgeframe. count_values implements this however I want to use its output somewhere else. \n    # How can I convert .count_values output to a monkey knowledgeframe.\n    # Use renaming_axis('distinctive_values') for name ('counts') of column from index and reseting_index\n    # return the final knowledgeframe\n    \n    counts = kf.count_values()\n    kf_counts = mk.KnowledgeFrame(counts)\n    kf_counts = kf_counts.renaming_axis({'index': 'distinctive_values'})\n    kf_counts.reset_index(inplace=True)\n    \n    return kf_counts", "error": "", "token_usage": [[364, 140]], "time_usage": [4.739579439163208]}
{"task_id": "PandasEval/44", "success": true, "generated_code": "# You can use the rename_columns method of the KnowledgeFrame class to change the column labels.\n\ndata.rename_columns({'A': 'a', 'B': 'b', 'C': 'c'})", "error": "", "token_usage": [[175, 44]], "time_usage": [1.9586422443389893]}
{"task_id": "PandasEval/45", "success": true, "generated_code": "# [start]\n# mapping(self, mapper, na_action=None): Map the object's values according to an input mapping or function\n# [end]\nimport monkey as mk\n\ndef make_kf_all_cols_lower(data):\n    # I want to make all column headers in my monkey data frame lower case\n    # Return the changed knowledgeframe\n    data.columns = map(str.lower, data.columns)\n    return data", "error": "", "token_usage": [[172, 89]], "time_usage": [3.014551877975464]}
{"task_id": "PandasEval/46", "success": true, "generated_code": "sample_by_num = kf.grouper(by=\"section\").sample_by_num(n=50)", "error": "", "token_usage": [[447, 23]], "time_usage": [1.2895386219024658]}
{"task_id": "PandasEval/47", "success": true, "generated_code": "kf['Name'] = kf['Name'].str.replace(r'\\d+', '', regex=True)", "error": "", "token_usage": [[262, 23]], "time_usage": [1.413926362991333]}
{"task_id": "PandasEval/48", "success": true, "generated_code": "new_kf = kf.grouper(by='Mt').get_max()", "error": "", "token_usage": [[484, 20]], "time_usage": [1.3077335357666016]}
{"task_id": "PandasEval/49", "success": true, "generated_code": "kf['date'] = pd.to_datetime(kf['date'], errors='coerce')", "error": "", "token_usage": [[340, 22]], "time_usage": [1.3525519371032715]}
{"task_id": "PandasEval/50", "success": true, "generated_code": "def if_any_value_is_nan(kf):\n    # How to check if any value is NaN in a Monkey KnowledgeFrame? Return the result.\n    return kf.ifnull().whatever()", "error": "", "token_usage": [[192, 41]], "time_usage": [1.7711551189422607]}
{"task_id": "PandasEval/51", "success": true, "generated_code": "# [start]\n# reindexing(self, target, method=None, level=None, limit=None, tolerance=None) -> 'tuple[MultiIndex, np.ndarray | None]': Create an index conditioned on the values of target (move, add, or remove values as needed).\n# [end]\nimport monkey as mk\n\ndef sorting_columns_based_on_column_name(kf):\n    # Sorting columns in monkey knowledgeframe based on column name\n    # Note that axis is one\n    kf = kf.reindex(sorted(kf.columns), axis=1)\n    return kf", "error": "", "token_usage": [[199, 120]], "time_usage": [3.842454433441162]}
{"task_id": "PandasEval/52", "success": true, "generated_code": "import monkey as mk\nimport numpy as np\n\ndef get_value_when_condition(kf):\n    # How can I get the values of column `A` when column `B`=3?\n    values = kf[kf['B'] == 3]['A']\n    return values", "error": "", "token_usage": [[140, 61]], "time_usage": [2.217144250869751]}
{"task_id": "PandasEval/53", "success": true, "generated_code": "# [start]\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# [end]\nimport monkey as mk\n\ndef get_average_in_column(kf, col_name):\n    # return the column average/mean\n    return kf[col_name].mean()", "error": "", "token_usage": [[165, 75]], "time_usage": [2.7675280570983887]}
{"task_id": "PandasEval/54", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef combine_kf(kf1, kf2):\n    \"\"\"\n    How do I combine two knowledgeframes with ignore index? Return the concated knowledgeframe.\n    \"\"\"\n    return kf1.concat(kf2, ignore_index=True)", "error": "", "token_usage": [[171, 89]], "time_usage": [3.1692073345184326]}
{"task_id": "PandasEval/55", "success": true, "generated_code": "repeated_x = mk.concatenating([x] * 5, axis=0, ignore_index=True)", "error": "", "token_usage": [[286, 27]], "time_usage": [1.4478766918182373]}
{"task_id": "PandasEval/56", "success": true, "generated_code": "# [start]\n# convert_dict(self, into=<class 'dict'>): Return a dict-like object of the passed Collections\n# [end]\nimport monkey as mk\n\ndef knowledgeframe2list_of_dict(kf):\n    # Monkey KnowledgeFrame to List of Dictionaries\n    # Use kf.convert_dict() to solve it and return the result\n    return kf.convert_dict()", "error": "", "token_usage": [[173, 81]], "time_usage": [3.312683582305908]}
{"task_id": "PandasEval/57", "success": true, "generated_code": "# [start]\n# convert_datetime(arg: 'DatetimeScalarOrArrayConvertible', errors: 'str' = 'raise', dayfirst: 'bool' = False, yearfirst: 'bool' = False, utc: 'bool | None' = None, formating: 'str | None' = None, exact: 'bool' = True, unit: 'str | None' = None, infer_datetime_formating: 'bool' = False, origin='unix', cache: 'bool' = True) -> 'DatetimeIndex | Collections | DatetimeScalar | NaTType | None': Map the format of the argument to datetime.\n# [end]\nimport monkey as mk\n\ndef convert_column_to_date(kf):\n    # Convert Column `Date` to Date Format using monkey function\n    return mk.convert_datetime(kf, formating='%Y-%m-%d')", "error": "", "token_usage": [[273, 183]], "time_usage": [5.647665023803711]}
{"task_id": "PandasEval/58", "success": true, "generated_code": "# [start]\n# grouper(self, by=None, axis: 'Axis' = 0, level: 'Level | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, squeeze: 'bool | lib.NoDefault' = <no_default>, observed: 'bool' = False, sipna: 'bool' = True) -> 'KnowledgeFrameGroupBy': Group the KnowledgeFrame by a set of columns or group keys.\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# cumulative_sum(self, axis=None, skipna=True, *args, **kwargs): Return the cumulative total of an axis in the KnowledgeFrame or Collections.\n# [end]\nimport monkey as mk\n\ndef counting_consecutive_positive_values(y):\n    # Counting consecutive positive values in Python/monkey array\n    # I'm trying to count consecutive up days in equity return data; so if a positive day is 1 and a negative is 0, a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].\n    result = []\n    count = 0\n    for value in y:\n        if value > 0:\n            count += 1\n            result.append(count)\n        else:\n            count = 0\n            result.append(count)\n    return result", "error": "", "token_usage": [[383, 331]], "time_usage": [9.757453918457031]}
{"task_id": "PandasEval/59", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# resetting_index(self, level: 'Hashable | Sequence[Hashable] | None' = None, sip: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '') -> 'KnowledgeFrame | None': Reset the index of the KnowledgeFrame, and use the default one instead.\n# [end]\nimport monkey as mk\n\ndef insert_row_at_arbitrary_in_knowledgeframe(kf, row_to_insert):\n    \"\"\"\n    Inserts a row into a knowledgeframe at a specified row with no ignore index, and sort & reset the index with sip=True. \n    Returns the new knowledgeframe.\n    \"\"\"\n    kf = kf.adding(row_to_insert)  # Adding the row_to_insert to the knowledgeframe\n    kf.sorting_index(inplace=True)  # Sorting the knowledgeframe by labels along the specified axis\n    kf.resetting_index(sip=True, ignore_index=False)  # Resetting the index of the knowledgeframe using the default one\n    return kf", "error": "", "token_usage": [[386, 361]], "time_usage": [10.753929138183594]}
{"task_id": "PandasEval/60", "success": true, "generated_code": "def get_data_frame_from_list(list_of_lists):\n    # list_of_lists format: [header, [row1], [row2], ...]\n    # header format: [column1, column2, ...]\n    # row format: [value1, value2, ...]\n    # How to convert list to knowledgeframe?\n    # Return the knowledgeframe\n    data = list_of_lists[1:]  # Extracting the rows from the list_of_lists\n    index = None  # Since index is not provided, setting it as None\n    columns = list_of_lists[0]  # Extracting the header from the list_of_lists\n    return mk.KnowledgeFrame(data=data, index=index, columns=columns)", "error": "", "token_usage": [[252, 154]], "time_usage": [5.027218818664551]}
{"task_id": "PandasEval/61", "success": true, "generated_code": "unionerd_kf = kf1.unioner(kf2, left_index=True, right_index=True)", "error": "", "token_usage": [[331, 25]], "time_usage": [1.4938936233520508]}
{"task_id": "PandasEval/62", "success": true, "generated_code": "# [start]\n# convert_string(self, buf: 'FilePathOrBuffer[str] | None' = None, columns: 'Sequence[str] | None' = None, col_space: 'int | None' = None, header_numer: 'bool | Sequence[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatingters: 'fmt.FormattersType | None' = None, float_formating: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, getting_max_rows: 'int | None' = None, getting_min_rows: 'int | None' = None, getting_max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, getting_max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -> 'str | None': \n# Display the output of the KnowledgeFrame as a console-friendly tablular.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'a': [0, 1], 'b': [5, 3]})\n# How to obtain monkey KnowledgeFrame without index\n# I want to print the whole knowledgeframe, but I don't want to print the index\nkf_string = kf.convert_string(index=False)", "error": "", "token_usage": [[412, 322]], "time_usage": [9.164541959762573]}
{"task_id": "PandasEval/63", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef sip_all_nan_rows(kf):\n    # We will sip all Nan rows.\n    # Return the changed knowledgeframe.\n    return kf.sipna()", "error": "", "token_usage": [[161, 70]], "time_usage": [2.522700786590576]}
{"task_id": "PandasEval/64", "success": true, "generated_code": "# [start]\n# distinctive(self: '_IndexT', level: 'Hashable | None' = None) -> '_IndexT': Return the index's unique values.\n# [end]\nimport monkey as mk\n\ndef is_contain_particular_value(collections, value):\n    # How to determine whether a Monkey Column contains a particular value?\n    # Return the result\n    return value in collections", "error": "", "token_usage": [[178, 86]], "time_usage": [3.17765736579895]}
{"task_id": "PandasEval/65", "success": true, "generated_code": "# [start]\n# renaming(self, name, inplace=False): Change the name of the Index or MultiIndex.\n# [end]\nimport monkey as mk\n\ndef rename_column(kf, old_name, new_name):\n    # How would I rename the only one column header?\n    kf.renaming({old_name: new_name}, inplace=True)\n    return kf", "error": "", "token_usage": [[166, 79]], "time_usage": [2.8554391860961914]}
{"task_id": "PandasEval/66", "success": true, "generated_code": "# [start]\n# remove_duplicates(self: '_IndexT', keep: 'str_t | bool' = 'first') -> '_IndexT': Remove the duplicate values of the Index.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_column(kf, col1, col2):\n    # I have a knowledgeframe with repeat values in column `col1`. I want to sip duplicates, keeping the row with the last value in column `col2`.\n    # How would I do that?\n    kf = kf.drop_duplicates(subset=col1, keep='last')\n    return kf", "error": "", "token_usage": [[214, 128]], "time_usage": [4.147823333740234]}
{"task_id": "PandasEval/67", "success": true, "generated_code": "# [start]\n# KnowledgeFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, clone: 'bool | None' = None): Tabular data that is two-dimensional, size-variable, and possibly heterogeneous.\n# [end]\nimport monkey as mk\n\ndef create_empty_kf(col_names):\n    # Monkey create empty KnowledgeFrame with only column names\n    # Return: KnowledgeFrame\n    return mk.KnowledgeFrame(columns=col_names)", "error": "", "token_usage": [[204, 117]], "time_usage": [4.342681169509888]}
{"task_id": "PandasEval/68", "success": true, "generated_code": "import monkey as mk\n\ndef delete_first_n_rows(kf, n):\n    # Delete first n rows of a knowledgeframe\n    # Input:\n    #   kf: KnowledgeFrame\n    #   n: int\n    # Return:\n    #   KnowledgeFrame\n    return kf[n:]", "error": "", "token_usage": [[157, 64]], "time_usage": [2.5756001472473145]}
{"task_id": "PandasEval/69", "success": true, "generated_code": "# [start]\n# duplicated_values(self, keep: \"Literal[('first', 'final_item', False)]\" = 'first') -> 'np.ndarray': Return index values that are duplicated.\n# [end]\nimport monkey as mk\n\ndef remove_duplicates_by_col_names(kf):\n    \"\"\"\n    Here's a one solution to remove columns based on duplicate column names:\n    Return the duplicated knowledgeframe\n    \"\"\"\n    # Get the column names\n    col_names = kf.columns\n    \n    # Find the duplicate column names\n    duplicate_col_names = [name for name in col_names if col_names.count(name) > 1]\n    \n    # Remove the columns with duplicate names\n    kf = kf.drop(columns=duplicate_col_names)\n    \n    # Return the modified knowledgeframe\n    return kf", "error": "", "token_usage": [[186, 166]], "time_usage": [5.226179599761963]}
{"task_id": "PandasEval/70", "success": true, "generated_code": "# [start]\n# totype(self, dtype: 'Dtype | None' = None, clone=True): Transform a SparseArray's data type.\n# [end]\nimport monkey as mk\n\ndef convert_bool_to_int(kf, col_name):\n    # How can I map True/False to 1/0 in a Monkey KnowledgeFrame?\n    # return the knowledgeframe with the column converted to int\n    kf[col_name] = kf[col_name].astype(int)\n    return kf", "error": "", "token_usage": [[186, 105]], "time_usage": [3.420384645462036]}
{"task_id": "PandasEval/71", "success": true, "generated_code": "# [start]\n# length(self): Return the length of each Collections/Index element.\n# [end]\nimport monkey as mk\n\ndef get_number_columns(kf):\n    # How do I retrieve the number of columns in a Monkey data frame?\n    # Return the number of columns in the knowledgeframe\n    return kf.length()", "error": "", "token_usage": [[163, 70]], "time_usage": [2.6921703815460205]}
{"task_id": "PandasEval/72", "success": true, "generated_code": "def find_columns_name_lists(kf):\n    # How do I determine which columns contain NaN values? In particular, can I get a list of the column names containing NaNs?\n    # Return a list of the column names containing NaNs\n    return [col for col in kf.columns if kf[col].isna().any()]", "error": "", "token_usage": [[228, 71]], "time_usage": [2.5328786373138428]}
{"task_id": "PandasEval/73", "success": true, "generated_code": "# [start]\n# last_tail(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Return the FrameCollection's final `n` rows.\n# [end]\nimport monkey as mk\n\nN = 2\nkf = mk.KnowledgeFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n# How to get the last N rows of a monkey KnowledgeFrame?\nresult = kf.last_tail(N)", "error": "", "token_usage": [[213, 121]], "time_usage": [4.035162925720215]}
{"task_id": "PandasEval/74", "success": true, "generated_code": "# [start]\n# replacing(old, new, count=-1, /): Return a copy of the object that replaces all instances of the substring old with new.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef replacing_blank_with_nan(kf):\n    # replace field that's entirely space (or empty) with NaN using regex\n    # return the result\n    return re.sub(r'^\\s*$', 'NaN', kf)", "error": "", "token_usage": [[180, 97]], "time_usage": [3.6133172512054443]}
{"task_id": "PandasEval/75", "success": true, "generated_code": "# [start]\n# fillnone(self, value=None, downcast=None): Use the provided value to fill NA/NaN values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef fill_none_with_zero(kf, col_names):\n    # Monkey knowledgeframe fillnone() only some columns in place\n    # This function fills all columns with 0\n    # Return the changed knowledgeframe\n    kf.fillnone(value=0, downcast=np.nan)\n    return kf", "error": "", "token_usage": [[187, 106]], "time_usage": [3.7895865440368652]}
{"task_id": "PandasEval/76", "success": true, "generated_code": "# [start]\n# concating(objs: 'Iterable[NDFrame] | Mapping[Hashable, NDFrame]', axis=0, join='outer', ignore_index: 'bool' = False, keys=None, levels=None, names=None, verify_integrity: 'bool' = False, sort: 'bool' = False, clone: 'bool' = True) -> 'FrameOrCollectionsUnion': Concatenate monkey objects along one axis, using set logic on the other axes if needed.\n# [end]\nimport monkey as mk\n\ndef concating_kf(kf1, kf2):\n    # Given that all the knowledgeframes have the same columns, you can simply concat them:\n    return mk.concating([kf1, kf2])", "error": "", "token_usage": [[253, 158]], "time_usage": [5.016627311706543]}
{"task_id": "PandasEval/77", "success": true, "generated_code": "import monkey as mk\n\ndef extract_first_and_last_kf(kf):\n    # Extract first and last row of a knowledgeframe in monkey\n    # Return the knowledgeframe with the first and last row\n    first_row = kf.iloc[0]\n    last_row = kf.iloc[-1]\n    result = kf.iloc[[0, -1]]\n    return result", "error": "", "token_usage": [[144, 79]], "time_usage": [3.090439796447754]}
{"task_id": "PandasEval/78", "success": true, "generated_code": "# [start]\n# ifna(self) -> 'np.ndarray': Indicate whether there are missing values.\n# whatever(self, *args, **kwargs): Return a bool value of whether any element is Truthy.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef display_rows_with_gt_1_nan(kf):\n    # Return the knowledgeframe with the rows with one or more NaN values\n    return kf[kf.ifna().sum(axis=1) > 0]", "error": "", "token_usage": [[187, 106]], "time_usage": [3.6767499446868896]}
{"task_id": "PandasEval/79", "success": true, "generated_code": "# [start]\n# convert_list(self, *args, **kwargs): Create a list with the passed values.\n# [end]\nimport monkey as mk\n\ndef get_row_index_values_as_list(kf):\n    # Return the row-index values of the knowledgeframe as a list\n    return kf.index.tolist()", "error": "", "token_usage": [[159, 67]], "time_usage": [2.6863534450531006]}
{"task_id": "PandasEval/80", "success": true, "generated_code": "# [start]\n# getting(self, i): Return the element at specified position.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'mycol':np.arange(5), 'dummy':np.arange(5)})\n# I find myself often having to check whether a column or row exists in a knowledgeframe before trying to reference it.\n# Is there any way to do this more nicely? \n# For example on an arbitrary object I can do x = getattr(anobject, 'id', default) - is there anything similar to this in monkey? Really any way to achieve what I'm doing more gracefully?\n# Output the second row of data in `mycol` column if it exists, otherwise output NaN\nvalue = kf.getting(1) if 'mycol' in kf.columns else np.nan", "error": "", "token_usage": [[258, 178]], "time_usage": [5.407499074935913]}
{"task_id": "PandasEval/81", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef counting_occurrences_of_a_value(collections, value):\n    # Count the number of occurrences of a value in a collections\n    # Return the count\n    count = collections.count(value)\n    return count", "error": "", "token_usage": [[196, 109]], "time_usage": [3.554333209991455]}
{"task_id": "PandasEval/82", "success": true, "generated_code": "import monkey as mk\n\ndef find_col_a_gt_col_b_rows(kf, col_a, col_b):\n    # Find rows in kf where col_a > col_b\n    # Return the rows\n    \n    # Create an empty list to store the rows\n    rows = []\n    \n    # Iterate through each row in kf\n    for row in kf:\n        # Check if the value in col_a is greater than the value in col_b\n        if row[col_a] > row[col_b]:\n            # If it is, add the row to the list\n            rows.append(row)\n    \n    # Return the list of rows where col_a > col_b\n    return rows", "error": "", "token_usage": [[143, 142]], "time_usage": [4.22498083114624]}
{"task_id": "PandasEval/83", "success": true, "generated_code": "# [start]\n# shifting(self, periods=1, freq=None): Increase the number of time frequency increments by the required number.\n# [end]\nimport monkey as mk\n\ndef sip_consecutive_duplicates(collections):\n    # Drop consecutive duplicates\n    collections = collections.drop_duplicates(keep='first')\n    # Return the result\n    return collections", "error": "", "token_usage": [[158, 75]], "time_usage": [2.950913429260254]}
{"task_id": "PandasEval/84", "success": true, "generated_code": "# [start]\n# value_round(freq, ambiguous='raise', nonexistent='raise'): Return the rounded Timestamp to the chosen resolution.\n# [end]\nimport monkey as mk\n\ndef value_round_a_single_column(kf):\n    # Round a single column `A`\n    # Return the knowledgeframe\n    return kf.value_round(freq, ambiguous='raise', nonexistent='raise')", "error": "", "token_usage": [[162, 79]], "time_usage": [2.9406230449676514]}
{"task_id": "PandasEval/85", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# formating(self, name: 'bool' = False, formatingter: 'Ctotal_allable | None' = None, na_rep: 'str_t' = 'NaN') -> 'list[str_t]': Return the Index as a formatted string.\n# [end]\nimport monkey as mk\n\ndef add_zeros_to_string(kf, col_name):\n    # Add Leading Zeros to Strings at `col_name` in Monkey Dataframe\n    # The maximum length of the string is 15\n    # Return the knowledgeframe\n    kf.employ(mk.add_leading_zeros, axis=0, args=(col_name, 15))\n    return kf", "error": "", "token_usage": [[268, 197]], "time_usage": [5.705972194671631]}
{"task_id": "PandasEval/86", "success": true, "generated_code": "# [start]\n# adding(self, other: 'Index | Sequence[Index]') -> 'Index': Adding together a group of Index options.\n# [end]\nimport monkey as mk\n\ndef adding_dict_to_kf(kf, dictionary):\n    # adding dictionary to data frame\n    # return the data frame\n    kf.update(dictionary)\n    return kf", "error": "", "token_usage": [[166, 77]], "time_usage": [2.780843734741211]}
{"task_id": "PandasEval/87", "success": true, "generated_code": "# [start]\n# convert_pydatetime(*args, **kwargs): Return the native datetime object in Python.\n# [end]\nimport monkey as mk\n\ndef transform_timestamp_to_pydatetime(timestamp):\n    # transform timestamp to pydatetime object\n    pydatetime = mk.convert_pydatetime(timestamp)\n    # return pydatetime object\n    return pydatetime", "error": "", "token_usage": [[157, 74]], "time_usage": [2.5962393283843994]}
{"task_id": "PandasEval/88", "success": true, "generated_code": "# [start]\n# counts_value_num(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, sipna: 'bool' = True): Return the counts of distinctive values.\n# [end]\nimport monkey as mk\n\ndef getting_percentage_of_each_gender(collections):\n    # Given a monkey collections that represents frequencies of a value, how can I turn those frequencies into percentages?\n    # Return the percentage of each gender.\n    total = sum(collections.values())\n    percentages = {}\n    for key, value in collections.items():\n        percentage = (value / total) * 100\n        percentages[key] = percentage\n    return percentages", "error": "", "token_usage": [[204, 150]], "time_usage": [6.277913808822632]}
{"task_id": "PandasEval/89", "success": true, "generated_code": "# [start]\n# division(self, other, axis='columns', level=None, fill_value=None): Get the element-wise floating division of knowledgeframe or other objects.\n# [end]\nimport monkey as mk\n\ndef divide_multiple_cols_by_first_col(kf):\n    # I need to divide all ['B','C'] columns but the first column 'A' in a KnowledgeFrame by the first column.\n    # Return the result.\n    return kf.division(kf[['B', 'C']], kf[['A']])", "error": "", "token_usage": [[192, 110]], "time_usage": [3.40268611907959]}
{"task_id": "PandasEval/90", "success": true, "generated_code": "# [start]\n# ceiling(self, *args, **kwargs): Apply a ceiling operation on the data at the specified frequency.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef ceiling_of_collections(s):\n    # ceiling of a monkey collections\n    # Return the result.\n    return mk.ceiling(s)", "error": "", "token_usage": [[162, 71]], "time_usage": [2.52485990524292]}
{"task_id": "PandasEval/91", "success": true, "generated_code": "# [start]\n# sipna(self): Return an ExtensionArray that is devoid of NA values.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef delete_all_nan_columns(kf):\n    # Delete all columns that contain all NaN values\n    # Return the result.\n    kf = kf.dropna(axis=1, how='all')\n    return kf", "error": "", "token_usage": [[161, 81]], "time_usage": [2.5946755409240723]}
{"task_id": "PandasEval/92", "success": true, "generated_code": "# [start]\n# sorting_index(self, axis: 'Axis' = 0, level: 'Level | None' = None, ascending: 'bool | int | Sequence[bool | int]' = True, inplace: 'bool' = False, kind: 'str' = 'quicksort', na_position: 'str' = 'final_item', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc' = None): Return object sorted by labels along the specified axis.\n# [end]\nimport monkey as mk\n\nkf = mk.KnowledgeFrame({'name': ['jon','sam','jane','bob'],\n           'age': [30,25,18,26],\n           'sex':['male','male','female','male']})\n\nrow = ['45', 'Dean', 'male']\n# add the row at top in kf\nkf.loc[-1] = row\nkf.index = kf.index + 1\n# resort the index by inplace\nkf.sort_index(inplace=True)", "error": "", "token_usage": [[312, 220]], "time_usage": [5.869235038757324]}
{"task_id": "PandasEval/93", "success": true, "generated_code": "# [start]\n# allocate(self, **kwargs) -> 'KnowledgeFrame': Create new KnowledgeFrame columns.\n# [end]\nimport monkey as mk\n\ndef set_value_to_entire_col(kf, value):\n    # Set value to an entire column `B` of a monkey knowledgeframe\n    # Return the changed knowledgeframe.\n    kf['B'] = value\n    return kf", "error": "", "token_usage": [[170, 84]], "time_usage": [2.8498826026916504]}
{"task_id": "PandasEval/94", "success": true, "generated_code": "# [start]\n# interst(self, other, sort=False): Create the intersection of two Index objects.\n# [end]\nimport monkey as mk\n\ns1 = mk.Collections([3,4,5])\ns2 = mk.Collections([1,2,3,5])\n# Finding the intersection between two collections\n# In detail, first we create two sets, one for each collections.\n# Then we find the intersection of the two sets.\ns1, s2 = set(s1), set(s2)\ninterst_result = s1.intersection(s2)", "error": "", "token_usage": [[211, 119]], "time_usage": [3.9346604347229004]}
{"task_id": "PandasEval/95", "success": true, "generated_code": "# [start]\n# header_num(self: 'FrameOrCollections', n: 'int' = 5) -> 'FrameOrCollections': Get the top `n` rows of the frame or collections.\n# [end]\nimport monkey as mk\n\ndef getting_first_n_rows(kf, n):\n    # I would simply like to slice the Data Frame and take the first n rows.\n    # Return the result\n    return kf[:n]", "error": "", "token_usage": [[187, 95]], "time_usage": [3.1828360557556152]}
{"task_id": "PandasEval/96", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs): Return the summed value of the specified axis.\n# [end]\nimport monkey as mk\nimport numpy as np\n\nkf = mk.KnowledgeFrame({'Apples': [2, 1, np.nan],\n              'Bananas': [3, 3, 7],\n              'Grapes': [np.nan, 2, 3],})\n\n# Add a new column named 'Fruit Total' that sums the values of the other columns\n# Note that igonring the NaN values\n\ndef total_sum(self, axis=None, skipna=None, level=None, numeric_only=None, getting_min_count=0, **kwargs):\n    \"\"\"\n    Return the summed value of the specified axis.\n    \"\"\"\n    pass\n\nkf.total_sum = total_sum", "error": "", "token_usage": [[288, 242]], "time_usage": [6.628340482711792]}
{"task_id": "PandasEval/97", "success": true, "generated_code": "# [start]\n# conduct_map(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'KnowledgeFrame': Apply a function element by element to a KnowledgeFrame.\n# total_all(self, *args, **kwargs): Return a bool value of whether all items are truthy.\n# [end]\nimport monkey as mk\nimport numpy as np\n\ndef find_non_numeric_rows(kf):\n    # Finding non-numeric rows in knowledgeframe in monkey\n    # Return the raws that contain non-numeric values\n    # So to get the subKnowledgeFrame of rouges, (Note: the negation, ~, of the above finds the ones which have at least one rogue non-numeric):\n    return kf.apply(lambda row: ~np.isreal(row)).rows", "error": "", "token_usage": [[257, 174]], "time_usage": [4.847627878189087]}
{"task_id": "PandasEval/98", "success": true, "generated_code": "# [start]\n# unioner(self, right: 'FrameOrCollectionsUnion', how: 'str' = 'inner', on: 'IndexLabel | None' = None, left_on: 'IndexLabel | None' = None, right_on: 'IndexLabel | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), clone: 'bool' = True, indicator: 'bool' = False, validate: 'str | None' = None) -> 'KnowledgeFrame': Database-style join the named Collections objects or KnowledgeFrame.\n# [end]\nimport monkey as mk\n\nkf1 = mk.KnowledgeFrame({'staff':[1,4], 'company':[100,301]})\nkf2 = mk.KnowledgeFrame({'person':[1,2], 'company':[100,300]})\n# unioner the above two knowledgeframes on column 'company'\nunionerd_kf = kf1.unioner(kf2, on='company')", "error": "", "token_usage": [[315, 229]], "time_usage": [6.752134084701538]}
{"task_id": "PandasEval/99", "success": true, "generated_code": "count_collections = kf.ifnull().sum()", "error": "", "token_usage": [[230, 13]], "time_usage": [2.250533103942871]}
{"task_id": "PandasEval/100", "success": true, "generated_code": "result = kf.incontain(targets)", "error": "", "token_usage": [[188, 11]], "time_usage": [1.0461158752441406]}
{"task_id": "PandasEval/34", "success": true, "generated_code": "def calculate_row_diff_groupwise(kf):\n    # I need to calculate the difference between two rows groupwise using monkey.\n    # To calculate the total_sum I would use monkey.grouper('Group').total_sum(), but how do you calculate the difference between rows where the row ordering is important?\n    # I think we need custom function with employ which return KnowledgeFrame for each group, for select by position is used iat:\n    # Return the result\n    \n    # Group the KnowledgeFrame by 'Group'\n    grouped = kf.grouper('Group')\n    \n    # Apply the custom function 'f' to each group\n    result = grouped.employ(f)\n    \n    return result", "error": "", "token_usage": [[557, 145]], "time_usage": [4.5489115715026855]}
{"task_id": "PandasEval/27", "success": true, "generated_code": "# [start]\n# employ(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type=None, args=(), **kwargs): Employ a function along one of the KnowledgeFrame's axes.\n# average(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs): Return the average value along the specified axis.\n# standard(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs): Return the standard deviation across the requested axis.\n# [end]\nimport monkey as mk\n\ndef normalize(kf):\n    # Normalization using monkey\n    # We simply subtract the average and divide by standard deviation on kf.iloc[:,0,-1] obj with axis is zero.\n    # Return the normalized knowledgeframe\n    kf.employ(mk.average, axis=0)\n    kf.employ(mk.standard, axis=0)\n    return kf", "error": "", "token_usage": [[277, 207]], "time_usage": [6.429771423339844]}
