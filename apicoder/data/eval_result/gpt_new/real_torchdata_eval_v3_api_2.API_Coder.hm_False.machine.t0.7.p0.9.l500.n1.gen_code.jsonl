{"task_id": "TorchDataEval/0", "success": true, "generated_code": "# [start]\n# flatmap(*args, **kwds): Applies a function over each item from the source DataPipe, then flattens the outputs to a single, unnested IterDataPipe.\n# cycle(*args, **kwds): Cycles the specified input in perpetuity by default, or for the specified number of times.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\ndatapipe = IterableWrapper([1,2,3])\n# How to augument the datapipe by repeating it six times.\nnew_datapipe = datapipe.cycle(6)", "error": "", "token_usage": [[219, 128]], "time_usage": [4.1125712394714355]}
{"task_id": "TorchDataEval/1", "success": true, "generated_code": "# [start]\n# enumerate(*args, **kwds): Adds an index to an existing DataPipe through enumeration, with the index starting from 0 by default.\n# add_index(*args, **kwds): Adds an index to an existing Iterable DataPipe with.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp = IterableWrapper(['a', 'b', 'c'])\n# Assign indexs to the datepipe object.\nnew_dp = dp.enumerate()", "error": "", "token_usage": [[198, 104]], "time_usage": [3.5545425415039062]}
{"task_id": "TorchDataEval/2", "success": true, "generated_code": "# [start]\n# batch(datapipe: MapDataPipe[T], batch_size: int, drop_last: bool = False, wrapper_class=DataChunk): Create mini-batches of data.\n# bucketbatch(datapipe: torch.utils.data.dataset.IterDataPipe[+T_co], batch_size: int, drop_last: bool = False, batch_num: int = 100, bucket_num: int = 1, sort_key: Union[Callable, NoneType] = None, in_batch_shuffle: bool = True): Creates mini-batches of data from sorted bucket.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper, Sampler\nsource_dp = IterableWrapper(range(10))\nbatch_dp = source_dp.batch(batch_size=3, drop_last=True)\n\n# How to get one training data from the batch_dp\nresult = next(iter(batch_dp))", "error": "", "token_usage": [[275, 182]], "time_usage": [5.606438398361206]}
{"task_id": "TorchDataEval/4", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenates multiple Iterable DataPipes.\n# demux(datapipe: torch.utils.data.dataset.IterDataPipe, num_instances: int, classifier_fn: Callable[[+T_co], Union[int, NoneType]], drop_none: bool = False, buffer_size: int = 1000): Splits the input DataPipe into multiple child DataPipes, using the given classification function.\n# [end]\nfrom typing import Callable, Union\nfrom torchdata.datapipes.iter import IterableWrapper\nfrom torch.utils.data.dataset import IterDataPipe\n\ndef concat(*args, **kwds):\n    pass\n\ndef demux(datapipe: IterDataPipe, num_instances: int, classifier_fn: Callable[[+T_co], Union[int, NoneType]], drop_none: bool = False, buffer_size: int = 1000):\n    pass\n\ndef odd_or_even(n):\n    return n % 2\n\nsource_dp = IterableWrapper(range(5))\n# Split into 2 sub-datapipes by the odd_or_even function\ndp1, dp2 =", "error": "", "token_usage": [[253, 236]], "time_usage": [6.911875247955322]}
{"task_id": "TorchDataEval/5", "success": true, "generated_code": "# [start]\n# fork(datapipe: torch.utils.data.dataset.IterDataPipe, num_instances: int, buffer_size: int = 1000): Creates multiple instances of the same Iterable DataPipe.\n# batch(datapipe: MapDataPipe[T], batch_size: int, drop_last: bool = False, wrapper_class=DataChunk): Create mini-batches of data.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\nsource_dp = IterableWrapper(range(5))\n# Clone the source datapipe two times\ndp1, dp2 = fork(source_dp, 2)\n\n# [start]\ndef fork(datapipe, num_instances, buffer_size=1000):\n    \"\"\"\n    Creates multiple instances of the same Iterable DataPipe.\n    \n    Args:\n        datapipe: torch.utils.data.dataset.IterDataPipe\n            The source Iterable DataPipe to be forked.\n        num_instances: int\n            The number of instances to be created.\n        buffer_size: int, optional (default=1000)\n            The buffer size for each forked instance.\n    \n    Returns:\n        Tuple[torch.utils.data.dataset.IterDataPipe]\n            A tuple of forked instances of the same Iterable DataPipe.\n    \"\"\"\n    dp_instances = tuple(datapipe.clone() for _ in range(num_instances))\n    for dp in dp_instances:\n        dp.buffer_size = buffer_size\n    return dp_instances\n\ndef batch(datapipe, batch_size, drop_last=False, wrapper_class=DataChunk):\n    \"\"\"\n    Create mini-batches of data.\n    \n    Args:\n        datapipe: MapDataPipe[T]\n            The source MapDataPipe to be batched.\n        batch_size: int\n            The size of each mini-batch.\n        drop_last: bool, optional (default=False)\n            Whether to drop the last batch if it is smaller than batch_size.\n        wrapper_class: type, optional (default=DataChunk)\n            The class to be used for wrapping each mini-batch.\n    \n    Returns:\n        BatchDataPipe[T]\n            The batched data as a BatchDataPipe.\n    \"\"\"\n    return BatchDataPipe(datapipe, batch_size, drop_last, wrapper_class)\n# [end]", "error": "", "token_usage": [[220, 461]], "time_usage": [13.170523166656494]}
{"task_id": "TorchDataEval/6", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\nfrom operator import itemgetter\n\ndef merge_fn(t1, t2):\n    return t1[1] + t2[1]\n\ndp1 = IterableWrapper([('a', 100), ('b', 200), ('c', 300)])\ndp2 = IterableWrapper([('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n\n# Putting two IterDataPipes together based on their key.\nres_dp = dp1.concat(dp2, merge_fn)", "error": "", "token_usage": [[251, 120]], "time_usage": [4.129773378372192]}
{"task_id": "TorchDataEval/7", "success": true, "generated_code": "res_dp = dp1.map(merge_fn, input_col=0, output_col=1).map(itemgetter(1)).concat(mapdp)", "error": "", "token_usage": [[293, 34]], "time_usage": [1.6887145042419434]}
{"task_id": "TorchDataEval/9", "success": true, "generated_code": "sample_mul_dp = SampleMultiplexer(*weights.keys(), random_seed=0)\nfilter_mul_dp = filter(sample_mul_dp, lambda x: x != 0)", "error": "", "token_usage": [[287, 39]], "time_usage": [1.8407094478607178]}
{"task_id": "TorchDataEval/10", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenates multiple Iterable DataPipes.\n# unzip(source_datapipe: torch.utils.data.dataset.IterDataPipe[typing.Sequence[~T]], sequence_length: int, buffer_size: int = 1000, columns_to_skip: Union[Sequence[int], NoneType] = None): Takes in a DataPipe of Sequences, unpacks each Sequence, and return the elements in separate DataPipes based on their position in the Sequence.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\nsource_dp = IterableWrapper([(i, i + 10, i + 20) for i in range(3)])\n# Unzip the three tuples, and return these elements in separate DataPipes, depending on their location.\ndp1, dp2, dp3 = unzip(source_dp, 3)", "error": "", "token_usage": [[276, 185]], "time_usage": [5.850164890289307]}
{"task_id": "TorchDataEval/11", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\nfrom typing import List, Union, Callable\n\n# [start]\ndef batch(datapipe: IterableWrapper, batch_size: int, drop_last: bool = False, wrapper_class=List):\n    \"\"\"\n    Creates mini-batches of data.\n    \"\"\"\n    pass\n\ndef demux(datapipe: torch.utils.data.dataset.IterDataPipe, num_instances: int, classifier_fn: Callable[[+T_co], Union[int, NoneType]], drop_none: bool = False, buffer_size: int = 1000):\n    \"\"\"\n    Splits the input DataPipe into multiple child DataPipes, using the given classification function.\n    \"\"\"\n    pass\n# [end]\n\ndp = IterableWrapper(range(10))\n# Divide datapipes into 3 batches and discard if the last batch is not reached.\ndp =", "error": "", "token_usage": [[253, 179]], "time_usage": [5.412897348403931]}
{"task_id": "TorchDataEval/12", "success": true, "generated_code": "# [start]\n# batch(datapipe: IterDataPipe, batch_size: int, drop_last: bool = False, wrapper_class=List): Creates mini-batches of data.\n# bucketbatch(datapipe: torch.utils.data.dataset.IterDataPipe[+T_co], batch_size: int, drop_last: bool = False, batch_num: int = 100, bucket_num: int = 1, sort_key: Union[Callable, NoneType] = None, in_batch_shuffle: bool = True): Creates mini-batches of data from sorted bucket.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\nsource_dp = IterableWrapper([3,2,1,6,0,5,4,9,8,7])\n\ndef sort_bucket(bucket):\n    return sorted(bucket)\n\n# Create batch datapipe with batch size 3, batch num is 100, and drop the last batch if it is not full.\n# Also, useing the sort_bucket function to sort the bucket, where the bucket_num is 1.\nbatch_dp = bucketbatch(source_dp, batch_size=3, drop_last=False, batch_num=100, bucket_num=1, sort_key=sort_bucket, in_batch_shuffle=True)", "error": "", "token_usage": [[323, 260]], "time_usage": [6.950133323669434]}
{"task_id": "TorchDataEval/14", "success": true, "generated_code": "# [start]\n# groupby(datapipe: IterDataPipe[torch.utils.data.datapipes.iter.grouping.T_co], group_key_fn: Callable, *, buffer_size: int = 10000, group_size: Optional[int] = None, guaranteed_group_size: Optional[int] = None, drop_remaining: bool = False): Groups data from input IterDataPipe by keys which are generated from ``group_key_fn``, and yields a ``DataChunk`` with batch size up to ``group_size`` if defined.\n# FileLister(*args, **kwds): Given path(s) to the root directory, yields file pathname(s) (path + filename) of files within the root directory.\n# [end]\nimport os\nfrom torchdata.datapipes.iter import IterableWrapper\nfrom torch.utils.data.datapipes.iter.grouping import groupby\n\ndef group_fn(file):\n   return os.path.basename(file).split(\".\")[0]\n\nsource_dp = IterableWrapper([\"a.png\", \"b.png\", \"a.json\", \"b.json\", \"a.jpg\", \"c.json\"])\n\n# Group by file name (except extension), we set the buffer size and group size to 3, and the guaranteed group size to 2.\ndp2 = groupby(source_dp, group_fn, buffer_size=3, group_size=3, guaranteed_group_size=2)", "error": "", "token_usage": [[342, 282]], "time_usage": [7.994067430496216]}
{"task_id": "TorchDataEval/16", "success": true, "generated_code": "http_reader_dp = IterableWrapper([file_url]).datapipe(HttpReader())", "error": "", "token_usage": [[238, 19]], "time_usage": [1.2026026248931885]}
{"task_id": "TorchDataEval/17", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\nfrom torchdata.datapipes.ops import flatmap\n\ndef mutiple_fn(e):\n    return [e, e * 10]\n\nsource_dp = IterableWrapper(list(range(5)))\n# Each item in the source_dp is applied mutiple_fn function and the output is then tiled to a single, unnested one.\nnew_dp = flatmap(source_dp, mutiple_fn)", "error": "", "token_usage": [[248, 91]], "time_usage": [3.0380969047546387]}
{"task_id": "TorchDataEval/18", "success": true, "generated_code": "def add_two(x):\n    return x + 2\ndp = IterableWrapper(range(10))\n# Method 1\nmap_dp_1 = dp.map(add_one)  # Invocation via functional form is preferred\n\n# Method 2\n# We discourage the usage of `lambda` functions as they are not serializable with `pickle`\n# Using `lambda` to implement add_two rather than add_one that is mentioned in above.\nmap_dp_2 = dp.map(lambda x: x + 2)", "error": "", "token_usage": [[288, 107]], "time_usage": [3.5516409873962402]}
{"task_id": "TorchDataEval/19", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\nfrom typing import Callable\n\ndef is_even(n):\n    return n % 2 == 0\n\ndp = IterableWrapper(range(5))\n\n# Filtering by the above function\nnew_dp = dp.filter(is_even)", "error": "", "token_usage": [[224, 58]], "time_usage": [2.0032622814178467]}
{"task_id": "TorchDataEval/20", "success": true, "generated_code": "# [start]\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specified limit.\n# MapDataPipe(*args, **kwds): Map-style DataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp = IterableWrapper(range(10))\n# How to get the first three elements of a datapipe?\nnew_dp = dp.header(3)", "error": "", "token_usage": [[211, 116]], "time_usage": [3.503509759902954]}
{"task_id": "TorchDataEval/21", "success": true, "generated_code": "# [start]\n# batch(datapipe: IterDataPipe, batch_size: int, drop_last: bool = False, wrapper_class=List): Creates mini-batches of data.\n# rows2columnar(source_datapipe: IterDataPipe[List[Union[Dict, List]]], column_names: Optional[List[str]] = None): Accepts an input DataPipe with batches of data, and processes one batch at a time and yields a Dict for each batch, with ``column_names`` as keys and lists of corresponding values from each row as values.\n# [end]\n# Each element in a batch is a `Dict`\nfrom torchdata.datapipes.iter import IterableWrapper\ndp = IterableWrapper([[{'a': 1}, {'b': 2, 'a': 1}], [{'a': 2, 'b': 200}, {'b': 2, 'c': 3, 'a': 100}]])\n\n# Takes an input DataPipe with batches of data, processes the batches one and produces a Dict for each batch.\n# We only need the column 'a' from each batch.\nnew_dp = dp.rows2columnar(column_names=['a'])", "error": "", "token_usage": [[335, 247]], "time_usage": [6.859792232513428]}
{"task_id": "TorchDataEval/23", "success": true, "generated_code": "new_dp = map_dp_1.batch(batch_size=2)", "error": "", "token_usage": [[272, 17]], "time_usage": [1.0616745948791504]}
{"task_id": "TorchDataEval/24", "success": true, "generated_code": "# [start]\n# HttpReader(source_datapipe: IterDataPipe[str], timeout: Optional[float] = None): Takes file URLs (HTTP URLs pointing to files), and yields tuples of file URL and IO stream.\n# OnlineReader(*args, **kwds): Takes file URLs (can be HTTP URLs pointing to files or URLs to GDrive files), and yields tuples of file URL and IO stream.\n# [end]\nfrom torchdata.datapipes.iter import HttpReader\nURL = \"https://raw.githubusercontent.com/mhjabreel/CharCnn_Keras/master/data/ag_news_csv/train.csv\"\n# Read the URL using the HTTP protocol and process the csv file.\nag_news_train = HttpReader(URL)", "error": "", "token_usage": [[245, 151]], "time_usage": [4.494060516357422]}
{"task_id": "TorchDataEval/25", "success": true, "generated_code": "# [start]\n# map(datapipe: IterDataPipe, fn: Callable, input_col=None, output_col=None): Applies a function over each item from the source DataPipe.\n# HttpReader(source_datapipe: IterDataPipe[str], timeout: Optional[float] = None): Takes file URLs (HTTP URLs pointing to files), and yields tuples of file URL and IO stream.\n# [end]\nfrom torchdata.datapipes.iter import HttpReader\nURL = \"https://raw.githubusercontent.com/mhjabreel/CharCnn_Keras/master/data/ag_news_csv/train.csv\"\n# Read the URL using the HTTP protocol and process the csv file.\n# Then, we map the datapipe using lambda_func_ to get what we want.\nlambda_func_ = lambda t: (int(t[0]), \" \".join(t[1:]))\nag_news_train = HttpReader(URL) | map(lambda_func_)", "error": "", "token_usage": [[281, 192]], "time_usage": [4.950544118881226]}
{"task_id": "TorchDataEval/26", "success": true, "generated_code": "batch(datapipe: MapDataPipe[T], batch_size: int, drop_last: bool = False, wrapper_class=DataChunk): Create mini-batches of data.\nbucketbatch(datapipe: torch.utils.data.dataset.IterDataPipe[+T_co], batch_size: int, drop_last: bool = False, batch_num: int = 100, bucket_num: int = 1, sort_key: Union[Callable, NoneType] = None, in_batch_shuffle: bool = True): Creates mini-batches of data from sorted bucket.\n\nfrom torchdata.datapipes.iter import HttpReader\n\nURL = \"https://raw.githubusercontent.com/mhjabreel/CharCnn_Keras/master/data/ag_news_csv/train.csv\"\n# Read the URL using the HTTP protocol and process the csv file.\n# Then, we map the datapipe using lambda_func_ to get what we want.\nlambda_func_ = lambda t: (int(t[0]), \" \".join(t[1:]))\nag_news_train = HttpReader([URL]).parse_csv().map(lambda_func_)\nlambda_batch = lambda batch: {'labels': [sample[0] for sample in batch],\\\n                                      'text': [sample[1].split() for sample in batch]}\n# How to get all batches from a datapipe with batch size 2?\n# Furthermore, the batches should be mapped using lambda_batch.\nagn_batches = batch(ag_news_train, batch_size=2).map(lambda_batch)", "error": "", "token_usage": [[400, 306]], "time_usage": [8.271252870559692]}
{"task_id": "TorchDataEval/27", "success": true, "generated_code": "# [start]\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# SampleMultiplexer(*args, **kwds): Takes a `Dict` of (IterDataPipe, Weight), and yields items by sampling from these DataPipes with respect to their weights.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper, Sampler\ndp = IterableWrapper(range(3))\n# Augment the datapipe with repeat three times and sample the data.\ndp = Sampler(dp.repeat(3), dp)", "error": "", "token_usage": [[238, 148]], "time_usage": [4.398603439331055]}
{"task_id": "TorchDataEval/28", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\ndp1 = IterableWrapper(range(3))\ndp2 = IterableWrapper(range(5))\n\n# First we concatenate two datapipes and then repeat the concatenated datapipe three times.\ndp = mux(concat(dp1, dp2), concat(dp1, dp2), concat(dp1, dp2))", "error": "", "token_usage": [[200, 75]], "time_usage": [2.6051907539367676]}
{"task_id": "TorchDataEval/29", "success": true, "generated_code": "res_dp = zip_with_iter(dp1, dp2, itemgetter(0), merge_fn=merge_fn, keep_key=True)\nres_dp = zip_with_map(res_dp, dp2, itemgetter(0), merge_fn=merge_fn)\nres_dp = zip_with_iter(res_dp, dp2, itemgetter(0), merge_fn=merge_fn, keep_key=True)", "error": "", "token_usage": [[372, 81]], "time_usage": [2.5999915599823]}
{"task_id": "TorchDataEval/30", "success": true, "generated_code": "res_dp = zip_with_iter(dp1, dp2, itemgetter(0), itemgetter(0), True, merge_fn=merge_fn)\nfor i, item in enumerate(res_dp):\n    print(f\"Item {i}: {item}\")", "error": "", "token_usage": [[1128, 1147]], "time_usage": [42.2013578414917]}
{"task_id": "TorchDataEval/31", "success": true, "generated_code": "res_dp = zip_with_iter(dp1, dp2, itemgetter(0), itemgetter(0), True, merge_fn=merge_fn)\nres_dp = list(res_dp)\nres_dp = res_dp[0]", "error": "", "token_usage": [[372, 49]], "time_usage": [1.9631526470184326]}
{"task_id": "TorchDataEval/32", "success": true, "generated_code": "from torchdata.datapipes.iter import IterDataPipe, IterableWrapper\nfrom torchdata.datapipes.map import MapDataPipe, SequenceWrapper\nfrom operator import itemgetter\nfrom typing import Callable, Optional\n\ndef zip_with_iter(source_datapipe: IterDataPipe, ref_datapipe: IterDataPipe, key_fn: Callable, ref_key_fn: Optional[Callable] = None, keep_key: bool = False, buffer_size: int = 10000, merge_fn: Optional[Callable] = None):\n    \"\"\"\n    Zips two IterDataPipes together based on the matching key.\n    \"\"\"\n    pass\n\ndef zip_with_map(source_iterdatapipe: IterDataPipe, map_datapipe: MapDataPipe, key_fn: Callable, merge_fn: Optional[Callable] = None):\n    \"\"\"\n    Joins the items from the source IterDataPipe with items from a MapDataPipe.\n    \"\"\"\n    pass\n\ndef merge_fn(tuple_from_iter, value_from_map):\n    return tuple_from_iter[0], tuple_from_iter[1] + value_from_map\n\ndp1 = IterableWrapper([('a', 1), ('b', 2), ('c', 3)])\nmapdp = SequenceWrapper({'a': 100, 'b': 200, 'c': 300, 'd': 400})\n\n# Using merge_fn to zip the two data pipes.\n# Repeating three times to argument the zipped data pipe.\nres_dp = zip_with_iter(dp1, mapdp, itemgetter(0), merge_fn=merge_fn)\nres_dp = zip_with_iter(res_dp, mapdp, itemgetter(0), merge_fn=merge_fn)\nres_dp = zip_with_iter(res_dp, mapdp, itemgetter(0), merge_fn=merge_fn)", "error": "", "token_usage": [[381, 372]], "time_usage": [9.396233320236206]}
{"task_id": "TorchDataEval/33", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\nfrom torchdata.datapipes.map import SequenceWrapper\nfrom operator import itemgetter\n\ndef merge_fn(tuple_from_iter, value_from_map):\n    return tuple_from_iter[0], tuple_from_iter[1] + value_from_map\n\ndp1 = IterableWrapper([('a', 1), ('b', 2), ('c', 3)])\nmapdp = SequenceWrapper({'a': 100, 'b': 200, 'c': 300, 'd': 400})\n\n# Using merge_fn to zip the two data pipes, and repeating three times to argument the zipped data pipe.\n# Finally, we convert the result type to a list and take the second element of each tuple.\nres_dp = zip_with_map(dp1, mapdp, itemgetter(0), merge_fn)\nres_dp = res_dp.repeat(3)\nres_dp = res_dp.as_list()\nres_dp = list(map(itemgetter(1), res_dp))", "error": "", "token_usage": [[400, 207]], "time_usage": [6.226135492324829]}
{"task_id": "TorchDataEval/34", "success": true, "generated_code": "from torchdata.datapipes.iter import zip_with_iter\nfrom torchdata.datapipes.map import zip_with_map\n\ndef merge_fn(tuple_from_iter, value_from_map):\n    return tuple_from_iter[0], tuple_from_iter[1] + value_from_map\n\ndp1 = IterableWrapper([('a', 1), ('b', 2), ('c', 3)])\nmapdp = SequenceWrapper({'a': 100, 'b': 200, 'c': 300, 'd': 400})\n\n# Using merge_fn to zip the two data pipes, and repeating three times to argument the zipped data pipe, and then sampling the result.\n# Finally, we convert the result type to a list and take the third element of each tuple.\nres_dp = zip_with_iter(dp1, mapdp, itemgetter(0), keep_key=True, merge_fn=merge_fn).repeat(3).shuffle(buffer_size=10000).to_list().map(itemgetter(2))", "error": "", "token_usage": [[416, 206]], "time_usage": [6.110803127288818]}
{"task_id": "TorchDataEval/35", "success": true, "generated_code": "# [start]\n# groupby(datapipe: IterDataPipe[torch.utils.data.datapipes.iter.grouping.T_co], group_key_fn: Callable, *, buffer_size: int = 10000, group_size: Optional[int] = None, guaranteed_group_size: Optional[int] = None, drop_remaining: bool = False): Groups data from input IterDataPipe by keys which are generated from ``group_key_fn``, and yields a ``DataChunk`` with batch size up to ``group_size`` if defined.\n# FileLister(*args, **kwds): Given path(s) to the root directory, yields file pathname(s) (path + filename) of files within the root directory.\n# [end]\nimport os\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndef group_fn(file):\n   return os.path.basename(file).split(\".\")[0]\n\nsource_dp = IterableWrapper([\"a.png\", \"b.png\", \"a.json\", \"b.json\", \"a.jpg\", \"c.json\"])\n\n# Group the files by their file name using the group_fn function.\n# Then, reserving the length of group result greater than 1.\ndp0 = source_dp.groupby(group_fn, guaranteed_group_size=2)", "error": "", "token_usage": [[341, 255]], "time_usage": [6.897511005401611]}
{"task_id": "TorchDataEval/37", "success": true, "generated_code": "collate(collated_ds, collate_fn)", "error": "", "token_usage": [[339, 14]], "time_usage": [1.186948537826538]}
{"task_id": "TorchDataEval/38", "success": true, "generated_code": "# [start]\n# collate(datapipe: IterDataPipe, collate_fn: Callable = <function default_collate>): Collates samples from DataPipe to Tensor(s) by a custom collate function.\n# filter(datapipe: IterDataPipe, filter_fn: Callable, drop_empty_batches: bool = True): Filters out elements from the source datapipe according to input ``filter_fn``.\n# [end]\nimport torch\nclass MyIterDataPipe(torch.utils.data.IterDataPipe):\n    def __init__(self, start, end):\n        super(MyIterDataPipe).__init__()\n        assert end > start, \"this example code only works with end >= start\"\n        self.start = start\n        self.end = end\n\n    def __iter__(self):\n        return iter(range(self.start, self.end))\n\n    def __len__(self):\n        return self.end - self.start\nds = MyIterDataPipe(start=3, end=7)\n\ndef collate_fn(batch):\n    return torch.tensor(batch, dtype=torch.float)\n\n# Filter the value smaller than 5\n# Second make the datapipe tensor-like by using `collate_fn`\ncollated_ds = collate(ds, collate_fn)", "error": "", "token_usage": [[345, 255]], "time_usage": [7.7430949211120605]}
{"task_id": "TorchDataEval/40", "success": true, "generated_code": "# [start]\n# demux(datapipe: torch.utils.data.dataset.IterDataPipe, num_instances: int, classifier_fn: Callable[[+T_co], Union[int, NoneType]], drop_none: bool = False, buffer_size: int = 1000): Splits the input DataPipe into multiple child DataPipes, using the given classification function.\n# concat(*args, **kwds): Concatenate multiple Map DataPipes.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndef great_than_5(x: int):\n    return x > 5\n\nsource_dp = IterableWrapper(range(10))\n# Split the source datapipe into two datapipes by applying the function `great_than_5`\ndp_one, dp_two = source_dp.demux(2, great_than_5)", "error": "", "token_usage": [[260, 175]], "time_usage": [5.454794645309448]}
{"task_id": "TorchDataEval/41", "success": true, "generated_code": "# [start]\n# SampleMultiplexer(*args, **kwds): Takes a `Dict` of (IterDataPipe, Weight), and yields items by sampling from these DataPipes with respect to their weights.\n# filter(datapipe: IterDataPipe, filter_fn: Callable, drop_empty_batches: bool = True): Filters out elements from the source datapipe according to input ``filter_fn``.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\nfrom torchdata.datapipes.iter import SampleMultiplexer\n\ndp1 = IterableWrapper([1, 2, 3, 4, 5, 6])\ndp2 = IterableWrapper([7, 8, 9, 10, 11, 12])\nweight_ = {\n    dp1: 0.8, \n    dp2: 0.2\n}\n\n# Given the weight, how to sample from two datapipes?\n# Note that the sample seed is set to 1 for reproducibility\nresult_dp = SampleMultiplexer(dp1, dp2, weights=weight_, seed=1)", "error": "", "token_usage": [[315, 234]], "time_usage": [6.11996865272522]}
{"task_id": "TorchDataEval/42", "success": true, "generated_code": "# [start]\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# map(datapipe: IterDataPipe, fn: Callable, input_col=None, output_col=None): Applies a function over each item from the source DataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\nraw_dp = IterableWrapper([(0, 10, 20), (1, 11, 21), (2, 12, 22)])\n# I would like assgin dp1 to be a datapipe that contains the first column of raw_dp\n# and dp2 to be a datapipe that contains the second column of raw_dp\n# and dp3 to be a datapipe that contains the third column of raw_dp\n# How to do this?\ndp1, dp2, dp3 = map(raw_dp, lambda x: x[0]), map(raw_dp, lambda x: x[1]), map(raw_dp, lambda x: x[2])", "error": "", "token_usage": [[312, 247]], "time_usage": [6.323104381561279]}
{"task_id": "TorchDataEval/43", "success": true, "generated_code": "# [start]\n# batch(datapipe: IterDataPipe, batch_size: int, drop_last: bool = False, wrapper_class=List): Creates mini-batches of data.\n# bucketbatch(datapipe: torch.utils.data.dataset.IterDataPipe[+T_co], batch_size: int, drop_last: bool = False, batch_num: int = 100, bucket_num: int = 1, sort_key: Union[Callable, NoneType] = None, in_batch_shuffle: bool = True): Creates mini-batches of data from sorted bucket.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp = IterableWrapper([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n# Make a batch operation on the datapipe `dp` of size 3 with droping last batch if it is not full.\n# And then get the first two batches.\ndp = batch(dp, 3, drop_last=True)[:2]", "error": "", "token_usage": [[306, 220]], "time_usage": [5.840190172195435]}
{"task_id": "TorchDataEval/44", "success": true, "generated_code": "# [start]\n# batch(datapipe: IterDataPipe, batch_size: int, drop_last: bool = False, wrapper_class=List): Creates mini-batches of data.\n# bucketbatch(datapipe: torch.utils.data.dataset.IterDataPipe[+T_co], batch_size: int, drop_last: bool = False, batch_num: int = 100, bucket_num: int = 1, sort_key: Union[Callable, NoneType] = None, in_batch_shuffle: bool = True): Creates mini-batches of data from sorted bucket.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp1 = IterableWrapper([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\ndp2 = IterableWrapper([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n# Batch on data pipe `dp1` of size 4 and discard the last batch if they are not filled, and then obtain the first two batches.\n# Then the above result is concatenated with the datapipe `dp2`.\ndp_3 = batch(dp1, 4, drop_last=True)[:2] + dp2", "error": "", "token_usage": [[355, 274]], "time_usage": [7.324439764022827]}
{"task_id": "TorchDataEval/45", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenates multiple Iterable DataPipes.\n# enumerate(*args, **kwds): Adds an index to an existing DataPipe through enumeration, with the index starting from 0 by default.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\ndp_source_1 = IterableWrapper([{'a': 1, 'b': 2}, {'c': 3, 'a': 1}])\ndp_source_2 = IterableWrapper([{'d': 10, 'e': 20}, {'f': 30, 'd': 10}])\n\n# Concatenate two datapipes and add corresponding indices with the name `Ids`.\nindex_dp = enumerate(concat(dp_source_1, dp_source_2), start=0)", "error": "", "token_usage": [[254, 172]], "time_usage": [4.798879146575928]}
{"task_id": "TorchDataEval/46", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenates multiple Iterable DataPipes.\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp_source_1 = IterableWrapper([{'a': 1, 'b': 2}, {'c': 3, 'a': 1}])\ndp_source_2 = IterableWrapper([{'d': 10, 'e': 20}, {'f': 30, 'd': 10}])\n\n# Join the two data pipes and add an index with the name `Ids`.\n# Then create three copies of the datapipe.\nindex_dp1, index_dp2, index_dp3 = concat(dp_source_1.header(limit=10), dp_source_2.header(limit=10)), concat(dp_source_1.header(limit=10), dp_source_2.header(limit=10)), concat(dp_source_1.header(limit=10), dp_source_2.header(limit=10))", "error": "", "token_usage": [[293, 252]], "time_usage": [6.766052722930908]}
{"task_id": "TorchDataEval/47", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenate multiple Map DataPipes.\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp_source_1 = IterableWrapper([{'a': 1, 'b': 2}, {'c': 3, 'a': 1}])\ndp_source_2 = IterableWrapper([{'d': 10, 'e': 20}, {'f': 30, 'd': 10}])\ndp_source_3 = IterableWrapper([{'g': 100, 'h': 200}, {'i': 300, 'g': 100}])\n\n# Join the three data pipes and obtain the enumerated datapipe.\nnew_dp = concat(dp_source_1, dp_source_2, dp_source_3).enumerate()", "error": "", "token_usage": [[303, 223]], "time_usage": [6.805774688720703]}
{"task_id": "TorchDataEval/48", "success": true, "generated_code": "# [start]\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# flatmap(*args, **kwds): Applies a function over each item from the source DataPipe, then flattens the outputs to a single, unnested IterDataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndef flatted_func(x):\n    return [x, x+\"_1\", x+\"_2\"]\n\nsource_dp = IterableWrapper([\"a\", \"b\", \"c\"])\n# I want to augment the source datapipe with the above function, which will return nine elements.\n# Then we flatten the nine elements into a single datapipe.\nnew_dp = source_dp.header().flatmap(flatted_func)", "error": "", "token_usage": [[278, 190]], "time_usage": [5.888916969299316]}
{"task_id": "TorchDataEval/49", "success": true, "generated_code": "# [start]\n# HttpReader(source_datapipe: IterDataPipe[str], timeout: Optional[float] = None): Takes file URLs (HTTP URLs pointing to files), and yields tuples of file URL and IO stream.\n# OnlineReader(*args, **kwds): Takes file URLs (can be HTTP URLs pointing to files or URLs to GDrive files), and yields tuples of file URL and IO stream.\n# [end]\nfrom torchdata.datapipes.iter import HttpReader\n\nAG_NEWS_CSV_URL = \"https://raw.githubusercontent.com/mhjabreel/CharCnn_Keras/master/data/ag_news_csv/train.csv\"\n# Read the URL using the HTTP protocol and parse the csv file as a dictionary.\nag_news_train = HttpReader([AG_NEWS_CSV_URL])", "error": "", "token_usage": [[252, 163]], "time_usage": [5.522427558898926]}
{"task_id": "TorchDataEval/3", "success": true, "generated_code": "# [start]\n# concat(*args, **kwds): Concatenate multiple Map DataPipes.\n# MapDataPipe(*args, **kwds): Map-style DataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\ndp_one, dp_two = IterableWrapper(range(3)), IterableWrapper(range(5))\n\n# concat two datapipes\nnew_dp = dp_one.concat(dp_two)", "error": "", "token_usage": [[181, 89]], "time_usage": [3.0723795890808105]}
{"task_id": "TorchDataEval/8", "success": true, "generated_code": "# [start]\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# flatmap(*args, **kwds): Applies a function over each item from the source DataPipe, then flattens the outputs to a single, unnested IterDataPipe.\n# [end]\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp1, dp2 = IterableWrapper(range(3)), IterableWrapper(range(10, 15))\n# One element is generated from each input Iterable DataPipes in turn, until the end when the shortest input DataPipe is used up.\nresult = dp1.header(5).flatmap(lambda x: [x, x+1])", "error": "", "token_usage": [[258, 179]], "time_usage": [5.2937233448028564]}
{"task_id": "TorchDataEval/13", "success": true, "generated_code": "collated_ds = ds.collate(int2tensor)", "error": "", "token_usage": [[326, 15]], "time_usage": [1.1852164268493652]}
{"task_id": "TorchDataEval/15", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper\n\nsource_dp = IterableWrapper([[[0, 1], [2]], [[3, 4], [5]], [[6]]])\n# Does the unbatch processing of data, the level is setted by default to 1.\ndp2 = unbatch(source_dp, unbatch_level=1)", "error": "", "token_usage": [[226, 77]], "time_usage": [2.512936592102051]}
{"task_id": "TorchDataEval/22", "success": true, "generated_code": "from torchdata.datapipes.iter import IterableWrapper, StreamReader\nfrom io import StringIO\n\ndp = IterableWrapper([(\"alphabet\", StringIO(\"abcde\"))])\n# generating bytes where the chunk is set to one.\nresult_dp = StreamReader(dp, chunk=1)", "error": "", "token_usage": [[220, 57]], "time_usage": [2.125321865081787]}
{"task_id": "TorchDataEval/39", "success": true, "generated_code": "# [start]\n# demux(datapipe: torch.utils.data.dataset.IterDataPipe, num_instances: int, classifier_fn: Callable[[+T_co], Union[int, NoneType]], drop_none: bool = False, buffer_size: int = 1000): Splits the input DataPipe into multiple child DataPipes, using the given classification function.\n# header(source_datapipe: IterDataPipe[torchdata.datapipes.iter.util.header.T_co], limit: int = 10): Yields elements from the source DataPipe from the start, up to the specfied limit.\n# [end]\nimport random\nfrom torchdata.datapipes.iter import IterableWrapper\n\ndp_dog = IterableWrapper([\"dog1\", \"dog2\", \"dog3\"])\ndp_cat = IterableWrapper([\"cat1\", \"cat2\", \"cat3\"])\n\ndef remove_final_number(s):\n    return s[:-1]\n\n# Put the above DataPipes into one list obj, and remove the last number from each element (e.g., \"1\" in \"dog1\")\nresult = [remove_final_number(item) for item in dp_dog] + [remove_final_number(item) for item in dp_cat]", "error": "", "token_usage": [[324, 252]], "time_usage": [7.367070436477661]}
{"task_id": "TorchDataEval/36", "success": true, "generated_code": "from torch.utils.data.datapipes.iter.grouping import groupby\nfrom torchdata.datapipes.iter.util.header import header\n\n# group by source_dp using the ``group_fn`` function and obtain the header groups by default, assign the result to the new variable ``header_groups``.\ndp0 = groupby(source_dp, group_fn)\nheader_groups = header(dp0)", "error": "", "token_usage": [[356, 80]], "time_usage": [2.819690704345703]}
